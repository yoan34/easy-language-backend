[CREATE_ALL_LIST_OF_WORD]
    [CREATE_FOLDER]: data/french_english/verbs
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english verbs always in infinitive form, if possible, otherwise include as many as possible. Never comments, juste write verbs
        [API_QUESTION] Write verbs that start by the letter 'a'.
[ERROR_API] Error when call API: Bad gateway. {"error":{"code":502,"message":"Bad gateway.","param":null,"type":"cf_bad_gateway"}} 502 {'error': {'code': 502, 'message': 'Bad gateway.', 'param': None, 'type': 'cf_bad_gateway'}} {'Date': 'Wed, 31 May 2023 08:44:17 GMT', 'Content-Type': 'application/json', 'Content-Length': '84', 'Connection': 'keep-alive', 'X-Frame-Options': 'SAMEORIGIN', 'Referrer-Policy': 'same-origin', 'Cache-Control': 'private, max-age=0, no-store, no-cache, must-revalidate, post-check=0, pre-check=0', 'Expires': 'Thu, 01 Jan 1970 00:00:01 GMT', 'Server': 'cloudflare', 'CF-RAY': '7cfde7ada9a20171-CDG', 'alt-svc': 'h3=":443"; ma=86400'}
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english verbs always in infinitive form, if possible, otherwise include as many as possible. Never comments, juste write verbs
        [API_QUESTION] Write verbs that start by the letter 'a'.
        [API_ANSWER] ['ask', 'answer', 'act', 'argue', 'arrive', 'agree', 'achieve', 'analyze', 'announce', 'allocate', 'adapt', 'assemble', 'attract', 'attend', 'avoid', 'awake', 'assess', 'approve', 'abandon', 'accelerate', 'accompany', 'accomplish', 'accuse', 'acknowledge', 'acquire', 'activate', 'add', 'address', 'adjust', 'administer', 'admire', 'admit', 'adopt', 'advance', 'advertise', 'advise', 'afford', 'age', 'agree', 'aid', 'aim', 'alert', 'allege', 'allow', 'alter', 'amaze', 'analyze', 'announce', 'annoy', 'answer', 'anticipate', 'apologize', 'appeal', 'appear', 'applaud', 'apply', 'appoint', 'appreciate', 'approach', 'approve', 'argue', 'arise', 'arrange', 'arrest', 'arrive', 'articulate', 'ask', 'assert', 'assess', 'assign', 'assist', 'assume', 'assure', 'attach', 'attack', 'attempt', 'attend', 'attract', 'auction', 'audit', 'avoid', 'avert', 'await', 'awake', 'award', 'back', 'bake', 'balance', 'ban', 'bang', 'bare', 'bat', 'bathe', 'battle', 'be', 'beam', 'bear', 'beat', 'become', 'befriend', 'beg', 'begin', 'behave', 'believe', 'belong', 'bend', 'berate', 'besiege', 'bestow', 'bet', 'bid', 'bind', 'bite', 'bleach', 'bleed', 'bless', 'blind', 'blink', 'blot', 'blow', 'blurt', 'blush', 'boast', 'bob', 'boil', 'bolt', 'bomb', 'book', 'bore', 'borrow', 'bounce', 'bow', 'box', 'brag', 'brake', 'branch', 'brand', 'break', 'breathe', 'breed', 'bring', 'broadcast', 'bruise', 'brush', 'bubble', 'build', 'bump', 'burn', 'burst', 'bury', 'buy', 'buzz', 'calculate', 'call', 'camp', 'care', 'carry', 'carve', 'cause', 'catch', 'challenge', 'change', 'charge', 'chase', 'cheat', 'check', 'cheer', 'chew', 'choke', 'choose', 'chop', 'claim', 'clap', 'clean', 'clear', 'climb', 'clip', 'close', 'clothe', 'clutch', 'collapse', 'collect', 'color', 'comb', 'come', 'comfort', 'command', 'communicate', 'compare', 'compete', 'complain', 'complete', 'concentrate', 'concern', 'conclude', 'conduct', 'confess', 'confide', 'confirm', 'confuse', 'connect', 'conquer', 'consent', 'conserve', 'consider', 'consist', 'console', 'consolidate', 'construct', 'consult', 'contain', 'continue', 'contract', 'control', 'convert', 'cook', 'cool', 'coordinate', 'copy', 'correct', 'correlate', 'cost', 'cough', 'counsel', 'count', 'cover', 'covet', 'crack', 'crash', 'crawl', 'create', 'creep', 'criticize', 'cross', 'crush', 'cry', 'cure', 'curl', 'curve', 'cut', 'cycle', 'dam', 'damage', 'dance', 'dare', 'deal', 'decay', 'deceive', 'decide', 'decorate', 'define', 'delay', 'delegate', 'delight', 'deliver', 'demand', 'demonstrate', 'depend', 'describe', 'desert', 'deserve', 'design', 'destroy', 'detail', 'detect', 'determine', 'develop', 'devise', 'diagnose', 'dig', 'direct', 'disagree', 'disappear', 'disapprove', 'disarm', 'discover', 'discuss', 'dislike', 'dismiss', 'display', 'dispose', 'distribute', 'disturb', 'disuse', 'dive', 'divert', 'divide', 'do', 'double', 'doubt', 'draft', 'drag', 'drain', 'dramatize', 'draw', 'dream', 'dress', 'drink', 'drip', 'drive', 'drop', 'drown', 'drum', 'dry', 'dust', 'dwell', 'earn', 'eat', 'educate', 'eliminate', 'embarrass', 'employ', 'empower', 'empty', 'encircle', 'encourage', 'encroach', 'end', 'endure', 'enforce', 'engineer', 'enhance', 'enjoy', 'enlist', 'enrage', 'enrich', 'enter', 'entertain', 'escape', 'evacuate', 'evaporate', 'exaggerate', 'examine', 'excite', 'excuse', 'execute', 'exercise', 'exhibit', 'exist', 'expand', 'expect', 'expedite', 'experiment', 'explain', 'explode', 'explore', 'export', 'express', 'extend', 'extract', 'face', 'facilitate', 'fade', 'fail', 'faint', 'fake', 'fall', 'falter', 'fan', 'fancy', 'fantasize', 'fasten', 'favor', 'fax', 'fear', 'feed', 'feel', 'fence', 'fetch', 'fight', 'file', 'fill', 'film', 'finalize', 'finance', 'find', 'fire', 'fish', 'fit', 'fix', 'flap', 'flash', 'flee', 'fling', 'float', 'flood', 'flop', 'flow', 'flower', 'fly', 'fold', 'follow', 'fool', 'forbid', 'force', 'forecast', 'foretell', 'forget', 'forgive', 'form', 'formulate', 'forsake', 'frame', 'freeze', 'frighten', 'fry', 'fulfill', 'function', 'fund', 'gain', 'gainsay', 'gash', 'gasp', 'gather', 'gaze', 'generate', 'get', 'give', 'glance', 'glare', 'glow', 'glue', 'go', 'govern', 'grab', 'grade', 'grant', 'grasp', 'grate', 'grease', 'greet', 'grill', 'grin', 'grind', 'grip', 'groan', 'grow', 'growl', 'grumble', 'grunt', 'guarantee', 'guard', 'guess', 'guide', 'gurgle', 'gush', 'hail', 'hammer', 'hand', 'handle', 'hang', 'happen', 'harass', 'harm', 'harness', 'hate', 'haul', 'have', 'head', 'heal', 'heap', 'hear', 'heat', 'help', 'hide', 'highlight', 'hijack', 'hinder', 'hint', 'hiss', 'hit', 'hold', 'hook', 'hoax', 'hobble', 'hog', 'hold', 'holler', 'hone', 'hook', 'hop', 'hope', 'hover', 'howl', 'hug', 'hum', 'hunt', 'hurry', 'hurt', 'hurtle', 'hypnotize', 'identify', 'ignore', 'illustrate', 'imagine', 'implement', 'impress', 'improve', 'improvise', 'include', 'increase', 'induce', 'influence', 'inform', 'initiate', 'inject', 'injure', 'inlay', 'innovate', 'input', 'inquire', 'insist', 'inspect', 'inspire', 'install', 'institute', 'instruct', 'insure', 'integrate', 'intend', 'intensify', 'interest', 'interfere', 'interlay', 'interpret', 'interrupt', 'interview', 'introduce', 'invent', 'inventory', 'investigate', 'invite', 'irritate', 'itch', 'jab', 'jabber', 'jam', 'jog', 'join', 'joke', 'jolt', 'judge', 'juggle', 'jump', 'justify', 'keep', 'kick', 'kill', 'kiss', 'kneel', 'knit', 'knock', 'knot', 'know', 'label', 'lament', 'land', 'last', 'laugh', 'launch', 'lavish', 'lay', 'lead', 'lean', 'leap', 'learn', 'leave', 'lecture', 'lend', 'let', 'level', 'license', 'lick', 'lie', 'lift', 'light', 'lighten', 'like', 'list', 'listen', 'live', 'load', 'loan', 'lock', 'log', 'long', 'look', 'loosen', 'lose', 'love', 'lower', 'lubricate', 'magnify', 'maintain', 'make', 'man', 'manage', 'manipulate', 'manufacture', 'map', 'march', 'mark', 'market', 'marry', 'match', 'mate', 'matter', 'mean', 'measure', 'meddle', 'mediate', 'meet', 'melt', 'mend', 'mention', 'merge', 'migrate', 'milk', 'mine', 'mislead', 'miss', 'misspell', 'mistake', 'misunderstand', 'mix', 'moan', 'model', 'modify', 'moor', 'motivate', 'mourn', 'move', 'mow', 'mug', 'multiply', 'murder', 'nail', 'name', 'nap', 'navigate', 'need', 'neglect', 'negotiate', 'nest', 'nod', 'nominate', 'normalize', 'note', 'notice', 'number', 'nurse', 'obey', 'object', 'observe', 'obstruct', 'obtain', 'occupy', 'occur', 'offend', 'offer', 'officiate', 'open', 'operate', 'opine', 'oppose', 'opt', 'optimize', 'order', 'organize', 'originate', 'outline', 'outmaneuver', 'outshine', 'outsmart', 'overcome', 'overdo', 'overdraw', 'overflow', 'overhear', 'overtake', 'overthrow', 'owe', 'own', 'pacify', 'paint', 'pamper', 'panic', 'pant', 'paper', 'parade', 'pardon', 'park', 'part', 'participate', 'pass', 'paste', 'pat', 'patch', 'pause', 'pay', 'peck', 'pedal', 'peel', 'peep', 'perceive', 'perfect', 'perform', 'permit', 'persuade', 'phone', 'photograph', 'pick', 'pilot', 'pinch', 'pine', 'place', 'plan', 'plant', 'play', 'plead', 'please', 'pledge', 'plow', 'plug', 'point', 'poke', 'polish', 'ponder', 'pop', 'possess', 'post', 'pour', 'practice', 'praise', 'pray', 'preach', 'precede', 'predict', 'prefer', 'prepare', 'prescribe', 'present', 'preserve', 'preset', 'preside', 'press', 'pretend', 'prevent', 'prick', 'print', 'process', 'procure', 'produce', 'profess', 'program', 'progress', 'project', 'promise', 'promote', 'proofread', 'propose', 'protect', 'prove', 'provide', 'publicize', 'pull', 'pump', 'punch', 'punish', 'purchase', 'purify', 'push', 'put', 'qualify', 'question', 'queue', 'quit', 'race', 'radiate', 'rain', 'raise', 'rank', 'rate', 'reach', 'read', 'realign', 'realize', 'reason', 'reassure', 'rebel', 'recall', 'recapture', 'receive', 'recite', 'recognize', 'recommend', 'reconcile', 'record', 'recover', 'recruit', 'reduce', 'refer', 'reflect', 'refuse', 'regret', 'regulate', 'rehabilitate', 'reign', 'reinforce', 'reject', 'rejoice', 'relate', 'relax', 'release', 'rely', 'remain', 'remember', 'remind', 'remove', 'render', 'reorganize', 'repair', 'repeat', 'replace', 'reply', 'report', 'represent', 'reproduce', 'request', 'rescue', 'research', 'resign', 'resist', 'resolve', 'respond', 'rest', 'restructure', 'result', 'resume', 'retain', 'retire', 'retrieve', 'return', 'reuse', 'review', 'revise', 'rhyme', 'rid', 'ride', 'ring', 'rinse', 'rise', 'risk', 'roar', 'rob', 'rock', 'roll', 'rot', 'row', 'rub', 'ruin', 'rule', 'run', 'rush', 'sack', 'sail', 'satisfy', 'save', 'saw', 'say', 'scare', 'scatter', 'schedule', 'scold', 'scorch', 'scrape', 'scratch', 'scream', 'screech', 'screw', 'scribble', 'scrub', 'search', 'secure', 'see', 'seek', 'seem', 'seize', 'select', 'sell', 'send', 'sense', 'separate', 'serve', 'service', 'set', 'settle', 'sever', 'sew', 'shade', 'shake', 'shape', 'share', 'shatter', 'shave', 'shear', 'shed', 'shelter', 'shine', 'shiver', 'shock', 'shoe', 'shoot', 'shop', 'show', 'shrink', 'shrug', 'shut', 'sigh', 'sign', 'signal', 'simplify', 'sin', 'sing', 'sink', 'sip', 'sit', 'sketch', 'ski', 'skip', 'slap', 'slay', 'sleep', 'slide', 'sling', 'slink', 'slip', 'slit', 'slow', 'smash', 'smell', 'smile', 'smite', 'smoke', 'snap', 'snarl', 'snatch', 'sneak', 'sneeze', 'sniff', 'snore', 'snow', 'soak', 'solve', 'soothe', 'soothsay', 'sort', 'sound', 'sow', 'spare', 'spark', 'sparkle', 'speak', 'specify', 'speed', 'spell', 'spend', 'spill', 'spin', 'spit', 'split', 'spoil', 'spot', 'spray', 'spread', 'spring', 'sprout', 'squash', 'squeak', 'squeal', 'squeeze', 'stain', 'stamp', 'stand', 'stare', 'start', 'stash', 'state', 'stay', 'steal', 'steer', 'step', 'stick', 'stimulate', 'sting', 'stink', 'stir', 'stitch', 'stop', 'store', 'strap', 'streamline', 'strengthen', 'stretch', 'stride', 'strike', 'string', 'strip', 'strive', 'stroke', 'structure', 'study', 'stuff', 'stutter', 'style', 'submit', 'subscribe', 'subtract', 'succeed', 'suck', 'suffer', 'suggest', 'suit', 'summarize', 'supervise', 'supply', 'support', 'suppose', 'surmise', 'surprise', 'surrender', 'surround', 'survey', 'survive', 'sway', 'swear', 'sweat', 'sweep', 'swell', 'swim', 'swing', 'switch', 'symbolize', 'synthesize', 'systemize', 'tabulate', 'take', 'talk', 'tame', 'tap', 'target', 'taste', 'teach', 'tear', 'tease', 'telephone', 'tell', 'tempt', 'terrify', 'test', 'thank', 'thaw', 'think', 'thrive', 'throw', 'thrust', 'tick', 'tickle', 'tie', 'time', 'tip', 'tire', 'touch', 'tour', 'tow', 'trace', 'trade', 'train', 'transcribe', 'transfer', 'transform', 'translate', 'transport', 'trap', 'travel', 'tread', 'treat', 'tremble', 'trick', 'trip', 'trot', 'trouble', 'troubleshoot', 'trust', 'try', 'tug', 'tumble', 'turn', 'tutor', 'twist', 'type', 'undergo', 'understand', 'undertake', 'undress', 'unfasten', 'unify', 'unite', 'unlock', 'unpack', 'untie', 'update', 'upgrade', 'uphold', 'upset', 'use', 'usurp', 'utilize', 'utter', 'vacuum', 'value', 'vanish', 'vary', 'vault', 'veil', 'verify', 'vex', 'visit', 'voice', 'volunteer', 'vote', 'vouch', 'wail', 'wait', 'wake', 'walk', 'wander', 'want', 'warm', 'warn', 'wash', 'waste', 'watch', 'water', 'wave', 'wear', 'weave', 'wed', 'weep', 'weigh', 'welcome', 'wend', 'wet', 'whine', 'whip', 'whirl', 'whisper', 'whistle', 'win', 'wind', 'wink', 'wipe', 'wish', 'withdraw', 'withhold', 'withstand', 'wobble', 'wonder', 'work', 'worry', 'worship', 'wound', 'wrap', 'wreck', 'wrestle', 'wriggle', 'wring', 'write', 'x-ray', 'yawn', 'yearn', 'yell', 'yield', 'yodel', 'zip', 'zoom']
        [API_TOKENS] 2995
    [CREATE_FILE] verbslist/start_by_a.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english verbs always in infinitive form, if possible, otherwise include as many as possible. Never comments, juste write verbs
        [API_QUESTION] Write verbs that start by the letter 'b'.
        [API_ANSWER] ['bake', 'bathe', 'behave', 'believe', 'bend', 'bet', 'bid', 'bind', 'bite', 'bleed', 'blow', 'boast', 'borrow', 'bounce', 'bow', 'box', 'braid', 'break', 'breathe', 'bring', 'broadcast', 'brush', 'build', 'burn', 'bury', 'buy']
        [API_TOKENS] 62
    [CREATE_FILE] verbslist/start_by_b.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english verbs always in infinitive form, if possible, otherwise include as many as possible. Never comments, juste write verbs
        [API_QUESTION] Write verbs that start by the letter 'c'.
        [API_ANSWER] ['cook', 'clean', 'cry', 'climb', 'calculate', 'call', 'carry', 'catch', 'change', 'chat', 'check', 'cheer', 'chew', 'choose', 'clap', 'classify', 'close', 'coach', 'coil', 'collect', 'color', 'comb', 'comfort', 'command', 'communicate', 'compare', 'compete', 'complete', 'compose', 'compute', 'concentrate', 'conclude', 'conduct', 'confess', 'confuse', 'connect', 'consider', 'consist', 'construct', 'consume', 'contain', 'continue', 'cook', 'copy', 'correct', 'correspond', 'count', 'cover', 'crack', 'create', 'cross']
        [API_TOKENS] 115
    [CREATE_FILE] verbslist/start_by_c.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english verbs always in infinitive form, if possible, otherwise include as many as possible. Never comments, juste write verbs
        [API_QUESTION] Write verbs that start by the letter 'd'.
        [API_ANSWER] ['dance', 'dare', 'deal', 'debate', 'decay', 'deceive', 'decide', 'decorate', 'dedicate', 'defend', 'define', 'delay', 'delete', 'deliver', 'demand', 'demonstrate', 'denounce', 'depend', 'describe', 'deserve', 'design', 'destroy', 'detect', 'develop', 'devote', 'diagnose', 'dictate', 'die', 'differ', 'dig', 'digest', 'diminish', 'dine', 'dip', 'direct', 'disagree', 'disappear', 'discover', 'discuss', 'dislike', 'distinguish', 'distribute', 'disturb', 'dive', 'divide', 'do', 'document', 'dominate', 'donate', 'doubt', 'download', 'drag', 'draw', 'dream', 'dress', 'drink', 'drive', 'drop']
        [API_TOKENS] 145
    [CREATE_FILE] verbslist/start_by_d.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english verbs always in infinitive form, if possible, otherwise include as many as possible. Never comments, juste write verbs
        [API_QUESTION] Write verbs that start by the letter 'e'.
        [API_ANSWER] ['eat', 'enjoy', 'erase', 'embrace', 'endure', 'entertain', 'examine', 'exchange', 'excite', 'exercise', 'explore', 'explain', 'expand', 'expect', 'experience', 'express', 'extend', 'extract', 'enlist', 'enlighten', 'enrage', 'enrich', 'enroll', 'envy', 'equip', 'establish', 'estimate', 'evacuate', 'evaluate', 'evaporate', 'evict', 'evoke', 'evolve', 'exaggerate', 'examine', 'exceed', 'exchange', 'excuse', 'execute', 'exhibit', 'exist', 'expand', 'expect', 'experience', 'experiment', 'explain', 'explode', 'explore', 'export', 'express', 'extend', 'extract']
        [API_TOKENS] 131
    [CREATE_FILE] verbslist/start_by_e.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english verbs always in infinitive form, if possible, otherwise include as many as possible. Never comments, juste write verbs
        [API_QUESTION] Write verbs that start by the letter 'f'.
        [API_ANSWER] ['flee', 'fry', 'frown', 'fumble', 'falter', 'fathom', 'fertilize', 'flicker', 'flourish', 'flirt', 'flap', 'flatter', 'fling', 'float', 'flood', 'flounce', 'flounder', 'flour', 'flow', 'fluff', 'flush', 'flutter', 'focus', 'fold', 'follow', 'forbid', 'force', 'forecast', 'foresee', 'forgive', 'form', 'forsake', 'fortify', 'foster', 'found', 'frame', 'freeze', 'frequent', 'frighten', 'frown', 'fry', 'fuel', 'fulfill', 'function', 'fund', 'furnish', 'fuse', 'fuss', 'fleeing', 'flying', 'fishing', 'firing', 'filing']
        [API_TOKENS] 148
    [CREATE_FILE] verbslist/start_by_f.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english verbs always in infinitive form, if possible, otherwise include as many as possible. Never comments, juste write verbs
        [API_QUESTION] Write verbs that start by the letter 'g'.
        [API_ANSWER] ['go', 'get', 'give', 'gather', 'gaze', 'glance', 'glare', 'glide', 'glimpse', 'gnaw', 'gobble', 'gossip', 'grab', 'graduate', 'grant', 'grasp', 'grease', 'greet', 'grill', 'grimace', 'grin', 'grind', 'grip', 'groan', 'grow', 'growl', 'grumble', 'grunt', 'guarantee', 'guard', 'guess', 'guide', 'gulp', 'gurgle', 'gush', 'gut', 'guzzle']
        [API_TOKENS] 101
    [CREATE_FILE] verbslist/start_by_g.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english verbs always in infinitive form, if possible, otherwise include as many as possible. Never comments, juste write verbs
        [API_QUESTION] Write verbs that start by the letter 'h'.
        [API_ANSWER] ['hug', 'hurry', 'hatch', 'hail', 'harm', 'harass', 'harden', 'harness', 'hasten', 'haul', 'heal', 'heap', 'hear', 'heat', 'help', 'hesitate', 'hide', 'highlight', 'hinder', 'hire', 'hit', 'hold', 'hone', 'hook', 'hop', 'hope', 'hover', 'huddle', 'hug', 'hum', 'hunt', 'hurry', 'hurt', 'hustle', 'hyphenate']
        [API_TOKENS] 90
    [CREATE_FILE] verbslist/start_by_h.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english verbs always in infinitive form, if possible, otherwise include as many as possible. Never comments, juste write verbs
        [API_QUESTION] Write verbs that start by the letter 'i'.
        [API_ANSWER] ['ignite', 'imagine', 'insist', 'inspire', 'intend', 'intensify', 'interact', 'intercept', 'interest', 'interfere', 'intervene', 'introduce', 'invent', 'invest', 'invite', 'irritate', 'isolate', 'issue', 'improve', 'incorporate', 'inquire', 'implement', 'illuminate', 'illustrate', 'imitate', 'impair', 'impose', 'impress', 'imprint', 'imprison', 'improve', 'inaugurate', 'incite', 'include', 'increase', 'indicate', 'induce', 'indulge', 'infect', 'influence', 'inform', 'infuse', 'initiate', 'innovate', 'inquire', 'inscribe', 'insert', 'insinuate', 'inspect', 'inspire', 'install', 'instruct', 'insult']
        [API_TOKENS] 156
    [CREATE_FILE] verbslist/start_by_i.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english verbs always in infinitive form, if possible, otherwise include as many as possible. Never comments, juste write verbs
        [API_QUESTION] Write verbs that start by the letter 'j'.
        [API_ANSWER] ['jump', 'jog', 'joust', 'jinx', 'juggle', 'jolt', 'jail', 'jam', 'jibe', 'jockey', 'jog-trot', 'jostle', 'judge', 'jumble', 'jut', 'jest', 'jazz', 'jeopardize', 'jettison', 'jingle', 'jive', 'jolt', 'join', 'joust', 'judge', 'juggle', 'jump-start', 'justify', 'juxtapose', 'jab', 'jack', 'jade', 'jangle', 'jar', 'jeer', 'jell', 'jerk', 'jig', 'jingle', 'jockey', 'jog', 'jolt', 'jostle', 'joust', 'juggle', 'jump', 'justify']
        [API_TOKENS] 135
    [CREATE_FILE] verbslist/start_by_j.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english verbs always in infinitive form, if possible, otherwise include as many as possible. Never comments, juste write verbs
        [API_QUESTION] Write verbs that start by the letter 'k'.
        [API_ANSWER] ['knead', 'keep', 'kick', 'kiss', 'kneel', 'knit', 'knock', 'know', 'kidnap', 'kill', 'kayak', 'kindle', 'kibitz', 'kneecap', 'kowtow', 'kibosh', 'knead', 'kneel', 'knock', 'knit', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick', 'kiss', 'knead', 'kneel', 'knock', 'knit', 'knitpick', 'knockdown', 'knot', 'know', 'kneecap', 'kneel', 'knit', 'knock', 'knot', 'keep', 'kick']
        [API_TOKENS] 4025
    [CREATE_FILE] verbslist/start_by_k.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english verbs always in infinitive form, if possible, otherwise include as many as possible. Never comments, juste write verbs
        [API_QUESTION] Write verbs that start by the letter 'l'.
        [API_ANSWER] ['laugh', 'lament', 'land', 'last', 'laud', 'lay', 'lead', 'lean', 'leap', 'learn', 'leave', 'lend', 'let', 'level', 'liberate', 'license', 'lick', 'lie', 'lift', 'light', 'like', 'limit', 'linger', 'listen', 'live', 'load', 'loan', 'locate', 'lock', 'log', 'long', 'look', 'loom', 'loosen', 'lose', 'love', 'lower', 'lull', 'lure', 'luxuriate', 'lynch']
        [API_TOKENS] 93
    [CREATE_FILE] verbslist/start_by_l.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english verbs always in infinitive form, if possible, otherwise include as many as possible. Never comments, juste write verbs
        [API_QUESTION] Write verbs that start by the letter 'm'.
        [API_ANSWER] ['make', 'march', 'marry', 'melt', 'memorize', 'mend', 'mention', 'merge', 'migrate', 'milk', 'mine', 'mislead', 'miss', 'mix', 'moan', 'modify', 'monitor', 'motivate', 'mourn', 'move', 'mow', 'multiply', 'murder', 'mutter']
        [API_TOKENS] 62
    [CREATE_FILE] verbslist/start_by_m.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english verbs always in infinitive form, if possible, otherwise include as many as possible. Never comments, juste write verbs
        [API_QUESTION] Write verbs that start by the letter 'n'.
        [API_ANSWER] ['nurture', 'navigate', 'nag', 'nail', 'name', 'nap', 'narrate', 'narrow', 'necessitate', 'need', 'negate', 'neglect', 'negotiate', 'nest', 'nestle', 'neutralize', 'nibble', 'nick', 'nicker', 'niggle', 'nip', 'nod', 'nominate', 'normalize', 'nose', 'notarize', 'note', 'notice', 'notify', 'nourish', 'novelize', 'nudge', 'nullify', 'numb', 'number', 'nurse', 'nurture', 'nut', 'nuzzle']
        [API_TOKENS] 110
    [CREATE_FILE] verbslist/start_by_n.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english verbs always in infinitive form, if possible, otherwise include as many as possible. Never comments, juste write verbs
        [API_QUESTION] Write verbs that start by the letter 'o'.
        [API_ANSWER] ['obey', 'oblige', 'observe', 'obstruct', 'obtain', 'occupy', 'occur', 'offer', 'officiate', 'offset', 'omit', 'ooze', 'open', 'operate', 'opine', 'oppose', 'opt', 'optimize', 'orchestrate', 'ordain', 'order', 'organize', 'orient', 'originate', 'ornament', 'oscillate', 'osculate', 'ossify', 'oust', 'outdo', 'outfit', 'outgrow', 'outlast', 'outline', 'outmaneuver', 'outnumber', 'outrage', 'outshine', 'outsmart', 'outsource', 'outstrip', 'outweigh', 'overcome', 'overdo', 'overestimate', 'overhaul', 'overlap', 'overpay', 'overpower', 'oversee', 'overtake', 'overthrow', 'overwhelm']
        [API_TOKENS] 153
    [CREATE_FILE] verbslist/start_by_o.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english verbs always in infinitive form, if possible, otherwise include as many as possible. Never comments, juste write verbs
        [API_QUESTION] Write verbs that start by the letter 'p'.
        [API_ANSWER] ['paint', 'play', 'participate', 'perform', 'plan', 'prepare', 'proceed', 'process', 'produce', 'promote', 'propose', 'protect', 'provide', 'pull', 'push', 'pursue', 'put', 'purchase', 'puzzle']
        [API_TOKENS] 45
    [CREATE_FILE] verbslist/start_by_p.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english verbs always in infinitive form, if possible, otherwise include as many as possible. Never comments, juste write verbs
        [API_QUESTION] Write verbs that start by the letter 'q'.
        [API_ANSWER] ['quack', 'quadruple', 'quaff', 'quail', 'quake', 'qualify', 'quantify', 'quarantine', 'quarrel', 'quarry', 'quarter', 'quash', 'quaver', 'queer', 'quell', 'quench', 'query', 'quest', 'question', 'queue', 'quickstep', 'quiet', 'quieten', 'quilt', 'quintuple', 'quip', 'quirk', 'quit', 'quiver', 'quiz', 'quizzed', 'quizzing', 'quicken', 'quackling', 'quadrupling', 'quaffing', 'quailing', 'quaking', 'qualifying', 'quantifying', 'quarantining', 'quarrelling', 'quarrying', 'quartering', 'quashing', 'quavering', 'queening', 'quelling', 'quenching', 'querying', 'questioning', 'queuing', 'quickening', 'quietening', 'quilting', 'quintupling', 'quipping', 'quirking', 'quitting', 'quivering', 'quizzing']
        [API_TOKENS] 192
    [CREATE_FILE] verbslist/start_by_q.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english verbs always in infinitive form, if possible, otherwise include as many as possible. Never comments, juste write verbs
        [API_QUESTION] Write verbs that start by the letter 'r'.
        [API_ANSWER] ['run', 'ride', 'read', 'relax', 'reach', 'resist', 'repair', 'rejoice', 'rely', 'remember', 'refuse', 'reduce', 'realize', 'reproduce', 'reap', 'rearrange', 'rebel', 'rebuild', 'recharge', 'recite', 'reclaim', 'reconcile', 'reconnect', 'reconsider', 'recreate', 'redecorate', 'redefine', 'redesign', 'redirect', 'rediscover', 'redistribute', 'reduce', 'reel', 'reestablish', 'reenact', 'reexamine', 'refer', 'refine', 'reflect', 'reform', 'refresh', 'refrigerate', 'refuel', 'refute', 'regain', 'regard', 'register', 'regret', 'regulate', 'rehearse']
        [API_TOKENS] 142
    [CREATE_FILE] verbslist/start_by_r.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english verbs always in infinitive form, if possible, otherwise include as many as possible. Never comments, juste write verbs
        [API_QUESTION] Write verbs that start by the letter 's'.
        [API_ANSWER] ['sing', 'swim', 'study', 'speak', 'smile', 'shout', 'sleep', 'sell', 'serve', 'search', 'satisfy', 'succeed', 'sustain', 'sneak', 'sweep', 'sew', 'sigh', 'sail', 'stare', 'stop', 'start', 'stay', 'stimulate', 'strengthen', 'struggle', 'submit', 'subtract', 'succeed', 'suffer', 'suggest', 'supply', 'support', 'survive', 'sway', 'swallow', 'sway', 'swear', 'switch', 'symbolize', 'synthesize', 'systematize', 'synchronize', 'sanitize', 'saturate', 'scare', 'score', 'scold', 'scorch', 'scrape', 'scratch', 'scream', 'separate', 'settle', 'shape', 'share', 'shatter', 'shed', 'shine', 'shiver', 'shoot', 'show', 'shrink', 'shrug', 'shut', 'simplify', 'sin', 'sit', 'sketch', 'skip', 'slap', 'sleep', 'slice', 'slide', 'slip', 'smash', 'smell', 'smoke', 'snap', 'snatch', 'sneak', 'sneeze', 'sniff', 'snore', 'snow', 'soak', 'solve', 'sort', 'sound', 'sow', 'spark', 'speak', 'specify', 'spell', 'spend', 'spill', 'spin', 'spoil', 'spot', 'spray', 'spread', 'spring', 'squeeze', 'stand', 'stare', 'start', 'state', 'stay', 'steal', 'steer', 'step', 'stimulate', 'stir', 'stop', 'store', 'strain', 'strengthen', 'stress', 'stretch', 'strike', 'strive', 'struggle', 'study', 'submit', 'subscribe', 'subtract', 'succeed', 'suck', 'suffer', 'suggest', 'suit', 'summarize', 'supervise', 'supply', 'support', 'suppose', 'surprise', 'surround', 'survey', 'survive', 'suspect', 'suspend', 'swim', 'swing', 'sympathize', 'synthesize', 'systematize', 'satisfy', 'sanitize', 'saturate', 'scare', 'score', 'scold', 'scorch', 'scrape', 'scratch', 'scream', 'separate', 'settle', 'shape', 'share', 'shatter', 'shed', 'shine', 'shiver', 'shoot', 'show', 'shrink', 'shrug', 'shut', 'simplify', 'sin', 'sit', 'sketch', 'skip', 'slap', 'sleep', 'slice', 'slide', 'slip', 'smash', 'smell', 'smoke', 'snap', 'snatch', 'sneak', 'sneeze', 'sniff', 'snore', 'snow', 'soak', 'solve', 'sort', 'sound', 'sow', 'spark', 'speak', 'specify', 'spell', 'spend', 'spill', 'spin', 'spoil', 'spot', 'spray', 'spread', 'spring', 'squeeze', 'stand', 'stare', 'start', 'state', 'stay', 'steal', 'steer', 'step', 'stimulate', 'stir', 'stop', 'store', 'strain', 'strengthen', 'stress', 'stretch', 'strike', 'strive', 'struggle', 'study', 'submit', 'subscribe', 'subtract', 'succeed', 'suck', 'suffer', 'suggest', 'suit', 'summarize', 'supervise', 'supply', 'suppose', 'surprise', 'surround', 'survey', 'survive', 'suspect', 'suspend', 'swim', 'swing', 'sympathize', 'synthesize', 'systematize', 'satisfy', 'sanitize', 'saturate', 'scare', 'score', 'scold', 'scorch', 'scrape', 'scratch', 'scream', 'separate', 'settle', 'shape', 'share', 'shatter', 'shed', 'shine', 'shiver', 'shoot', 'show', 'shrink', 'shrug', 'shut', 'simplify', 'sin', 'sit', 'sketch', 'skip', 'slap', 'sleep', 'slice', 'slide', 'slip', 'smash', 'smell', 'smoke', 'snap', 'snatch', 'sneak', 'sneeze', 'sniff', 'snore', 'snow', 'soak', 'solve', 'sort', 'sound', 'sow', 'spark', 'speak', 'specify', 'spell', 'spend', 'spill', 'spin', 'spoil', 'spot', 'spray', 'spread', 'spring', 'squeeze', 'stand', 'stare', 'start', 'state', 'stay', 'steal', 'steer', 'step', 'stimulate', 'stir', 'stop', 'store', 'strain', 'strengthen', 'stress', 'stretch', 'strike', 'strive', 'struggle', 'study', 'submit', 'subscribe', 'subtract', 'succeed', 'suck', 'suffer', 'suggest', 'suit', 'summarize', 'supervise', 'supply', 'suppose', 'surprise', 'surround', 'survey', 'survive', 'suspect', 'suspend', 'swim', 'swing', 'sympathize', 'synthesize', 'systematize', 'satisfy', 'sanitize', 'saturate', 'scare', 'score', 'scold', 'scorch', 'scrape', 'scratch', 'scream', 'separate', 'settle', 'shape', 'share', 'shatter', 'shed', 'shine', 'shiver', 'shoot', 'show', 'shrink', 'shrug', 'shut', 'simplify', 'sin', 'sit', 'sketch', 'skip', 'slap', 'sleep', 'slice', 'slide', 'slip', 'smash', 'smell', 'smoke', 'snap', 'snatch', 'sneak', 'sneeze', 'sniff', 'snore', 'snow', 'soak', 'solve', 'sort', 'sound', 'sow', 'spark', 'speak', 'specify', 'spell', 'spend', 'spill', 'spin', 'spoil', 'spot', 'spray', 'spread', 'spring', 'squeeze', 'stand', 'stare', 'start', 'state', 'stay', 'steal', 'steer', 'step', 'stimulate', 'stir', 'stop', 'store', 'strain', 'strengthen', 'stress', 'stretch', 'strike', 'strive', 'struggle', 'study', 'submit', 'subscribe', 'subtract', 'succeed', 'suck', 'suffer', 'suggest', 'suit', 'summarize', 'supervise', 'supply', 'suppose', 'surprise', 'surround', 'survey', 'survive', 'suspect', 'suspend', 'swim', 'swing', 'sympathize', 'synthesize', 'systematize', 'satisfy', 'sanitize', 'saturate', 'scare', 'score', 'scold', 'scorch', 'scrape', 'scratch', 'scream', 'separate', 'settle', 'shape', 'share', 'shatter', 'shed', 'shine', 'shiver', 'shoot', 'show', 'shrink', 'shrug', 'shut', 'simplify', 'sin', 'sit', 'sketch', 'skip', 'slap', 'sleep', 'slice', 'slide', 'slip', 'smash', 'smell', 'smoke', 'snap', 'snatch', 'sneak', 'sneeze', 'sniff', 'snore', 'snow', 'soak', 'solve', 'sort', 'sound', 'sow', 'spark', 'speak', 'specify', 'spell', 'spend', 'spill', 'spin', 'spoil', 'spot', 'spray', 'spread', 'spring', 'squeeze', 'stand', 'stare', 'start', 'state', 'stay', 'steal', 'steer', 'step', 'stimulate', 'stir', 'stop', 'store', 'strain', 'strengthen', 'stress', 'stretch', 'strike', 'strive', 'struggle', 'study', 'submit', 'subscribe', 'subtract', 'succeed', 'suck', 'suffer', 'suggest', 'suit', 'summarize', 'supervise', 'supply', 'suppose', 'surprise', 'surround', 'survey', 'survive', 'suspect', 'suspend', 'swim', 'swing', 'sympathize', 'synthesize', 'systematize', 'satisfy', 'sanitize', 'saturate', 'scare', 'score', 'scold', 'scorch', 'scrape', 'scratch', 'scream', 'separate', 'settle', 'shape', 'share', 'shatter', 'shed', 'shine', 'shiver', 'shoot', 'show', 'shrink', 'shrug', 'shut', 'simplify', 'sin', 'sit', 'sketch', 'skip', 'slap', 'sleep', 'slice', 'slide', 'slip', 'smash', 'smell', 'smoke', 'snap', 'snatch', 'sneak', 'sneeze', 'sniff', 'snore', 'snow', 'soak', 'solve', 'sort', 'sound', 'sow', 'spark', 'speak', 'specify', 'spell', 'spend', 'spill', 'spin', 'spoil', 'spot', 'spray', 'spread', 'spring', 'squeeze', 'stand', 'stare', 'start', 'state', 'stay', 'steal', 'steer', 'step', 'stimulate', 'stir', 'stop', 'store', 'strain', 'strengthen', 'stress', 'stretch', 'strike', 'strive', 'struggle', 'study', 'submit', 'subscribe', 'subtract', 'succeed', 'suck', 'suffer', 'suggest', 'suit', 'summarize', 'supervise', 'supply', 'suppose', 'surprise', 'surround', 'survey', 'survive', 'suspect', 'suspend', 'swim', 'swing', 'sympathize', 'synthesize', 'systematize', 'satisfy', 'sanitize', 'saturate', 'scare', 'score', 'scold', 'scorch', 'scrape', 'scratch', 'scream', 'separate', 'settle', 'shape', 'share', 'shatter', 'shed', 'shine', 'shiver', 'shoot', 'show', 'shrink', 'shrug', 'shut', 'simplify', 'sin', 'sit', 'sketch', 'skip', 'slap', 'sleep', 'slice', 'slide', 'slip', 'smash', 'smell', 'smoke', 'snap', 'snatch', 'sneak', 'sneeze', 'sniff', 'snore', 'snow', 'soak', 'solve', 'sort', 'sound', 'sow', 'spark', 'speak', 'specify', 'spell', 'spend', 'spill', 'spin', 'spoil', 'spot', 'spray', 'spread', 'spring', 'squeeze', 'stand', 'stare', 'start', 'state', 'stay', 'steal', 'steer', 'step', 'stimulate', 'stir', 'stop', 'store', 'strain', 'strengthen', 'stress', 'stretch', 'strike', 'strive', 'struggle', 'study', 'submit', 'subscribe', 'subtract', 'succeed', 'suck', 'suffer', 'suggest', 'suit', 'summarize', 'supervise', 'supply', 'suppose', 'surprise', 'surround', 'survey', 'survive', 'suspect', 'suspend', 'swim', 'swing', 'sympathize', 'synthesize', 'systematize', 'satisfy', 'sanitize', 'saturate', 'scare', 'score', 'scold', 'scorch', 'scrape', 'scratch', 'scream', 'separate', 'settle', 'shape', 'share', 'shatter', 'shed', 'shine', 'shiver', 'shoot', 'show', 'shrink', 'shrug', 'shut', 'simplify', 'sin', 'sit', 'sketch', 'skip', 'slap', 'sleep', 'slice', 'slide', 'slip', 'smash', 'smell', 'smoke', 'snap', 'snatch', 'sneak', 'sneeze', 'sniff', 'snore', 'snow', 'soak', 'solve', 'sort', 'sound', 'sow', 'spark', 'speak', 'specify', 'spell', 'spend', 'spill', 'spin', 'spoil', 'spot', 'spray', 'spread', 'spring', 'squeeze', 'stand', 'stare', 'start', 'state', 'stay', 'steal', 'steer', 'step', 'stimulate', 'stir', 'stop', 'store', 'strain', 'strengthen', 'stress', 'stretch', 'strike', 'strive', 'struggle', 'study', 'submit', 'subscribe', 'subtract', 'succeed', 'suck', 'suffer', 'suggest', 'suit', 'summarize', 'supervise', 'supply', 'suppose', 'surprise', 'surround', 'survey', 'survive', 'suspect', 'suspend', 'swim', 'swing', 'sympathize', 'synthesize', 'systematize', 'satisfy', 'sanitize', 'saturate', 'scare', 'score', 'scold', 'scorch', 'scrape', 'scratch', 'scream', 'separate', 'settle', 'shape', 'share', 'shatter', 'shed', 'shine', 'shiver', 'shoot', 'show', 'shrink', 'shrug', 'shut', 'simplify', 'sin', 'sit', 'sketch', 'skip', 'slap', 'sleep', 'slice', 'slide', 'slip', 'smash', 'smell', 'smoke', 'snap', 'snatch', 'sneak', 'sneeze', 'sniff', 'snore', 'snow', 'soak', 'solve', 'sort', 'sound', 'sow', 'spark', 'speak', 'specify', 'spell', 'spend', 'spill', 'spin', 'spoil', 'spot', 'spray', 'spread', 'spring', 'squeeze', 'stand', 'stare', 'start', 'state', 'stay', 'steal', 'steer', 'step', 'stimulate', 'stir', 'stop', 'store', 'strain', 'strengthen', 'stress', 'stretch', 'strike', 'strive', 'struggle', 'study', 'submit', 'subscribe', 'subtract', 'succeed', 'suck', 'suffer', 'suggest', 'suit', 'summarize', 'supervise', 'supply', 'suppose', 'surprise', 'surround', 'survey', 'survive', 'suspect', 'suspend', 'swim', 'swing', 'sympathize', 'synthesize', 'systematize', 'satisfy', 'sanitize', 'saturate', 'scare', 'score', 'scold', 'scorch', 'scrape', 'scratch', 'scream', 'separate', 'settle', 'shape', 'share', 'shatter', 'shed', 'shine', 'shiver', 'shoot', 'show', 'shrink', 'shrug', 'shut', 'simplify', 'sin', 'sit', 'sketch', 'skip', 'slap', 'sleep', 'slice', 'slide', 'slip', 'smash', 'smell', 'smoke', 'snap', 'snatch', 'sneak', 'sneeze', 'sniff', 'snore', 'snow', 'soak', 'solve', 'sort', 'sound', 'sow', 'spark', 'speak', 'specify', 'spell', 'spend', 'spill', 'spin', 'spoil', 'spot', 'spray', 'spread', 'spring', 'squeeze', 'stand', 'stare', 'start', 'state', 'stay', 'steal', 'steer', 'step', 'stimulate', 'stir', 'stop', 'store', 'strain', 'strengthen', 'stress', 'stretch', 'strike', 'strive', 'struggle', 'study', 'submit', 'subscribe', 'subtract', 'succeed', 'suck', 'suffer', 'suggest', 'suit', 'summarize', 'supervise', 'supply', 'suppose', 'surprise', 'surround', 'survey', 'survive', 'suspect', 'suspend', 'swim', 'swing', 'sympathize', 'synthesize', 'systematize', 'satisfy', 'sanitize', 'saturate', 'scare', 'score', 'scold', 'scorch', 'scrape', 'scratch', 'scream', 'separate', 'settle', 'shape', 'share', 'shatter', 'shed', 'shine', 'shiver', 'shoot', 'show', 'shrink', 'shrug', 'shut', 'simplify', 'sin', 'sit', 'sketch', 'skip', 'slap', 'sleep', 'slice', 'slide', 'slip', 'smash', 'smell', 'smoke', 'snap', 'snatch', 'sneak', 'sneeze', 'sniff', 'snore', 'snow', 'soak', 'solve', 'sort', 'sound', 'sow', 'spark', 'speak', 'specify', 'spell', 'spend', 'spill', 'spin', 'spoil', 'spot', 'spray', 'spread', 'spring', 'squeeze', 'stand', 'stare', 'start', 'state', 'stay', 'steal', 'steer', 'step', 'stimulate', 'stir', 'stop', 'store', 'strain', 'strengthen', 'stress', 'stretch', 'strike', 'strive', 'struggle', 'study', 'submit', 'subscribe', 'subtract', 'succeed', 'suck', 'suffer', 'suggest', 'suit', 'summarize', 'supervise', 'supply', 'suppose', 'surprise', 'surround', 'survey', 'survive', 'suspect', 'suspend', 'swim', 'swing', 'sympathize', 'synthesize', 'systematize', 'satisfy', 'sanitize', 'saturate', 'scare', 'score', 'scold', 'scorch', 'scrape', 'scratch', 'scream', 'separate', 'settle', 'shape', 'share', 'shatter', 'shed', 'shine', 'shiver', 'shoot', 'show', 'shrink', 'shrug', 'shut', 'simplify', 'sin', 'sit', 'sketch', 'skip', 'slap', 'sleep', 'slice', 'slide', 'slip', 'smash', 'smell', 'smoke', 'snap', 'snatch', 'sneak', 'sneeze', 'sniff', 'snore', 'snow', 'soak', 'solve', 'sort', 'sound', 'sow', 'spark', 'speak', 'specify', 'spell', 'spend', 'spill', 'spin', 'spoil', 'spot', 'spray', 'spread', 'spring', 'squeeze', 'stand', 'stare', 'start', 'state', 'stay', 'steal', 'steer', 'step', 'stimulate', 'stir', 'stop', 'store', 'strain', 'strengthen', 'stress', 'stretch', 'strike', 'strive', 'struggle', 'study', 'submit', 'subscribe', 'subtract', 'succeed', 'suck', 'suffer', 'suggest', 'suit', 'summarize', 'supervise', 'supply', 'suppose', 'surprise', 'surround', 'survey', 'survive', 'suspect', 'suspend', 'swim', 'swing', 'sympathize', 'synthesize', 'systematize', 'satisfy', 'sanitize', 'saturate', 'scare', 'score', 'scold', 'scorch', 'scrape', 'scratch', 'scream', 'separate', 'settle', 'shape', 'share', 'shatter', 'shed', 'shine', 'shiver', 'shoot', 'show', 'shrink', 'shrug', 'shut', 'simplify', 'sin', 'sit', 'sketch', 'skip', 'slap', 'sleep', 'slice', 'slide', 'slip', 'smash', 'smell', 'smoke', 'snap', 'snatch', 'sneak', 'sneeze', 'sniff', 'snore', 'snow', 'soak', 'solve', 'sort', 'sound', 'sow', 'spark', 'speak', 'specify', 'spell', 'spend', 'spill', 'spin', 'spoil', 'spot', 'spray', 'spread', 'spring', 'squeeze', 'stand', 'stare', 'start', 'state', 'stay', 'steal', 'steer', 'step', 'stimulate', 'stir', 'stop', 'store', 'strain', 'strengthen', 'stress', 'stretch', 'strike', 'strive', 'struggle', 'study', 'submit', 'subscribe', 'subtract', 'succeed', 'suck', 'suffer', 'suggest', 'suit', 'summarize', 'supervise', 'supply', 'suppose', 'surprise', 'surround', 'survey', 'survive', 'suspect', 'suspend', 'swim', 'swing', 'sympathize', 'synthesize', 'systematize', 'satisfy', 'sanitize', 'saturate', 'scare', 'score', 'scold', 'scorch', 'scrape', 'scratch', 'scream', 'separate', 'settle', 'shape', 'share', 'shatter', 'shed', 'shine', 'shiver', 'shoot', 'show', 'shrink', 'shrug', 'shut', 'simplify', 'sin', 'sit', 'sketch', 'skip', 'slap', 'sleep', 'slice', 'slide', 'slip', 'smash', 'smell', 'smoke', 'snap', 'snatch', 'sneak', 'sneeze', 'sniff', 'snore', 'snow', 'soak', 'solve', 'sort', 'sound', 'sow', 'spark', 'speak', 'specify', 'spell', 'spend', 'spill', 'spin', 'spoil', 'spot', 'spray', 'spread', 'spring', 'squeeze', 'stand', 'stare', 'start', 'state', 'stay', 'steal', 'steer', 'step', 'stimulate', 'stir', 'stop', 'store', 'strain', 'strengthen', 'stress', 'stretch', 'strike', 'strive', 'struggle', 'study', 'submit', 'subscribe', 'subtract', 'succeed', 'suck', 'suffer', 'suggest', 'suit', 'summarize', 'supervise', 'supply', 'suppose', 'surprise', 'surround', 'survey', 'survive', 'suspect', 'suspend', 'swim', 'swing', 'sympathize', 'synthesize', 'systematize', 'satisfy', 'sanitize', 'saturate', 'scare', 'score', 'scold', 'scorch', 'scrape', 'scratch', 'scream', 'separate', 'settle', 'shape', 'share', 'shatter', 'shed', 'shine', 'shiver', 'shoot', 'show', 'shrink', 'shrug', 'shut', 'simplify', 'sin', 'sit', 'sketch', 'skip', 'slap', 'sleep', 'slice', 'slide', 'slip', 'smash', 'smell']
        [API_TOKENS] 4025
    [CREATE_FILE] verbslist/start_by_s.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english verbs always in infinitive form, if possible, otherwise include as many as possible. Never comments, juste write verbs
        [API_QUESTION] Write verbs that start by the letter 't'.
        [API_ANSWER] ['talk', 'take', 'teach', 'taste', 'tell', 'test', 'think', 'throw', 'travel', 'treat', 'try', 'turn', 'type', 'tackle', 'tango', 'target', 'taste-test', 'tattle', 'team', 'tear', 'tee', 'telecast', 'telecommute', 'teleconference', 'telegraph', 'telemarket', 'telescope', 'televise', 'tell-off', 'temp', 'tempt', 'tend', 'terminate', 'terrify', 'test-drive', 'test-fly', 'testify', 'thank', 'thaw', 'theorize', 'thicken', 'thin', 'think-up', 'thrive', 'throw-away', 'thrust', 'thud', 'thump', 'tick', 'tickle', 'tie', 'time', 'tingle', 'tinker']
        [API_TOKENS] 145
    [CREATE_FILE] verbslist/start_by_t.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english verbs always in infinitive form, if possible, otherwise include as many as possible. Never comments, juste write verbs
        [API_QUESTION] Write verbs that start by the letter 'u'.
        [API_ANSWER] ['understand', 'urge', 'use', 'unite', 'unlock', 'update', 'upset', 'usher', 'uncover', 'unload', 'unleash', 'untangle', 'unwind', 'usher', 'urge', 'unify', 'unzip', 'uplift', 'unveil', 'use', 'usher', 'utilize', 'urge', 'unravel', 'unroll', 'unplug', 'unmask', 'unbolt', 'unfasten', 'unzip', 'unwind', 'unleash', 'unite', 'unearth', 'unscramble', 'unclasp', 'uncoil', 'uncover', 'unlace', 'unlearn', 'unmake', 'unpick', 'unravel', 'unscrew', 'unseal', 'unstick', 'untie', 'unveil', 'unwind', 'update', 'upgrade', 'uplift', 'use']
        [API_TOKENS] 155
    [CREATE_FILE] verbslist/start_by_u.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english verbs always in infinitive form, if possible, otherwise include as many as possible. Never comments, juste write verbs
        [API_QUESTION] Write verbs that start by the letter 'v'.
        [API_ANSWER] ['visit', 'vary', 'value', 'veto', 'venture', 'vex', 'vie', 'view', 'visit', 'visualize', 'vocalize', 'volunteer', 'vote', 'vouch', 'vow', 'validate', 'vanish', 'vandalize', 'venerate', 'verbalize', 'verify', 'vest', 'vibrate', 'videotape', 'vilify', 'visit', 'visualize', 'vocalize', 'volunteer', 'vote', 'vouch', 'vow', 'vacate', 'validate', 'vanish', 'vandalize', 'vaporize', 'vary', 'vault', 'veer', 'vegetate', 'veil', 'vend', 'vent', 'verge', 'versify', 'vex', 'vibrate', 'vie', 'view', 'vilify', 'visit', 'visualize', 'vitalize', 'vitiate', 'vocalize', 'vogue', 'volunteer', 'vomit', 'vote', 'vouch', 'vow', 'voyage', 'vulcanize', 'vulgarize', 'vulcanise', 'vulcanize']
        [API_TOKENS] 195
    [CREATE_FILE] verbslist/start_by_v.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english verbs always in infinitive form, if possible, otherwise include as many as possible. Never comments, juste write verbs
        [API_QUESTION] Write verbs that start by the letter 'w'.
        [API_ANSWER] ['wait', 'walk', 'wander', 'want', 'warm', 'warn', 'wash', 'waste', 'watch', 'water', 'wave', 'waver', 'wear', 'weave', 'wed', 'weep', 'weigh', 'welcome', 'wend', 'wet', 'whine', 'whip', 'whirl', 'whisper', 'whistle', 'win', 'wind', 'wink', 'wipe', 'wish', 'withdraw', 'withhold', 'withstand', 'wonder', 'work', 'worry', 'worship', 'wound', 'wrap', 'wreck', 'wrestle', 'wriggle', 'wring', 'write']
        [API_TOKENS] 110
    [CREATE_FILE] verbslist/start_by_w.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english verbs always in infinitive form, if possible, otherwise include as many as possible. Never comments, juste write verbs
        [API_QUESTION] Write verbs that start by the letter 'x'.
        [API_ANSWER] ["Sorry, there are no common English verbs that start with the letter 'x'."]
        [API_TOKENS] 16
    [CREATE_FILE] verbslist/start_by_x.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english verbs always in infinitive form, if possible, otherwise include as many as possible. Never comments, juste write verbs
        [API_QUESTION] Write verbs that start by the letter 'y'.
        [API_ANSWER] ['yawn', 'yell', 'yield', 'yodel', 'yank', 'yearn', 'yack', 'yammer', 'yap', 'yarn', 'yawn', 'yell', 'yelp', 'yield', 'yodel', 'yoke', 'yowl']
        [API_TOKENS] 48
    [CREATE_FILE] verbslist/start_by_y.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english verbs always in infinitive form, if possible, otherwise include as many as possible. Never comments, juste write verbs
        [API_QUESTION] Write verbs that start by the letter 'z'.
[ERROR_API] Error when call API: Bad gateway. {"error":{"code":502,"message":"Bad gateway.","param":null,"type":"cf_bad_gateway"}} 502 {'error': {'code': 502, 'message': 'Bad gateway.', 'param': None, 'type': 'cf_bad_gateway'}} {'Date': 'Wed, 31 May 2023 09:06:39 GMT', 'Content-Type': 'application/json', 'Content-Length': '84', 'Connection': 'keep-alive', 'X-Frame-Options': 'SAMEORIGIN', 'Referrer-Policy': 'same-origin', 'Cache-Control': 'private, max-age=0, no-store, no-cache, must-revalidate, post-check=0, pre-check=0', 'Expires': 'Thu, 01 Jan 1970 00:00:01 GMT', 'Server': 'cloudflare', 'CF-RAY': '7cfe08831a570171-CDG', 'alt-svc': 'h3=":443"; ma=86400'}
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english verbs always in infinitive form, if possible, otherwise include as many as possible. Never comments, juste write verbs
        [API_QUESTION] Write verbs that start by the letter 'z'.
        [API_ANSWER] ['zero', 'zing', 'zip', 'zoom', 'zest', 'zinc', 'zone', 'zombify', 'zestify', 'zookeep', 'zoologize', 'zoophyte', 'zoosporize', 'zootomize', 'zoophagize', 'zooplankton', 'zoosporangium', 'zoogeographical', 'zoogeographers', 'zoogeographies', 'zoogeographic']
        [API_TOKENS] 77
    [CREATE_FILE] verbslist/start_by_z.txt sucessfully
    --------------------------------------------------------------------------------
    [CREATE_FOLDER]: data/french_english/nouns
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 100 english nouns , if possible, otherwise include as many as possible. Never comments, juste write nouns and don't forget to put the appropriate article before the noun.
        [API_QUESTION] Write nouns that start by the letter 'a'.
        [API_ANSWER] ['an apple', 'an ant', 'an ambulance', 'an arrow', 'an anchor', 'an album', 'an actor', 'an author', 'an audience', 'an avocado', 'an aircraft', 'an agenda', 'an alarm', 'an alley', 'an alligator', 'an almond', 'an amplifier', 'an angel', 'an angle', 'an ankle', 'an apartment', 'an ape', 'an apron', 'an aquarium', 'an arch', 'an architect', 'an arm', 'an army', 'an arrowhead', 'an art', 'an artist', 'an artwork', 'an ashtray', 'an astronaut', 'an asylum', 'an atlas', 'an atom', 'an auction', 'an audience', 'an aunt', 'an author', 'an avocado', 'an axe']
        [API_TOKENS] 133
    [CREATE_FILE] nounslist/start_by_a.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 100 english nouns , if possible, otherwise include as many as possible. Never comments, juste write nouns and don't forget to put the appropriate article before the noun.
        [API_QUESTION] Write nouns that start by the letter 'b'.
        [API_ANSWER] ['a book', 'a ball', 'a bag', 'a banana', 'a bird', 'a bike', 'a bottle', 'a blanket', 'a bench', 'a bus', 'a butterfly', 'a beach', 'a bed', 'a bell', 'a bridge', 'a brush', 'a badge', 'a bakery', 'a bass', 'a bay', 'a beard', 'a beetle', 'a berry', 'a beverage', 'a bib', 'a biscuit', 'a blade', 'a blanket', 'a blood', 'a bloom', 'a blouse', 'a board', 'a boat', 'a body', 'a bone', 'a bookcase', 'a boot', 'a border', 'a bottle', 'a bowl', 'a box', 'a boy', 'a brain', 'a brake', 'a branch', 'a brass', 'a bread', 'a breakfast', 'a brick', 'a bride', 'a bridge', 'a broccoli', 'a broom', 'a brother', 'a brush', 'a bubble', 'a bucket', 'a bud', 'a buffalo', 'a bug', 'a building', 'a bulb', 'a bull', 'a bullet', 'a bun', 'a bus', 'a bush', 'a business', 'a butter', 'a butterfly', 'a button', 'a buyer', 'a byte']
        [API_TOKENS] 221
    [CREATE_FILE] nounslist/start_by_b.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 100 english nouns , if possible, otherwise include as many as possible. Never comments, juste write nouns and don't forget to put the appropriate article before the noun.
        [API_QUESTION] Write nouns that start by the letter 'c'.
        [API_ANSWER] ['A car', 'A cat', 'A cake', 'A camera', 'A candle', 'A cap', 'A capital', 'A captain', 'A carafe', 'A caravan', 'A carbon', 'A card', 'A cardboard', 'A career', 'A carrot', 'A cart', 'A cartoon', 'A case', 'A cash', 'A cassette', 'A castle', 'A catamaran', 'A catch', 'A category', 'A cathedral', 'A cattle', 'A cause', 'A cave', 'A ceiling', 'A celebration', 'A cell', 'A cemetery', 'A cent', 'A center', 'A century', 'A cereal', 'A chain', 'A chair', 'A challenge', 'A chamber', 'A champion', 'A chance', 'A change', 'A channel', 'A chaos', 'A chapter', 'A character', 'A charity', 'A charm', 'A chart', 'A chase', 'A chat', 'A check', 'A cheese', 'A chef', 'A chemistry', 'A chest', 'A chick', 'A chief', 'A child', 'A childhood', 'A chip', 'A chocolate', 'A choice', 'A choir', 'A chord', 'A chorus', 'A church', 'A cigarette', 'A circle', 'A circus', 'A city', 'A civilization', 'A claim', 'A clam', 'A clan', 'A clap', 'A class', 'A classic', 'A classroom', 'A clause', 'A clay', 'A clean', 'A clearance', 'A clerk', 'A click', 'A client', 'A climate', 'A climax', 'A clinic', 'A clip', 'A clock', 'A close', 'A closet', 'A cloth', 'A cloud', 'A club', 'A clue', 'A cluster', 'A coach', 'A coal', 'A coast', 'A coat', 'A code', 'A coffee', 'A coil', 'A coin', 'A coincidence', 'A cold', 'A collaboration', 'A collapse', 'A collar', 'A colleague', 'A collection', 'A college', 'A colony', 'A color', 'A column', 'A combination', 'A comedy', 'A comfort', 'A comic', 'A command', 'A comment', 'A commerce', 'A commitment', 'A committee', 'A common', 'A communication', 'A community', 'A company', 'A comparison', 'A competition', 'A complaint', 'A complement', 'A complex', 'A complication', 'A component', 'A composer', 'A composition', 'A compound', 'A comprehension', 'A compromise', 'A computer', 'A concentration', 'A concept', 'A concern', 'A concert', 'A conclusion', 'A concrete', 'A condition', 'A conduct', 'A conference', 'A confidence', 'A conflict', 'A confusion', 'A congratulation', 'A connection', 'A conscience', 'A consensus', 'A consequence', 'A conservation', 'A consideration', 'A consistency', 'A console', 'A conspiracy', 'A constant', 'A construction', 'A consultation', 'A consumer', 'A consumption', 'A contact', 'A container', 'A contamination', 'A content', 'A contest', 'A context', 'A continent', 'A contract', 'A contradiction', 'A contribution', 'A control', 'A controversy', 'A convenience', 'A convention', 'A conversation', 'A conversion', 'A conviction', 'A cook', 'A cookie', 'A cooking', 'A cool', 'A cooperation', 'A copper', 'A copy', 'A cord', 'A core', 'A cork', 'A corn', 'A corner', 'A corporation', 'A correction', 'A correspondence', 'A corruption', 'A cost', 'A costume', 'A cottage', 'A cotton', 'A couch', 'A council', 'A counsel', 'A count', 'A counter', 'A country', 'A county', 'A couple', 'A courage', 'A course', 'A court', 'A cousin', 'A cover', 'A cow', 'A crack', 'A craft', 'A crash', 'A cream', 'A creation', 'A creativity', 'A creature', 'A credit', 'A creek', 'A crew', 'A cricket', 'A crime', 'A criminal', 'A crisis', 'A criterion', 'A critic', 'A criticism', 'A crop', 'A cross', 'A crowd', 'A crown', 'A cruelty', 'A cry', 'A crystal', 'A culture', 'A cup', 'A cupboard', 'A cure', 'A curiosity', 'A curl', 'A currency', 'A current', 'A curriculum', 'A curtain', 'A curve', 'A cushion', 'A custom', 'A customer', 'A cut', 'A cycle']
        [API_TOKENS] 789
    [CREATE_FILE] nounslist/start_by_c.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 100 english nouns , if possible, otherwise include as many as possible. Never comments, juste write nouns and don't forget to put the appropriate article before the noun.
        [API_QUESTION] Write nouns that start by the letter 'd'.
        [API_ANSWER] ['a dog', 'a door', 'a desk', 'a dress', 'a duck', 'a doll', 'a diamond', 'a drum', 'a driver', 'a dream', 'a dragon', 'a donkey', 'a deer', 'a dime', 'a dish', 'a doctor', 'a dancer', 'a dictionary', 'a dolphin', 'a doughnut', 'a daydream', 'a daisy', 'a dart', 'a dam', 'a data', 'a deadline', 'a deal', 'a debate', 'a debt', 'a decade', 'a decoration', 'a dedication', 'a deficiency', 'a definition', 'a delivery', 'a democracy', 'a demonstration', 'a dentist', 'a depression', 'a desert', 'a design', 'a desire', 'a desk', 'a detective', 'a development', 'a device', 'a devil', 'a diamond', 'a diet', 'a difference', 'a difficulty', 'a digression', 'a dilemma', 'a dimension', 'a dinner', 'a dinosaur', 'a diploma', 'a direction', 'a director', 'a dirt', 'a disability', 'a disaster', 'a discovery', 'a discussion', 'a disease', 'a dish', 'a disk', 'a dismissal', 'a display', 'a distance', 'a distribution', 'a district', 'a diversity', 'a division', 'a divorce', 'a doctor', 'a document', 'a dogma', 'a doll', 'a dolphin', 'a domain', 'a donation', 'a donkey', 'a door', 'a dose', 'a dot', 'a doubt', 'a dozen', 'a dragon', 'a drama', 'a drawer', 'a dream', 'a dress', 'a drift', 'a drill', 'a drink', 'a drive', 'a driver', 'a drop', 'a drug', 'a drum', 'a duck', 'a due', 'a duke', 'a dumbbell', 'a dump', 'a dungeon', 'a duration', 'a dust', 'a duty', 'a dwarf', 'a dynamic', 'a dynasty']
        [API_TOKENS] 346
    [CREATE_FILE] nounslist/start_by_d.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 100 english nouns , if possible, otherwise include as many as possible. Never comments, juste write nouns and don't forget to put the appropriate article before the noun.
        [API_QUESTION] Write nouns that start by the letter 'e'.
        [API_ANSWER] ['an egg', 'an elephant', 'an elevator', 'an envelope', 'an eagle', 'an ear', 'an elbow', 'an edge', 'an end', 'an engine', 'an entrance', 'an envelope', 'an equation', 'an error', 'an essay', 'an establishment', 'an estate', 'an event', 'an examination', 'an example', 'an excitement', 'an exclusion', 'an exercise', 'an exhibition', 'an existence', 'an expansion', 'an experience', 'an experiment', 'an expert', 'an explanation', 'an explosion', 'an export', 'an expression', 'an extension', 'an eye']
        [API_TOKENS] 104
    [CREATE_FILE] nounslist/start_by_e.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 100 english nouns , if possible, otherwise include as many as possible. Never comments, juste write nouns and don't forget to put the appropriate article before the noun.
        [API_QUESTION] Write nouns that start by the letter 'f'.
        [API_ANSWER] ['a flower', 'a frog', 'a fan', 'a feather', 'a fence', 'a fire', 'a fish', 'a fork', 'a fox', 'a fridge', 'a friend', 'a fruit', 'a furniture', 'a foot', 'a face', 'a factory', 'a faith', 'a family', 'a farm', 'a fashion', 'a father', 'a fault', 'a fear', 'a feature', 'a fee', 'a feed', 'a feeling', 'a female', 'a festival', 'a fiber', 'a fiction', 'a field', 'a figure', 'a file', 'a film', 'a filter', 'a finance', 'a finger', 'a finish', 'a fireman', 'a firm', 'a fisherman', 'a fist', 'a fitness', 'a flag', 'a flame', 'a flavor', 'a fleet', 'a flight', 'a flood', 'a floor', 'a flour', 'a flowerpot', 'a flu', 'a fluid', 'a fly', 'a foam', 'a focus', 'a fog', 'a fold', 'a folk', 'a food', 'a fool', 'a footstep', 'a force', 'a forecast', 'a forehead', 'a forest', 'a forklift', 'a form', 'a format', 'a formula', 'a fortune', 'a forum', 'a fossil', 'a foundation', 'a fountain', 'a foxhound', 'a fraction', 'a frame', 'a framework', 'a fraud', 'a freedom', 'a freezer', 'a frequency', 'a friendliness', 'a frogman', 'a front', 'a frost', 'a fruitcake', 'a fuel', 'a fulfillment', 'a fullback', 'a function', 'a fund', 'a funeral', 'a fungus', 'a furnituremaker', 'a fury', 'a fuse', 'a fuss.']
        [API_TOKENS] 314
    [CREATE_FILE] nounslist/start_by_f.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 100 english nouns , if possible, otherwise include as many as possible. Never comments, juste write nouns and don't forget to put the appropriate article before the noun.
        [API_QUESTION] Write nouns that start by the letter 'g'.
        [API_ANSWER] ['1. The garden', '2. The gate', '3. The gift', '4. The girl', '5. The glass', '6. The glove', '7. The goat', '8. The gold', '9. The goose', '10. The government', '11. The grape', '12. The grass', '13. The group', '14. The guest', '15. The guide', '16. The guitar', '17. The gun', '18. The gym', '19. The guy', '20. The gallery', '21. The game', '22. The garbage', '23. The gas', '24. The gear', '25. The gender', '26. The generation', '27. The geography', '28. The gesture', '29. The ghost', '30. The giant', '31. The gift', '32. The ginger', '33. The glacier', '34. The glamour', '35. The globe', '36. The glory', '37. The goal', '38. The goat', '39. The goddess', '40. The golf', '41. The gossip', '42. The government', '43. The gown', '44. The grace', '45. The grain', '46. The grammar', '47. The grandparent', '48. The grapefruit', '49. The graphics', '50. The grasshopper', '51. The gratitude', '52. The gravestone', '53. The gravity', '54. The greed', '55. The greenhouse', '56. The greeting', '57. The greyhound', '58. The grill', '59. The grip', '60. The grocery', '61. The groom', '62. The group', '63. The growth', '64. The guarantee', '65. The guest', '66. The guidance', '67. The guitar', '68. The gum', '69. The guru', '70. The gymnastics', '71. The gutter', '72. The guy', '73. The gymnasium', '74. The galaxy', '75. The game', '76. The garage', '77. The garbage', '78. The gardenia', '79. The garlic', '80. The gas', '81. The gasoline', '82. The gatekeeper', '83. The gathering', '84. The gazebo', '85. The gearshift', '86. The gecko', '87. The gem', '88. The gene', '89. The general', '90. The generation', '91. The generosity', '92. The genius', '93. The geography', '94. The geology', '95. The geometry', '96. The geranium', '97. The germ', '98. The gesture', '99. The ghost', '100. The giant.']
        [API_TOKENS] 516
    [CREATE_FILE] nounslist/start_by_g.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 100 english nouns , if possible, otherwise include as many as possible. Never comments, juste write nouns and don't forget to put the appropriate article before the noun.
        [API_QUESTION] Write nouns that start by the letter 'h'.
        [API_ANSWER] ['1. House', '2. Hat', '3. Hand', '4. Heart', '5. Head', '6. Hair', '7. Horse', '8. Hill', '9. Highway', '10. Hospital', '11. History', '12. Honey', '13. Hamburger', '14. Hammer', '15. Harmony', '16. Harvest', '17. Hawk', '18. Herb', '19. Hero', '20. Hike', '21. Hole', '22. Holiday', '23. Home', '24. Hope', '25. Horizon', '26. Horn', '27. Host', '28. Hotel', '29. Hour', '30. Humor', '31. Hunger', '32. Husband', '33. Hut', '34. Hybrid', '35. Hydrogen', '36. Hype', '37. Hypothesis', '38. Habitat', '39. Handicap', '40. Hardship', '41. Harmony', '42. Harvest', '43. Hawk', '44. Hazard', '45. Health', '46. Hearing', '47. Heir', '48. Helicopter', '49. Hell', '50. Help', '51. Heritage', '52. Heroine', '53. Hierarchy', '54. Highway', '55. Hill', '56. Hint', '57. Hip', '58. Hire', '59. History', '60. Hit', '61. Hobby', '62. Hockey', '63. Hold', '64. Hole', '65. Holiday', '66. Home', '67. Homework', '68. Homosexuality', '69. Honest', '70. Honey', '71. Honor', '72. Hood', '73. Hope', '74. Horizon', '75. Horn', '76. Horror', '77. Horse', '78. Hospital', '79. Host', '80. Hotel', '81. Hour', '82. House', '83. Housing', '84. Human', '85. Humidity', '86. Humor', '87. Hunger', '88. Hunt', '89. Husband', '90. Hybrid', '91. Hydrogen', '92. Hype', '93. Hypothesis', '94. Habitat', '95. Handicap', '96. Hardship', '97. Harmony', '98. Harvest', '99. Hawk', '100. Hazard']
        [API_TOKENS] 422
    [CREATE_FILE] nounslist/start_by_h.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 100 english nouns , if possible, otherwise include as many as possible. Never comments, juste write nouns and don't forget to put the appropriate article before the noun.
        [API_QUESTION] Write nouns that start by the letter 'i'.
        [API_ANSWER] ['an igloo', 'an iguana', 'an illusion', 'an image', 'an inch', 'an island', 'an iceberg', 'an iris', 'an iron', 'an idea', 'an idol', 'an infection', 'an invitation', 'an invoice', 'an inmate', 'an inspector', 'an instructor', 'an intersection', 'an instrument', 'an intake', 'an interview', 'an investor', 'an issue', 'an ivory', 'an item', 'an itinerary', 'an ivy']
        [API_TOKENS] 84
    [CREATE_FILE] nounslist/start_by_i.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 100 english nouns , if possible, otherwise include as many as possible. Never comments, juste write nouns and don't forget to put the appropriate article before the noun.
        [API_QUESTION] Write nouns that start by the letter 'j'.
        [API_ANSWER] ['a jacket', 'a jaguar', 'a jail', 'a jam', 'a janitor', 'a jar', 'a jasmine', 'a jaw', 'a jazz', 'a jeep', 'a jellyfish', 'a jet', 'a jewel', 'a jigsaw', 'a job', 'a jog', 'a joint', 'a joke', 'a journalist', 'a journey', 'a joy', 'a judge', 'a juice', 'a jumper', 'a jungle', 'a junior', 'a junk', 'a jury', 'a justice', 'a justification']
        [API_TOKENS] 93
    [CREATE_FILE] nounslist/start_by_j.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 100 english nouns , if possible, otherwise include as many as possible. Never comments, juste write nouns and don't forget to put the appropriate article before the noun.
        [API_QUESTION] Write nouns that start by the letter 'k'.
        [API_ANSWER] ['1. Kettle', '2. Key', '3. Keyboard', '4. King', '5. Kitchen', '6. Kite', '7. Knife', '8. Knight', '9. Knot', '10. Knowledge', '11. Kaleidoscope', '12. Kangaroo', '13. Karaoke', '14. Karma', '15. Kayak', '16. Kernel', '17. Ketchup', '18. Kettlebell', '19. Keystone', '20. Kidney', '21. Kindergarten', '22. Kinship', '23. Kiss', '24. Kit', '25. Kitchenware', '26. Kitten', '27. Kiwi', '28. Knapsack', '29. Knickknack', '30. Knitwear', '31. Knob', '32. Knock', '33. Knotweed', '34. Koala', '35. Koi', '36. Komodo', '37. Krypton', '38. Kubotan', '39. Kudzu', '40. Kumquat', '41. Kung-fu', '42. Kush', '43. Kwanzaa', '44. Kyat', '45. Kymograph', '46. Kyrie', '47. Kiosk', '48. Kneecap', '49. Kneeler', '50. Kneepad', '51. Kneading', '52. Knead', '53. Knurling', '54. Knurl', '55. Kryptonite', '56. Kebab', '57. Keel', '58. Keenness', '59. Keep', '60. Keeper', '61. Keypad', '62. Keynote', '63. Keystone', '64. Khaki', '65. Kibbutz', '66. Kibble', '67. Kick', '68. Kicker', '69. Kidnapper', '70. Kidnapping', '71. Kidney bean', '72. Killdeer', '73. Killer', '74. Killing', '75. Kiln', '76. Kilogram', '77. Kilometer', '78. Kilt', '79. Kimono', '80. Kinematics', '81. Kinetic', '82. Kingfisher', '83. Kingpin', '84. Kingship', '85. Kiosk', '86. Kiteboarding', '87. Kitsch', '88. Kittiwake', '89. Kitty', '90. Kiwifruit', '91. Kleenex', '92. Kneading', '93. Kneecap', '94. Kneeler', '95. Knife-edge', '96. Knight-errant', '97. Knighthood', '98. Knobkerrie', '99. Knockout', '100. Knotting.']
        [API_TOKENS] 521
    [CREATE_FILE] nounslist/start_by_k.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 100 english nouns , if possible, otherwise include as many as possible. Never comments, juste write nouns and don't forget to put the appropriate article before the noun.
        [API_QUESTION] Write nouns that start by the letter 'l'.
        [API_ANSWER] ['1. The lamp', '2. The lake', '3. The ladder', '4. The lady', '5. The lamb', '6. The land', '7. The language', '8. The lantern', '9. The lap', '10. The laptop', '11. The laughter', '12. The law', '13. The lawsuit', '14. The lawyer', '15. The layer', '16. The leadership', '17. The leaf', '18. The league', '19. The learning', '20. The leather', '21. The lecture', '22. The leg', '23. The legend', '24. The leisure', '25. The lemon', '26. The length', '27. The lens', '28. The leopard', '29. The letter', '30. The level', '31. The liability', '32. The library', '33. The license', '34. The life', '35. The lift', '36. The light', '37. The lightning', '38. The likelihood', '39. The limb', '40. The lime', '41. The limit', '42. The line', '43. The link', '44. The lion', '45. The lip', '46. The liquid', '47. The list', '48. The listener', '49. The literature', '50. The litter', '51. The liver', '52. The living', '53. The lizard', '54. The load', '55. The loan', '56. The lobby', '57. The location', '58. The lock', '59. The logic', '60. The loneliness', '61. The long-term', '62. The look', '63. The loop', '64. The lord', '65. The loss', '66. The lot', '67. The lottery', '68. The lounge', '69. The love', '70. The lover', '71. The loyalty', '72. The luck', '73. The luggage', '74. The lumber', '75. The lunch', '76. The lung', '77. The luxury', '78. The lyric', '79. The ladder', '80. The ladybug', '81. The lagoon', '82. The landmark', '83. The lane', '84. The lapel', '85. The lard', '86. The laser', '87. The lattice', '88. The laundry', '89. The lavender', '90. The lawsuit', '91. The layer', '92. The layout', '93. The leader', '94. The leaflet', '95. The leakage', '96. The lean', '97. The leap', '98. The lease', '99. The lecturer', '100. The legacy']
        [API_TOKENS] 505
    [CREATE_FILE] nounslist/start_by_l.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 100 english nouns , if possible, otherwise include as many as possible. Never comments, juste write nouns and don't forget to put the appropriate article before the noun.
        [API_QUESTION] Write nouns that start by the letter 'm'.
        [API_ANSWER] ['1. The man', '2. The moon', '3. The music', '4. The machine', '5. The mountain', '6. The movie', '7. The meal', '8. The mother', '9. The medicine', '10. The moment', '11. The mind', '12. The material', '13. The method', '14. The message', '15. The member', '16. The month', '17. The morning', '18. The mission', '19. The movement', '20. The muscle', '21. The measurement', '22. The mood', '23. The mystery', '24. The marriage', '25. The mistake', '26. The miracle', '27. The memory', '28. The map', '29. The messenger', '30. The magazine', '31. The merchandise', '32. The masterpiece', '33. The mansion', '34. The mechanic', '35. The merchandise', '36. The melody', '37. The merchandise', '38. The merchandise', '39. The merchandise', '40. The merchandise', '41. The merchandise', '42. The merchandise', '43. The merchandise', '44. The merchandise', '45. The merchandise', '46. The merchandise', '47. The merchandise', '48. The merchandise', '49. The merchandise', '50. The merchandise', '51. The merchandise', '52. The merchandise', '53. The merchandise', '54. The merchandise', '55. The merchandise', '56. The merchandise', '57. The merchandise', '58. The merchandise', '59. The merchandise', '60. The merchandise', '61. The merchandise', '62. The merchandise', '63. The merchandise', '64. The merchandise', '65. The merchandise', '66. The merchandise', '67. The merchandise', '68. The merchandise', '69. The merchandise', '70. The merchandise', '71. The merchandise', '72. The merchandise', '73. The merchandise', '74. The merchandise', '75. The merchandise', '76. The merchandise', '77. The merchandise', '78. The merchandise', '79. The merchandise', '80. The merchandise', '81. The merchandise', '82. The merchandise', '83. The merchandise', '84. The merchandise', '85. The merchandise', '86. The merchandise', '87. The merchandise', '88. The merchandise', '89. The merchandise', '90. The merchandise', '91. The merchandise', '92. The merchandise', '93. The merchandise', '94. The merchandise', '95. The merchandise', '96. The merchandise', '97. The merchandise', '98. The merchandise', '99. The merchandise', '100. The merchandise']
        [API_TOKENS] 499
    [CREATE_FILE] nounslist/start_by_m.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 100 english nouns , if possible, otherwise include as many as possible. Never comments, juste write nouns and don't forget to put the appropriate article before the noun.
        [API_QUESTION] Write nouns that start by the letter 'n'.
        [API_ANSWER] ['1. A nail', '2. A name', '3. A napkin', '4. A narwhal', '5. A nation', '6. A nature', '7. A necklace', '8. A needle', '9. A neighbor', '10. A nest', '11. A net', '12. A network', '13. A news', '14. A newspaper', '15. A night', '16. A nightmare', '17. A nipple', '18. A nitrogen', '19. A node', '20. A noise', '21. A nomad', '22. A non-fiction', '23. A noodle', '24. A north', '25. A nose', '26. A notebook', '27. A notion', '28. A novel', '29. A nozzle', '30. A nuclear', '31. A number', '32. A nurse', '33. A nut', '34. A nutrition', '35. A nylon', '36. A nymph', '37. A nectar', '38. A needlework', '39. A negotiation', '40. A nephew', '41. A nexus', '42. A nightgown', '43. A nightingale', '44. A nobility', '45. A nom de plume', '46. A nonchalance', '47. A nonentity', '48. A nonviolence', '49. A nostalgia', '50. A notation', '51. A nothing', '52. A notice', '53. A novelty', '54. A novice', '55. A noxious', '56. A nuance', '57. A nuclear weapon', '58. A nucleus', '59. A nudity', '60. A nuisance', '61. A nullification', '62. A numbness', '63. A number plate', '64. A numeracy', '65. A numerator', '66. A nursemaid', '67. A nursery', '68. A nutcracker', '69. A nutmeg', '70. A nutritionist', '71. A nutriment', '72. A nutcase', '73. A nutraceutical', '74. A nutraceuticals', '75. A nutshells', '76. A nutritions', '77. A nutraceutical industry', '78. A nutraceutical products', '79. A nutraceuticals market', '80. A nutraceutical supplements', '81. A nutraceuticals market size', '82. A nutraceuticals industry analysis', '83. A nutraceuticals market trends', '84. A nutraceuticals market growth', '85. A nutraceuticals market share', '86. A nutraceuticals market report', '87. A nutraceuticals market research', '88. A nutraceuticals market forecast', '89. A nutraceuticals market demand', '90. A nutraceuticals market analysis', '91. A nutraceuticals market outlook', '92. A nutraceuticals market overview', '93. A nutraceuticals market segmentation', '94. A nutraceuticals market definition', '95. A nutraceuticals market scope', '96. A nutraceuticals market revenue', '97. A nutraceuticals market size 2021', '98. A nutraceuticals market size 2022', '99. A nutraceuticals market size 2023', '100. A nutraceuticals market size 2024.']
        [API_TOKENS] 670
    [CREATE_FILE] nounslist/start_by_n.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 100 english nouns , if possible, otherwise include as many as possible. Never comments, juste write nouns and don't forget to put the appropriate article before the noun.
        [API_QUESTION] Write nouns that start by the letter 'o'.
        [API_ANSWER] ['an object', 'an obligation', 'an observation', 'an obstacle', 'an occasion', 'an occupation', 'an ocean', 'an offer', 'an office', 'an officer', 'an offspring', 'an oil', 'an onion', 'an opening', 'an opera', 'an operation', 'an operator', 'an opinion', 'an opportunity', 'an opposition', 'an option', 'an orange', 'an orbit', 'an orchestra', 'an order', 'an organization', 'an origin', 'an outcome', 'an outlet', 'an outline', 'an oven', 'an owner', 'an ox']
        [API_TOKENS] 98
    [CREATE_FILE] nounslist/start_by_o.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 100 english nouns , if possible, otherwise include as many as possible. Never comments, juste write nouns and don't forget to put the appropriate article before the noun.
        [API_QUESTION] Write nouns that start by the letter 'p'.
[ERROR_API] Error when call API: Bad gateway. {"error":{"code":502,"message":"Bad gateway.","param":null,"type":"cf_bad_gateway"}} 502 {'error': {'code': 502, 'message': 'Bad gateway.', 'param': None, 'type': 'cf_bad_gateway'}} {'Date': 'Wed, 31 May 2023 09:19:19 GMT', 'Content-Type': 'application/json', 'Content-Length': '84', 'Connection': 'keep-alive', 'X-Frame-Options': 'SAMEORIGIN', 'Referrer-Policy': 'same-origin', 'Cache-Control': 'private, max-age=0, no-store, no-cache, must-revalidate, post-check=0, pre-check=0', 'Expires': 'Thu, 01 Jan 1970 00:00:01 GMT', 'Server': 'cloudflare', 'CF-RAY': '7cfe1a7a5c8e0171-CDG', 'alt-svc': 'h3=":443"; ma=86400'}
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 100 english nouns , if possible, otherwise include as many as possible. Never comments, juste write nouns and don't forget to put the appropriate article before the noun.
        [API_QUESTION] Write nouns that start by the letter 'p'.
        [API_ANSWER] ['1. The paper', '2. The pencil', '3. The pen', '4. The phone', '5. The picture', '6. The pizza', '7. The planet', '8. The plant', '9. The plate', '10. The player', '11. The police', '12. The pool', '13. The popcorn', '14. The potato', '15. The power', '16. The price', '17. The prince', '18. The princess', '19. The problem', '20. The program', '21. The project', '22. The professor', '23. The profession', '24. The progress', '25. The property', '26. The proposal', '27. The prospect', '28. The publisher', '29. The publication', '30. The pulse', '31. The punishment', '32. The puzzle', '33. The pyramid', '34. The python', '35. The passenger', '36. The pattern', '37. The peace', '38. The peak', '39. The pearl', '40. The peasant', '41. The pedestal', '42. The peer', '43. The pencil case', '44. The pension', '45. The perception', '46. The performance', '47. The perfume', '48. The period', '49. The permission', '50. The personality', '51. The perspective', '52. The pet', '53. The pharmacy', '54. The phenomenon', '55. The philosophy', '56. The photographer', '57. The photography', '58. The physics', '59. The piano', '60. The pick', '61. The picnic', '62. The picture frame', '63. The pie', '64. The pig', '65. The pillow', '66. The pilot', '67. The pin', '68. The pine', '69. The pink', '70. The pipe', '71. The pirate', '72. The pit', '73. The pitch', '74. The pizza box', '75. The place', '76. The plain', '77. The plane', '78. The planetarium', '79. The plank', '80. The plant pot', '81. The plastic', '82. The plate rack', '83. The platform', '84. The platinum', '85. The play', '86. The playground', '87. The plea', '88. The pleasure', '89. The pledge', '90. The pliers', '91. The plot', '92. The plow', '93. The plug', '94. The plumber', '95. The plural', '96. The pocket', '97. The poem', '98. The poet', '99. The point', '100. The poison.']
        [API_TOKENS] 508
    [CREATE_FILE] nounslist/start_by_p.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 100 english nouns , if possible, otherwise include as many as possible. Never comments, juste write nouns and don't forget to put the appropriate article before the noun.
        [API_QUESTION] Write nouns that start by the letter 'q'.
[ERROR_API] Error when call API: That model is currently overloaded with other requests. You can retry your request, or contact us through our help center at help.openai.com if the error persists. (Please include the request ID f26f925d2b2164caf4c03f8aeaa87b50 in your message.)
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 100 english nouns , if possible, otherwise include as many as possible. Never comments, juste write nouns and don't forget to put the appropriate article before the noun.
        [API_QUESTION] Write nouns that start by the letter 'q'.
[ERROR_API] Error when call API: Gateway timeout. {"error":{"code":524,"message":"Gateway timeout.","param":null,"type":"cf_gateway_timeout"}} 524 {'error': {'code': 524, 'message': 'Gateway timeout.', 'param': None, 'type': 'cf_gateway_timeout'}} {'Date': 'Wed, 31 May 2023 09:30:34 GMT', 'Content-Type': 'application/json', 'Content-Length': '92', 'Connection': 'keep-alive', 'X-Frame-Options': 'SAMEORIGIN', 'Referrer-Policy': 'same-origin', 'Cache-Control': 'private, max-age=0, no-store, no-cache, must-revalidate, post-check=0, pre-check=0', 'Expires': 'Thu, 01 Jan 1970 00:00:01 GMT', 'Server': 'cloudflare', 'CF-RAY': '7cfe24495a0c0171-CDG'}
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 100 english nouns , if possible, otherwise include as many as possible. Never comments, juste write nouns and don't forget to put the appropriate article before the noun.
        [API_QUESTION] Write nouns that start by the letter 'q'.
        [API_ANSWER] ['a quarter', 'a queen', 'a quilt', 'a quince', 'a quail', 'a questionnaire', 'a quest', 'a queue', 'a quaver', 'a quintet', 'a quark', 'a quip', 'a quinoa', 'a quarry', 'a quality', 'a quantum', 'a quill', 'a quench', 'a quickstep', 'a quack', 'a quintillion', 'a quibble', 'a quiche', 'a quietus', 'a quorum', 'a quaver']
        [API_TOKENS] 94
    [CREATE_FILE] nounslist/start_by_q.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 100 english nouns , if possible, otherwise include as many as possible. Never comments, juste write nouns and don't forget to put the appropriate article before the noun.
        [API_QUESTION] Write nouns that start by the letter 'r'.
        [API_ANSWER] ['1. The rabbit', '2. The race', '3. The radio', '4. The rain', '5. The rainbow', '6. The rake', '7. The ram', '8. The ranch', '9. The range', '10. The rap', '11. The raspberry', '12. The rat', '13. The rate', '14. The ratio', '15. The raven', '16. The raw', '17. The ray', '18. The razor', '19. The reach', '20. The reaction', '21. The reading', '22. The reality', '23. The reason', '24. The rebel', '25. The receipt', '26. The recipe', '27. The recognition', '28. The recommendation', '29. The record', '30. The recovery', '31. The recreation', '32. The red', '33. The reduction', '34. The reference', '35. The reflection', '36. The refrigerator', '37. The refuge', '38. The region', '39. The register', '40. The regret', '41. The regular', '42. The regulation', '43. The rehearsal', '44. The relation', '45. The relaxation', '46. The release', '47. The relief', '48. The religion', '49. The remainder', '50. The remark', '51. The remedy', '52. The remote', '53. The removal', '54. The rent', '55. The repair', '56. The repeat', '57. The replacement', '58. The reply', '59. The report', '60. The representative', '61. The republic', '62. The reputation', '63. The request', '64. The requirement', '65. The rescue', '66. The research', '67. The reservation', '68. The residence', '69. The resignation', '70. The resistance', '71. The resolution', '72. The resort', '73. The resource', '74. The respect', '75. The response', '76. The responsibility', '77. The rest', '78. The restaurant', '79. The result', '80. The retirement', '81. The return', '82. The revelation', '83. The revenge', '84. The revenue', '85. The review', '86. The revolution', '87. The reward', '88. The rhythm', '89. The rice', '90. The rich', '91. The ride', '92. The rider', '93. The ridge', '94. The rifle', '95. The right', '96. The ring', '97. The riot', '98. The rise', '99. The risk', '100. The river.']
        [API_TOKENS] 501
    [CREATE_FILE] nounslist/start_by_r.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 100 english nouns , if possible, otherwise include as many as possible. Never comments, juste write nouns and don't forget to put the appropriate article before the noun.
        [API_QUESTION] Write nouns that start by the letter 's'.
        [API_ANSWER] ['1. The sun', '2. The sea', '3. The sky', '4. The sand', '5. The star', '6. The snake', '7. The spider', '8. The squirrel', '9. The ship', '10. The sword', '11. The spoon', '12. The sock', '13. The sweater', '14. The salad', '15. The sandwich', '16. The sausage', '17. The steak', '18. The shrimp', '19. The salmon', '20. The sugar', '21. The salt', '22. The spice', '23. The sauce', '24. The syrup', '25. The soda', '26. The soap', '27. The shampoo', '28. The shower', '29. The sink', '30. The stove', '31. The skillet', '32. The spatula', '33. The scissors', '34. The stapler', '35. The stamp', '36. The stationery', '37. The suitcase', '38. The shoe', '39. The sock', '40. The shirt', '41. The skirt', '42. The shorts', '43. The sweater', '44. The scarf', '45. The sunglasses', '46. The speaker', '47. The stereo', '48. The stage', '49. The stadium', '50. The street', '51. The sidewalk', '52. The sign', '53. The stop', '54. The store', '55. The supermarket', '56. The school', '57. The student', '58. The teacher', '59. The subject', '60. The science', '61. The social', '62. The society', '63. The system', '64. The strategy', '65. The solution', '66. The success', '67. The support', '68. The service', '69. The security', '70. The safety', '71. The shelter', '72. The space', '73. The satellite', '74. The star', '75. The supernova', '76. The system', '77. The software', '78. The screen', '79. The speaker', '80. The sound', '81. The sensation', '82. The sight', '83. The smell', '84. The taste', '85. The touch', '86. The texture', '87. The shape', '88. The size', '89. The style', '90. The substance', '91. The structure', '92. The scene', '93. The sequel', '94. The series', '95. The season', '96. The sensation', '97. The sentiment', '98. The sentimentality', '99. The simplicity', '100. The sincerity']
        [API_TOKENS] 504
    [CREATE_FILE] nounslist/start_by_s.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 100 english nouns , if possible, otherwise include as many as possible. Never comments, juste write nouns and don't forget to put the appropriate article before the noun.
        [API_QUESTION] Write nouns that start by the letter 't'.
[ERROR_API] Error when call API: Bad gateway. {"error":{"code":502,"message":"Bad gateway.","param":null,"type":"cf_bad_gateway"}} 502 {'error': {'code': 502, 'message': 'Bad gateway.', 'param': None, 'type': 'cf_bad_gateway'}} {'Date': 'Wed, 31 May 2023 09:37:11 GMT', 'Content-Type': 'application/json', 'Content-Length': '84', 'Connection': 'keep-alive', 'X-Frame-Options': 'SAMEORIGIN', 'Referrer-Policy': 'same-origin', 'Cache-Control': 'private, max-age=0, no-store, no-cache, must-revalidate, post-check=0, pre-check=0', 'Expires': 'Thu, 01 Jan 1970 00:00:01 GMT', 'Server': 'cloudflare', 'CF-RAY': '7cfe3517ab510171-CDG', 'alt-svc': 'h3=":443"; ma=86400'}
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 100 english nouns , if possible, otherwise include as many as possible. Never comments, juste write nouns and don't forget to put the appropriate article before the noun.
        [API_QUESTION] Write nouns that start by the letter 't'.
[ERROR_API] Error when call API: Bad gateway. {"error":{"code":502,"message":"Bad gateway.","param":null,"type":"cf_bad_gateway"}} 502 {'error': {'code': 502, 'message': 'Bad gateway.', 'param': None, 'type': 'cf_bad_gateway'}} {'Date': 'Wed, 31 May 2023 09:44:27 GMT', 'Content-Type': 'application/json', 'Content-Length': '84', 'Connection': 'keep-alive', 'X-Frame-Options': 'SAMEORIGIN', 'Referrer-Policy': 'same-origin', 'Cache-Control': 'private, max-age=0, no-store, no-cache, must-revalidate, post-check=0, pre-check=0', 'Expires': 'Thu, 01 Jan 1970 00:00:01 GMT', 'Server': 'cloudflare', 'CF-RAY': '7cfe3ca9fbba0171-CDG', 'alt-svc': 'h3=":443"; ma=86400'}
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 100 english nouns , if possible, otherwise include as many as possible. Never comments, juste write nouns and don't forget to put the appropriate article before the noun.
        [API_QUESTION] Write nouns that start by the letter 't'.
        [API_ANSWER] ['Theater', 'Table', 'Tiger', 'Tree', 'Towel', 'Television', 'Truck', 'Tennis', 'Tulip', 'Tornado', 'Tambourine', 'Turtle', 'Trousers', 'Tuba', 'Tangerine', 'Trophy', 'Tent', 'Tweezers', 'Tennis ball', 'Toothbrush', 'Tape', 'Tongs', 'Tire', 'Tissue', 'Tarmac', 'Tongs', 'Taffy', 'Taco', 'Tambour', 'Tangerine', 'Tank', 'Tap', 'Tassel', 'Tea', 'Teapot', 'Teaspoon', 'Teddy bear', 'Telephone', 'Telescope', 'Television', 'Tennis racket', 'Thermometer', 'Thimble', 'Thread', 'Throne', 'Ticket', 'Tie', 'Tiger', 'Tile', 'Time', 'Tin', 'Tissue', 'Toaster', 'Toe', 'Tomato', 'Tongue', 'Tooth', 'Top', 'Torch', 'Towel', 'Toy', 'Tractor', 'Train', 'Tram', 'Trampoline', 'Tray', 'Tree', 'Triangle', 'Tricycle', 'Trolley', 'Trombone', 'Truck', 'Trumpet', 'Trunk', 'T-shirt', 'Tulip', 'Tuna', 'Tunnel', 'Turban', 'Turkey', 'Turnip', 'Turtle', 'TV', 'Twig', 'Twilight', 'Twine', 'Twist', 'Typhoon', 'Typewriter', 'Tyrannosaurus']
        [API_TOKENS] 274
    [CREATE_FILE] nounslist/start_by_t.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 100 english nouns , if possible, otherwise include as many as possible. Never comments, juste write nouns and don't forget to put the appropriate article before the noun.
        [API_QUESTION] Write nouns that start by the letter 'u'.
        [API_ANSWER] ['an umbrella', 'an uncle', 'an understanding', 'an underwear', 'an undertaking', 'an unicorn', 'an union', 'an uniqueness', 'an university', 'an uprising', 'an urge', 'an usage', 'an usher', 'an utensil', 'an utility', 'an utterance']
        [API_TOKENS] 49
    [CREATE_FILE] nounslist/start_by_u.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 100 english nouns , if possible, otherwise include as many as possible. Never comments, juste write nouns and don't forget to put the appropriate article before the noun.
        [API_QUESTION] Write nouns that start by the letter 'v'.
        [API_ANSWER] ["The list contains only 3 nouns starting with the letter 'v':", '', '- Vehicle', '- Vacation', '- Vegetables']
        [API_TOKENS] 23
    [CREATE_FILE] nounslist/start_by_v.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 100 english nouns , if possible, otherwise include as many as possible. Never comments, juste write nouns and don't forget to put the appropriate article before the noun.
        [API_QUESTION] Write nouns that start by the letter 'w'.
        [API_ANSWER] ['a watch', 'a wallet', 'a wall', 'a water', 'a wave', 'a way', 'a weakness', 'a web', 'a wedding', 'a week', 'a weight', 'a whale', 'a wheel', 'a whip', 'a whistle', 'a whiteboard', 'a wig', 'a will', 'a wind', 'a window', 'a wine', 'a wing', 'a winner', 'a winter', 'a wire', 'a witch', 'a witness', 'a wolf', 'a woman', 'a wood', 'a wool', 'a word', 'a work', 'a world', 'a worry', 'a worth', 'a wound', 'a writer', 'a wrist', 'a writer', 'a wrong', 'a waffle', 'a waist', 'a waiter', 'a waitress', 'a wake', 'a walk', 'a walker', 'a wallaby', 'a walnut', 'a wand', 'a wardrobe', 'a warlock', 'a warrior', 'a wasp', 'a waste', 'a watchman', 'a watermelon', 'a wavelet', 'a wax', 'a wayfarer', 'a weasel', 'a webbing', 'a wedding dress', 'a weed', 'a weightlifter', 'a welder', 'a well', 'a werewolf', 'a west', 'a wetland', 'a whale shark', 'a wheat', 'a wheelbarrow', 'a wheelchair', 'a whistle-blower', 'a whiteboard marker', 'a widow', 'a width', 'a wife', 'a wildcat', 'a wilderness', 'a willow', 'a windmill', 'a windowpane', 'a wineglass', 'a wingman', "a winner's circle", 'a winter coat', 'a wiretap', 'a witchcraft', 'a witness stand', 'a wolf pack', 'a womanizer', 'a woodpecker', 'a woolly mammoth', 'a wordplay', 'a workbench', 'a world map', 'a worrywart', 'a worthiness', 'a wound care', "a writer's block", 'a wristwatch', 'a wrongdoer', 'a wunderkind.']
        [API_TOKENS] 375
    [CREATE_FILE] nounslist/start_by_w.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 100 english nouns , if possible, otherwise include as many as possible. Never comments, juste write nouns and don't forget to put the appropriate article before the noun.
        [API_QUESTION] Write nouns that start by the letter 'x'.
        [API_ANSWER] ["No nouns starting with the letter 'x' in English."]
        [API_TOKENS] 12
    [CREATE_FILE] nounslist/start_by_x.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 100 english nouns , if possible, otherwise include as many as possible. Never comments, juste write nouns and don't forget to put the appropriate article before the noun.
        [API_QUESTION] Write nouns that start by the letter 'y'.
        [API_ANSWER] ['a yacht', 'a yard', 'a year', 'a yeast', 'a yell', 'a yellow', 'a yen', 'a yield', 'a yoga', 'a yogurt', 'a yolk', 'a youngster', 'a youth', 'a yowl']
        [API_TOKENS] 43
    [CREATE_FILE] nounslist/start_by_y.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 100 english nouns , if possible, otherwise include as many as possible. Never comments, juste write nouns and don't forget to put the appropriate article before the noun.
        [API_QUESTION] Write nouns that start by the letter 'z'.
        [API_ANSWER] ["The letter 'z' is quite rare in English, so there might not be 100 nouns starting with it. Here are some:", '', '- A zebra', '- A zoo', '- A zipper', '- A zenith', '- A zombie', '- A zucchini', '- A zealot', '- A zigzag', '- A zone', '- A zephyr', '- A zipperhead', '- A zither', '- A zodiac', '- A zookeeper', '- A zoom lens', '- A zoot suit', '- A zygote']
        [API_TOKENS] 109
    [CREATE_FILE] nounslist/start_by_z.txt sucessfully
    --------------------------------------------------------------------------------
    [CREATE_FOLDER]: data/french_english/adjectives
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english adjectives , if possible, otherwise include as many as possible. Never comments, juste write adjectives
        [API_QUESTION] Write adjectives that start by the letter 'a'.
        [API_ANSWER] ['amazing', 'awesome', 'adorable', 'angry', 'anxious', 'artistic', 'athletic', 'attractive', 'average', 'awful', 'abundant', 'acute', 'aged', 'aggressive', 'alert', 'alive', 'alluring', 'aloof', 'amiable', 'ample', 'ancient', 'angular', 'animated', 'annoyed', 'anxious', 'appetizing', 'appropriate', 'arctic', 'arid', 'aromatic', 'artificial', 'artistic', 'ashamed', 'aspiring', 'assorted', 'astonishing', 'athletic', 'attractive', 'austere', 'authentic', 'automatic', 'available', 'average', 'awake', 'aware', 'awesome', 'awful', 'awkward']
        [API_TOKENS] 132
    [CREATE_FILE] adjectiveslist/start_by_a.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english adjectives , if possible, otherwise include as many as possible. Never comments, juste write adjectives
        [API_QUESTION] Write adjectives that start by the letter 'b'.
        [API_ANSWER] ['beautiful', 'big', 'bold', 'brave', 'bright', 'bitter', 'bumpy', 'blissful', 'breezy', 'busy', 'bizarre', 'black', 'blue', 'brown', 'beige', 'barren', 'bare', 'bald', 'brisk', 'broad', 'broken', 'bumpy', 'burly', 'bushy', 'buttery', 'buzzing', 'belligerent', 'blunt', 'brassy', 'brackish', 'blissful', 'blaring', 'blissful', 'blushing', 'blissful', 'blissful', 'blissful', 'blissful', 'blissful', 'blissful', 'blissful', 'blissful', 'blissful', 'blissful', 'blissful', 'blissful', 'blissful', 'blissful', 'blissful', 'blissful']
        [API_TOKENS] 164
    [CREATE_FILE] adjectiveslist/start_by_b.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english adjectives , if possible, otherwise include as many as possible. Never comments, juste write adjectives
        [API_QUESTION] Write adjectives that start by the letter 'c'.
        [API_ANSWER] ['1. Calm', '2. Careful', '3. Cheerful', '4. Chilly', '5. Charming', '6. Clever', '7. Clumsy', '8. Cold', '9. Colorful', '10. Comfortable', '11. Confident', '12. Confused', '13. Cooperative', '14. Courageous', '15. Crazy', '16. Creative', '17. Crooked', '18. Cruel', '19. Cuddly', '20. Curious', '21. Cute', '22. Cynical', '23. Cloudy', '24. Clean', '25. Classic', '26. Classy', '27. Crazy', '28. Crispy', '29. Cranky', '30. Crafty', '31. Critical', '32. Cultured', '33. Cunning', '34. Curly', '35. Current', '36. Cursed', '37. Cute', '38. Caring', '39. Chatty', '40. Childish', '41. Chosen', '42. Chubby', '43. Chunky', '44. Civilized', '45. Clingy', '46. Cloudless', '47. Clueless', '48. Cocky', '49. Coherent', '50. Colossal.']
        [API_TOKENS] 244
    [CREATE_FILE] adjectiveslist/start_by_c.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english adjectives , if possible, otherwise include as many as possible. Never comments, juste write adjectives
        [API_QUESTION] Write adjectives that start by the letter 'd'.
        [API_ANSWER] ['Dazzling', 'Daring', 'Dapper', 'Dark', 'Dazzled', 'Dead', 'Deadly', 'Deafening', 'Dear', 'Dearest', 'Debonair', 'Decadent', 'Decent', 'Decisive', 'Dedicated', 'Deep', 'Defeated', 'Defensive', 'Defiant', 'Deficient', 'Definite', 'Deft', 'Deliberate', 'Delicate', 'Delicious', 'Delightful', 'Delirious', 'Demanding', 'Demonic', 'Dependent', 'Depressed', 'Deranged', 'Deserted', 'Desirable', 'Desolate', 'Desperate', 'Determined', 'Devilish', 'Devoted', 'Dewy', 'Dexterous', 'Diabolical', 'Different', 'Difficult', 'Digital', 'Diligent', 'Dim', 'Dimpled', 'Diplomatic', 'Direct', 'Dirty', 'Disagreeable', 'Disastrous', 'Discerning', 'Discreet', 'Diseased', 'Disgusted', 'Disgusting']
        [API_TOKENS] 189
    [CREATE_FILE] adjectiveslist/start_by_d.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english adjectives , if possible, otherwise include as many as possible. Never comments, juste write adjectives
        [API_QUESTION] Write adjectives that start by the letter 'e'.
        [API_ANSWER] ['1. Eager', '2. Early', '3. Earnest', '4. Earthy', '5. Easy', '6. Eccentric', '7. Eclectic', '8. Economic', '9. Edgy', '10. Educated', '11. Eerie', '12. Effective', '13. Effervescent', '14. Efficient', '15. Elaborate', '16. Elastic', '17. Elated', '18. Elderly', '19. Electric', '20. Elegant', '21. Elemental', '22. Elevated', '23. Eligible', '24. Elite', '25. Embarrassed', '26. Embellished', '27. Embracing', '28. Eminent', '29. Emotional', '30. Empathetic', '31. Empowered', '32. Empty', '33. Enchanting', '34. Encouraging', '35. Endearing', '36. Endless', '37. Energetic', '38. Engaging', '39. Enjoyable', '40. Enormous', '41. Enriching', '42. Enthusiastic', '43. Entire', '44. Entitled', '45. Envious', '46. Environmental', '47. Epic', '48. Equal', '49. Equipped', '50. Essential']
        [API_TOKENS] 244
    [CREATE_FILE] adjectiveslist/start_by_e.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english adjectives , if possible, otherwise include as many as possible. Never comments, juste write adjectives
        [API_QUESTION] Write adjectives that start by the letter 'f'.
        [API_ANSWER] ['1. Fabulous', '2. Faint', '3. Fair', '4. Faithful', '5. Fake', '6. Familiar', '7. Famous', '8. Fancy', '9. Fantastic', '10. Far', '11. Fascinating', '12. Fast', '13. Fat', '14. Faulty', '15. Fearful', '16. Fearless', '17. Feisty', '18. Feline', '19. Feminine', '20. Ferocious', '21. Fertile', '22. Festive', '23. Few', '24. Fierce', '25. Filthy', '26. Fine', '27. Firm', '28. First', '29. Fishy', '30. Fit', '31. Five', '32. Flaky', '33. Flaming', '34. Flashy', '35. Flat', '36. Flawed', '37. Fleeting', '38. Flimsy', '39. Flippant', '40. Flowery', '41. Fluffy', '42. Fluid', '43. Flustered', '44. Fluttering', '45. Focused', '46. Foggy', '47. Foolish', '48. Forceful', '49. Foreseeable', '50. Forgetful']
        [API_TOKENS] 239
    [CREATE_FILE] adjectiveslist/start_by_f.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english adjectives , if possible, otherwise include as many as possible. Never comments, juste write adjectives
        [API_QUESTION] Write adjectives that start by the letter 'g'.
        [API_ANSWER] ['1. Gorgeous', '2. Gracious', '3. Gentle', '4. Genuine', '5. Glorious', '6. Great', '7. Grateful', '8. Groovy', '9. Glistening', '10. Gleaming', '11. Golden', '12. Grand', '13. Graceful', '14. Green', '15. Giddy', '16. Gargantuan', '17. Gummy', '18. Grungy', '19. Gothic', '20. Ghostly', '21. Grisly', '22. Greasy', '23. Grouchy', '24. Grubby', '25. Guilty', '26. Gullible', '27. Gamy', '28. Gaseous', '29. Gaudy', '30. Geeky', '31. Generous', '32. Gesticulating', '33. Ghastly', '34. Ghoulish', '35. Gifted', '36. Giggly', '37. Glazed', '38. Glittering', '39. Glossy', '40. Godly', '41. Good', '42. Goofy', '43. Gorgeous', '44. Gracious', '45. Grandiose', '46. Grating', '47. Gray', '48. Greedy', '49. Gregarious', '50. Grimy']
        [API_TOKENS] 253
    [CREATE_FILE] adjectiveslist/start_by_g.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english adjectives , if possible, otherwise include as many as possible. Never comments, juste write adjectives
        [API_QUESTION] Write adjectives that start by the letter 'h'.
        [API_ANSWER] ['happy', 'handsome', 'hard', 'harsh', 'hasty', 'healthy', 'heavenly', 'heavy', 'helpful', 'heroic', 'hidden', 'high', 'hilarious', 'hollow', 'honest', 'honorable', 'hopeful', 'horrible', 'hostile', 'hot', 'huge', 'humorous', 'hungry', 'hurtful', 'husky']
        [API_TOKENS] 69
    [CREATE_FILE] adjectiveslist/start_by_h.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english adjectives , if possible, otherwise include as many as possible. Never comments, juste write adjectives
        [API_QUESTION] Write adjectives that start by the letter 'i'.
        [API_ANSWER] ['Incredible', 'Inquisitive', 'Intense', 'Innovative', 'Inexpensive', 'Innocent', 'Insecure', 'Influential', 'Intelligent', 'Interesting', 'Intriguing', 'Inimitable', 'Incomparable', 'Inclusive', 'Ingenious', 'Inherent', 'Infinite', 'Informed', 'Innocuous', 'Inscrutable', 'Insightful', 'Inspiring', 'Inspirational', 'Insistent', 'Instructive', 'Insurmountable', 'Intrepid', 'Invigorating', 'Invisible', 'Invincible', 'Inventive', 'Inviting', 'Inquisitorial', 'Irresistible', 'Irresponsible', 'Irritating', 'Ironic', 'Irascible', 'Irate', 'Icy', 'Idealistic', 'Idiosyncratic', 'Idyllic', 'Illustrious', 'Imaginative', 'Immaculate', 'Immeasurable', 'Immense', 'Immediate', 'Impartial']
        [API_TOKENS] 182
    [CREATE_FILE] adjectiveslist/start_by_i.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english adjectives , if possible, otherwise include as many as possible. Never comments, juste write adjectives
        [API_QUESTION] Write adjectives that start by the letter 'j'.
        [API_ANSWER] ['1. Jaded', '2. Jazzy', '3. Jumpy', '4. Jovial', '5. Jolly', '6. Jittery', '7. Joyful', '8. Jumbo', '9. Juicy', '10. Jumbled', '11. Jarring', '12. Jocund', '13. Jaded', '14. Jumpy', '15. Jovial', '16. Jolly', '17. Jittery', '18. Joyful', '19. Jumbo', '20. Juicy', '21. Jumbled', '22. Jarring', '23. Jocund', '24. Jaded', '25. Jumpy', '26. Jovial', '27. Jolly', '28. Jittery', '29. Joyful', '30. Jumbo', '31. Juicy', '32. Jumbled', '33. Jarring', '34. Jocund', '35. Jaded', '36. Jumpy', '37. Jovial', '38. Jolly', '39. Jittery', '40. Joyful', '41. Jumbo', '42. Juicy', '43. Jumbled', '44. Jarring', '45. Jocund', '46. Jaded', '47. Jumpy', '48. Jovial', '49. Jolly', '50. Jittery']
        [API_TOKENS] 264
    [CREATE_FILE] adjectiveslist/start_by_j.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english adjectives , if possible, otherwise include as many as possible. Never comments, juste write adjectives
        [API_QUESTION] Write adjectives that start by the letter 'k'.
        [API_ANSWER] ['1. Keen', '2. Kind', '3. Kinetic', '4. Known', '5. Kooky', '6. Kosher', '7. Keen-eyed', '8. Kempt', '9. Key', '10. Karmic', '11. Kooky', '12. Kindhearted', '13. Knowledgeable', '14. Kittenish', '15. Knotty', '16. Kooky', '17. Kooky', '18. Kinky', '19. Kempt', '20. Keen-sighted', '21. Knavish', '22. Knockout', '23. Kooky', '24. Kooky', '25. Kooky', '26. Kooky', '27. Kooky', '28. Kooky', '29. Kooky', '30. Kooky', '31. Kooky', '32. Kooky', '33. Kooky', '34. Kooky', '35. Kooky', '36. Kooky', '37. Kooky', '38. Kooky', '39. Kooky', '40. Kooky', '41. Kooky', '42. Kooky', '43. Kooky', '44. Kooky', '45. Kooky', '46. Kooky', '47. Kooky', '48. Kooky', '49. Kooky', '50. Kooky']
        [API_TOKENS] 253
    [CREATE_FILE] adjectiveslist/start_by_k.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english adjectives , if possible, otherwise include as many as possible. Never comments, juste write adjectives
        [API_QUESTION] Write adjectives that start by the letter 'l'.
        [API_ANSWER] ['1. Lively', '2. Lovely', '3. Luminous', '4. Luxurious', '5. Loyal', '6. Lanky', '7. Luscious', '8. Lethal', '9. Lavish', '10. Lucky', '11. Logical', '12. Loud', '13. Lazy', '14. Long', '15. Light', '16. Lively', '17. Lonely', '18. Loving', '19. Lively', '20. Lush', '21. Lustrous', '22. Liberal', '23. Lively', '24. Lofty', '25. Lively', '26. Lucid', '27. Lively', '28. Lively', '29. Lively', '30. Lively', '31. Lively', '32. Lively', '33. Lively', '34. Lively', '35. Lively', '36. Lively', '37. Lively', '38. Lively', '39. Lively', '40. Lively', '41. Lively', '42. Lively', '43. Lively', '44. Lively', '45. Lively', '46. Lively', '47. Lively', '48. Lively', '49. Lively', '50. Lively']
        [API_TOKENS] 243
    [CREATE_FILE] adjectiveslist/start_by_l.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english adjectives , if possible, otherwise include as many as possible. Never comments, juste write adjectives
        [API_QUESTION] Write adjectives that start by the letter 'm'.
        [API_ANSWER] ['1. Majestic', '2. Magnificent', '3. Marvelous', '4. Mysterious', '5. Mischievous', '6. Moody', '7. Melodic', '8. Masculine', '9. Magical', '10. Modest', '11. Mature', '12. Modern', '13. Mild', '14. Mighty', '15. Miniature', '16. Miraculous', '17. Misty', '18. Mellow', '19. Monumental', '20. Multifaceted', '21. Musical', '22. Mystical', '23. Mythical', '24. Mouthwatering', '25. Mesmerizing', '26. Mind-blowing', '27. Memorable', '28. Magnetic', '29. Manly', '30. Meek', '31. Merciful', '32. Merry', '33. Misleading', '34. Mixed', '35. Moldy', '36. Monstrous', '37. Moody', '38. Moral', '39. Motivated', '40. Mouthy', '41. Muddy', '42. Murky', '43. Mushy', '44. Musty', '45. Mute', '46. Mutual', '47. Mysterious', '48. Mythological', '49. Malleable', '50. Malicious']
        [API_TOKENS] 247
    [CREATE_FILE] adjectiveslist/start_by_m.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english adjectives , if possible, otherwise include as many as possible. Never comments, juste write adjectives
        [API_QUESTION] Write adjectives that start by the letter 'n'.
        [API_ANSWER] ['Narrow', 'Nasty', 'Naughty', 'Neat', 'Necessary', 'Negative', 'Nervous', 'New', 'Nice', 'Noisy', 'Normal', 'Notable', 'Novel', 'Numerous', 'Nutritious', 'Numb', 'Nurturing', 'Nifty', 'Nimble', 'Nippy', 'Nostalgic', 'Nonchalant', 'Nonstop', 'Nonviolent', 'Noteworthy', 'Nuclear', 'Numb', 'Nurturing', 'Nutty', 'Nappy', 'Narcissistic', 'Nascent', 'National', 'Native', 'Natural', 'Nautical', 'Navigable', 'Near', 'Needy', 'Negative', 'Neglected', 'Negligent', 'Nervous', 'Nether', 'Nett', 'Neurotic', 'Neutral', 'Newfangled', 'Next', 'Nice', 'Nifty', 'Nimble', 'Nippy', 'Noble', 'Nocturnal', 'Noiseless', 'Noisome', 'Nonchalant', 'Noncommittal', 'Nondescript', 'Nonjudgmental', 'Nonpareil', 'Nonsensical', 'Nonstop', 'Nonverbal', 'Normal', 'Notable', 'Noteworthy', 'Nourishing', 'Novel', 'Nubile', 'Nuclear', 'Nude', 'Numb', 'Numerous', 'Nurturing', 'Nutritious', 'Nutty']
        [API_TOKENS] 252
    [CREATE_FILE] adjectiveslist/start_by_n.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english adjectives , if possible, otherwise include as many as possible. Never comments, juste write adjectives
        [API_QUESTION] Write adjectives that start by the letter 'o'.
        [API_ANSWER] ['obedient', 'obese', 'oblong', 'obnoxious', 'obscure', 'observant', 'obsolete', 'obtuse', 'odd', 'odious', 'offensive', 'official', 'oily', 'old', 'old-fashioned', 'ominous', 'open', 'operational', 'opposite', 'optimal', 'optimistic', 'orange', 'ordinary', 'organic', 'original', 'ornate', 'other', 'outgoing', 'outrageous', 'outstanding', 'oval', 'overconfident', 'overjoyed', 'overrated', 'overt', 'overwhelmed', 'overzealous', 'own', 'oxygenated']
        [API_TOKENS] 114
    [CREATE_FILE] adjectiveslist/start_by_o.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english adjectives , if possible, otherwise include as many as possible. Never comments, juste write adjectives
        [API_QUESTION] Write adjectives that start by the letter 'p'.
        [API_ANSWER] ['1. peaceful', '2. playful', '3. powerful', '4. pretty', '5. passionate', '6. patient', '7. polite', '8. positive', '9. precious', '10. proud', '11. practical', '12. popular', '13. perfect', '14. particular', '15. profound', '16. private', '17. prompt', '18. pure', '19. pricey', '20. picturesque', '21. playful', '22. poised', '23. pleasant', '24. pink', '25. purple', '26. pastel', '27. passionate', '28. patriotic', '29. petite', '30. plain', '31. plump', '32. precious', '33. premium', '34. pristine', '35. productive', '36. professional', '37. progressive', '38. prolific', '39. psychedelic', '40. psychological', '41. public', '42. purple', '43. peaceful', '44. pricey', '45. profound', '46. powerful', '47. practical', '48. playful', '49. polite', '50. positive']
        [API_TOKENS] 201
    [CREATE_FILE] adjectiveslist/start_by_p.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english adjectives , if possible, otherwise include as many as possible. Never comments, juste write adjectives
        [API_QUESTION] Write adjectives that start by the letter 'q'.
[ERROR_API] Error when call API: That model is currently overloaded with other requests. You can retry your request, or contact us through our help center at help.openai.com if the error persists. (Please include the request ID cd8ea43c020c1cc48f4bedf4f9b9b24c in your message.)
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english adjectives , if possible, otherwise include as many as possible. Never comments, juste write adjectives
        [API_QUESTION] Write adjectives that start by the letter 'q'.
        [API_ANSWER] ['Quick', 'Quiet', 'Quirky', 'Quaint', 'Qualified', 'Quantitative', 'Quadratic', 'Quarrelsome', 'Questionable', 'Quixotic', 'Quizzical', 'Quality', 'Quenchless', 'Quasi', 'Quotable', 'Queenly', 'Quaintish', 'Quivery', 'Quotidian', 'Quarantined', 'Quarrelous', 'Quondam', 'Quirky-cool', 'Quasi-religious', 'Quasi-judicial', 'Quasi-legal', 'Quasi-royal', 'Quasi-scientific', 'Quasi-technical', 'Quasi-urban', 'Quasi-intellectual', 'Quasi-romantic', 'Quasi-empirical', 'Quasi-constitutional', 'Quasi-philosophical', 'Quasi-military', 'Quasi-physical', 'Quasi-political', 'Quasi-social', 'Quasi-theoretical', 'Quasi-technical', 'Quasi-empirical', 'Quasi-legal', 'Quasi-spiritual', 'Quasi-technical', 'Quasi-urban', 'Quasi-philosophical', 'Quasi-scientific', 'Quasi-technical', 'Quasi-urban', 'Quasi-empirical', 'Quasi-legal', 'Quasi-spiritual', 'Quasi-technical', 'Quasi-urban']
        [API_TOKENS] 255
    [CREATE_FILE] adjectiveslist/start_by_q.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english adjectives , if possible, otherwise include as many as possible. Never comments, juste write adjectives
        [API_QUESTION] Write adjectives that start by the letter 'r'.
        [API_ANSWER] ['radiant', 'rare', 'rash', 'rational', 'raw', 'ready', 'real', 'reasonable', 'reassuring', 'rebel', 'receptive', 'reckless', 'rectangular', 'red', 'redundant', 'reflective', 'refreshing', 'regal', 'regular', 'reliable', 'remarkable', 'remote', 'renowned', 'repetitive', 'repulsive', 'resilient', 'resolute', 'resonant', 'respectful', 'responsible', 'restless', 'rich', 'ridiculous', 'right', 'rigid', 'ripe', 'ritzy', 'roasted', 'robust', 'romantic', 'rosy', 'rough', 'round', 'royal', 'rude', 'rugged', 'runny', 'rustic']
        [API_TOKENS] 138
    [CREATE_FILE] adjectiveslist/start_by_r.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english adjectives , if possible, otherwise include as many as possible. Never comments, juste write adjectives
        [API_QUESTION] Write adjectives that start by the letter 's'.
        [API_ANSWER] ['silly', 'sour', 'salty', 'sunny', 'sweet', 'sincere', 'sneaky', 'sassy', 'shy', 'stubborn', 'strong', 'smart', 'stupid', 'silly', 'sincere', 'sensitive', 'savage', 'sophisticated', 'satisfied', 'satisfied', 'sociable', 'sorrowful', 'suspicious', 'silly', 'sleek', 'slimy', 'slippery', 'sloppy', 'sleepy', 'silly', 'sincere', 'sour', 'salty', 'sunny', 'sweet', 'sneaky', 'sassy', 'shy', 'stubborn', 'strong', 'smart', 'stupid', 'silly', 'sincere', 'sensitive', 'savage', 'sophisticated', 'satisfied', 'satisfied', 'sociable', 'sorrowful', 'suspicious', 'silly', 'sleek', 'slimy', 'slippery', 'sloppy', 'sleepy']
        [API_TOKENS] 191
    [CREATE_FILE] adjectiveslist/start_by_s.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english adjectives , if possible, otherwise include as many as possible. Never comments, juste write adjectives
        [API_QUESTION] Write adjectives that start by the letter 't'.
        [API_ANSWER] ['1. Tall', '2. Tiny', '3. Tasty', '4. Terrible', '5. Terrific', '6. Tired', '7. Tender', '8. Tough', '9. Timid', '10. Talkative', '11. Trustworthy', '12. Tricky', '13. Tremendous', '14. Territorial', '15. Thoughtful', '16. Tenacious', '17. Tactful', '18. Triumphant', '19. Tepid', '20. Tense', '21. Tasteful', '22. Tactile', '23. Tolerant', '24. Terrigenous', '25. Trenchant', '26. Tenuous', '27. Tonic', '28. Tonal', '29. Topical', '30. Torrid', '31. Transparent', '32. Tranquil', '33. Tumultuous', '34. Turbulent', '35. Tantalizing', '36. Tawdry', '37. Tactless', '38. Tardy', '39. Tenebrous', '40. Terrene', '41. Thirsty', '42. Thorny', '43. Thrifty', '44. Throbbing', '45. Thorough', '46. Thunderous', '47. Thuggish', '48. Thwarted', '49. Tidy', '50. Tight.']
        [API_TOKENS] 265
    [CREATE_FILE] adjectiveslist/start_by_t.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english adjectives , if possible, otherwise include as many as possible. Never comments, juste write adjectives
        [API_QUESTION] Write adjectives that start by the letter 'u'.
        [API_ANSWER] ['ubiquitous', 'ugly', 'ultimate', 'ultra', 'unable', 'unacceptable', 'unadvised', 'unafraid', 'unanimous', 'unarmed', 'unaware', 'unbalanced', 'unbearable', 'unbeatable', 'unbelievable', 'unbiased', 'uncommon', 'unconscious', 'uncooperative', 'uncountable', 'uncovered', 'uncut', 'undamaged', 'undaunted', 'undecided', 'undefined', 'underground', 'understated', 'undesirable', 'undisputed', 'undivided', 'unending', 'unforgettable', 'unfortunate', 'unhappy', 'unhealthy', 'unholy', 'unified', 'unique', 'united', 'universal', 'unkempt', 'unknown', 'unlawful', 'unlike', 'unlikely', 'unlimited', 'unlucky', 'unmistakable', 'unnatural', 'unpleasant', 'unpredictable', 'unreasonable', 'unruly', 'unsightly', 'unstable', 'unsuccessful', 'unsuitable', 'unsure', 'untidy', 'unusual', 'unwanted', 'unwilling', 'upbeat', 'uplifting', 'upper', 'upset', 'uptight', 'urban', 'usable', 'used', 'useful', 'useless', 'usual', 'utmost', 'utter']
        [API_TOKENS] 235
    [CREATE_FILE] adjectiveslist/start_by_u.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english adjectives , if possible, otherwise include as many as possible. Never comments, juste write adjectives
        [API_QUESTION] Write adjectives that start by the letter 'v'.
        [API_ANSWER] ['vague', 'vain', 'valiant', 'valid', 'valuable', 'vapid', 'variable', 'varied', 'vast', 'vaulted', 'veiled', 'velvety', 'venomous', 'venturous', 'veracious', 'verdant', 'veritable', 'versatile', 'vexed', 'vibrant', 'vicious', 'vigilant', 'vigorous', 'vile', 'villainous', 'violet', 'virtual', 'virtuous', 'visible', 'vital', 'vivacious', 'vivid', 'vocal', 'void', 'volatile', 'voluptuous', 'voracious', 'vulgar', 'vulnerable']
        [API_TOKENS] 121
    [CREATE_FILE] adjectiveslist/start_by_v.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english adjectives , if possible, otherwise include as many as possible. Never comments, juste write adjectives
        [API_QUESTION] Write adjectives that start by the letter 'w'.
        [API_ANSWER] ['wavy', 'wacky', 'willing', 'wistful', 'wonderful', 'worn', 'wobbly', 'wiry', 'witty', 'wary', 'warm', 'wet', 'wild', 'weak', 'weird', 'willing', 'wavy', 'wonderful', 'wretched', 'white', 'wide', 'wondering', 'wandering', 'willing', 'wry', 'wealthy', 'whimsical', 'wacky', 'worn-out', 'willing', 'wavy', 'willing', 'wet', 'willing', 'wiry', 'willing', 'wonderful', 'willing', 'willing', 'willing', 'willing', 'willing', 'willing', 'willing', 'willing', 'willing', 'willing', 'willing', 'willing', 'willing', 'willing', 'willing', 'willing', 'willing', 'willing', 'willing', 'willing']
        [API_TOKENS] 173
    [CREATE_FILE] adjectiveslist/start_by_w.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english adjectives , if possible, otherwise include as many as possible. Never comments, juste write adjectives
        [API_QUESTION] Write adjectives that start by the letter 'x'.
        [API_ANSWER] ['Xenophobic', 'Xeric', 'Xerographic', 'Xerophilous', 'Xiphoid', 'Xyloid', 'Xylonic', 'Xylophagous', 'Xylophilous', 'Xylophone', 'Xyloidin', 'Xylographic', 'Xylographical', 'Xylopyrographical', 'Xylopyrography', 'Xyloquinone', 'Xylotomous', 'Xyresic', 'Xanthic', 'Xanthochroid', 'Xanthocomic', 'Xanthocyanic', 'Xanthodermic', 'Xanthomatous', 'Xanthophyllous', 'Xanthopous', 'Xanthous', 'Xenial', 'Xenodochial', 'Xenogenic', 'Xenolithic', 'Xenomorphic', 'Xenophobic', 'Xeric', 'Xerographic', 'Xerophilous', 'Xiphoid', 'Xyloid', 'Xylonic', 'Xylophagous', 'Xylophilous', 'Xylophone', 'Xyloidin', 'Xylographic', 'Xylographical', 'Xylopyrographical', 'Xylopyrography', 'Xyloquinone', 'Xylotomous', 'Xyresic']
        [API_TOKENS] 257
    [CREATE_FILE] adjectiveslist/start_by_x.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english adjectives , if possible, otherwise include as many as possible. Never comments, juste write adjectives
        [API_QUESTION] Write adjectives that start by the letter 'y'.
[ERROR_API] Error when call API: Bad gateway. {"error":{"code":502,"message":"Bad gateway.","param":null,"type":"cf_bad_gateway"}} 502 {'error': {'code': 502, 'message': 'Bad gateway.', 'param': None, 'type': 'cf_bad_gateway'}} {'Date': 'Wed, 31 May 2023 09:57:52 GMT', 'Content-Type': 'application/json', 'Content-Length': '84', 'Connection': 'keep-alive', 'X-Frame-Options': 'SAMEORIGIN', 'Referrer-Policy': 'same-origin', 'Cache-Control': 'private, max-age=0, no-store, no-cache, must-revalidate, post-check=0, pre-check=0', 'Expires': 'Thu, 01 Jan 1970 00:00:01 GMT', 'Server': 'cloudflare', 'CF-RAY': '7cfe536b8e400171-CDG', 'alt-svc': 'h3=":443"; ma=86400'}
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english adjectives , if possible, otherwise include as many as possible. Never comments, juste write adjectives
        [API_QUESTION] Write adjectives that start by the letter 'y'.
        [API_ANSWER] ['yellow', 'yummy', 'yawning', 'yearly', 'youthful', 'yogic', 'yielding', 'yuletide', 'yummylicious', 'yester', 'yogic', 'yokelish', 'yawning', 'yare', 'yucky', 'yolky', 'yawning', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yare', 'yucky', 'yogic', 'yester', 'yummy', 'yawning', 'yucky', 'yogic', 'yester', 'yare', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'yogic', 'yester', 'yummy', 'yucky', 'yogic', 'yester', 'yawning', 'yucky', 'y']
        [API_TOKENS] 4027
    [CREATE_FILE] adjectiveslist/start_by_y.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 50 english adjectives , if possible, otherwise include as many as possible. Never comments, juste write adjectives
        [API_QUESTION] Write adjectives that start by the letter 'z'.
        [API_ANSWER] ['zealous', 'zany', 'zesty', 'zonal', 'zoological', 'zonal', 'zippy', 'zonal', 'zonal', 'zonal', 'zonal', 'zonal', 'zonal', 'zonal', 'zonal', 'zonal', 'zonal', 'zonal', 'zonal', 'zonal', 'zonal', 'zonal', 'zonal', 'zonal', 'zonal']
        [API_TOKENS] 74
    [CREATE_FILE] adjectiveslist/start_by_z.txt sucessfully
    --------------------------------------------------------------------------------
    [CREATE_FOLDER]: data/french_english/adverbs
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 20 english adverbs , if possible, otherwise include as many as possible. Never comments, juste write adverbs
        [API_QUESTION] Write adverbs that start by the letter 'a'.
        [API_ANSWER] ['Absolutely', 'Actually', 'Always', 'Almost', 'Already', 'Also', 'Altogether', 'Anywhere', 'Anyway', 'Aside', 'Awhile', 'Anew', 'Afar', 'Alike', 'Astonishingly', 'Abnormally', 'Avidly', 'Awkwardly', 'Angrily', 'Anxiously']
        [API_TOKENS] 57
    [CREATE_FILE] adverbslist/start_by_a.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 20 english adverbs , if possible, otherwise include as many as possible. Never comments, juste write adverbs
        [API_QUESTION] Write adverbs that start by the letter 'b'.
        [API_ANSWER] ['badly', 'barely', 'beautifully', 'beforehand', 'begrudgingly', 'belatedly', 'benevolently', 'better', 'between', 'bewilderedly', 'bitterly', 'blatantly', 'bleakly', 'blindly', 'blissfully', 'boldly', 'boastfully', 'boldly', 'boringly', 'bravely']
        [API_TOKENS] 71
    [CREATE_FILE] adverbslist/start_by_b.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 20 english adverbs , if possible, otherwise include as many as possible. Never comments, juste write adverbs
        [API_QUESTION] Write adverbs that start by the letter 'c'.
        [API_ANSWER] ['Carefully', 'Certainly', 'Clearly', 'Closely', 'Commonly', 'Completely', 'Correctly', 'Courageously', 'Crazily', 'Crossly', 'Crudely', 'Cunningly', 'Curiously', 'Currently', 'Continuously', 'Consequently', 'Consciously', 'Confidently', 'Conveniently', 'Covertly']
        [API_TOKENS] 63
    [CREATE_FILE] adverbslist/start_by_c.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 20 english adverbs , if possible, otherwise include as many as possible. Never comments, juste write adverbs
        [API_QUESTION] Write adverbs that start by the letter 'd'.
        [API_ANSWER] ['daily', 'deeply', 'deliberately', 'directly', 'doubtfully', 'dramatically', 'dutifully', 'daintily', 'daringly', 'dearly', 'decently', 'definitely', 'delightfully', 'diligently', 'dimly', 'discreetly', 'distinctly', 'divinely', 'dizzily', 'docilely']
        [API_TOKENS] 74
    [CREATE_FILE] adverbslist/start_by_d.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 20 english adverbs , if possible, otherwise include as many as possible. Never comments, juste write adverbs
        [API_QUESTION] Write adverbs that start by the letter 'e'.
        [API_ANSWER] ['Eagerly', 'Easily', 'Economically', 'Efficiently', 'Elegantly', 'Eloquently', 'Emphatically', 'Endlessly', 'Enthusiastically', 'Equally', 'Especially', 'Essentially', 'Eternally', 'Evenly', 'Ever', 'Everywhere', 'Evidently', 'Exceedingly', 'Exclusively', 'Expediently']
        [API_TOKENS] 73
    [CREATE_FILE] adverbslist/start_by_e.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 20 english adverbs , if possible, otherwise include as many as possible. Never comments, juste write adverbs
        [API_QUESTION] Write adverbs that start by the letter 'f'.
        [API_ANSWER] ['Frequently', 'Faintly', 'Famously', 'Far', 'Fast', 'Fatally', 'Ferociously', 'Fervently', 'Fiercely', 'Finally', 'Financially', 'Fine', 'Firmly', 'Firstly', 'Flatly', 'Fondly', 'Forcibly', 'Forever', 'Formally', 'Fortunately']
        [API_TOKENS] 63
    [CREATE_FILE] adverbslist/start_by_f.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 20 english adverbs , if possible, otherwise include as many as possible. Never comments, juste write adverbs
        [API_QUESTION] Write adverbs that start by the letter 'g'.
        [API_ANSWER] ['Gently', 'Gladly', 'Gracefully', 'Generously', 'Grimly', 'Gratefully', 'Generally', 'Gregariously', 'Guiltily', 'Grimly', 'Gloriously', 'Gradually', 'Greatly', 'Grudgingly', 'Garrulously', 'Giddily', 'Ghoulishly', 'Gregariously', 'Gruffly', 'Gushingly']
        [API_TOKENS] 73
    [CREATE_FILE] adverbslist/start_by_g.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 20 english adverbs , if possible, otherwise include as many as possible. Never comments, juste write adverbs
        [API_QUESTION] Write adverbs that start by the letter 'h'.
        [API_ANSWER] ['Here', 'Hence', 'However', 'Hastily', 'Hungrily', 'Happily', 'Humbly', 'Hastily', 'Haphazardly', 'Henceforth', 'Henceforward', 'Henceforward', 'Henceforth', 'Hitherto', 'Hence', 'Hereafter', 'Hereby', 'Herein', 'Hereinafter', 'Hereof']
        [API_TOKENS] 70
    [CREATE_FILE] adverbslist/start_by_h.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 20 english adverbs , if possible, otherwise include as many as possible. Never comments, juste write adverbs
        [API_QUESTION] Write adverbs that start by the letter 'i'.
        [API_ANSWER] ['Immediately', 'Incessantly', 'Incredibly', 'Inevitably', 'Inexplicably', 'Infrequently', 'Inquisitively', 'Insecurely', 'Incessantly', 'Inwardly', 'Incredulously', 'Inadvertently', 'Indifferently', 'Indignantly', 'Indirectly', 'Individually', 'Indubitably', 'Ineffectively', 'Inexorably', 'Inferiorly']
        [API_TOKENS] 80
    [CREATE_FILE] adverbslist/start_by_i.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 20 english adverbs , if possible, otherwise include as many as possible. Never comments, juste write adverbs
        [API_QUESTION] Write adverbs that start by the letter 'j'.
        [API_ANSWER] ['Just', 'Jovially', 'Joyfully', 'Jaggedly', 'Jokingly', 'Judiciously', 'Jealously', 'Jubilantly', 'Jarringly', 'Jaggedly', 'Jocundly', 'Jadedly', 'Jocosely', 'Jarringly', 'Jestingly', 'Jovially', 'Jaggedly', 'Jumblingly', 'Jaggedly', 'Jaggedly']
        [API_TOKENS] 78
    [CREATE_FILE] adverbslist/start_by_j.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 20 english adverbs , if possible, otherwise include as many as possible. Never comments, juste write adverbs
        [API_QUESTION] Write adverbs that start by the letter 'k'.
        [API_ANSWER] ['Keenly', 'Kindly', 'Knavishly', 'Knowingly', 'Kookily', 'Kinetically', 'Killingly', 'Kissably', 'Kingly', 'Kookily', 'Kinetically', 'Knottily', 'Knavishly', 'Knowledgeably', 'Kookily', 'Kittenishly', 'Killingly', 'Kindheartedly', 'Kinda', 'Kneadably']
        [API_TOKENS] 75
    [CREATE_FILE] adverbslist/start_by_k.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 20 english adverbs , if possible, otherwise include as many as possible. Never comments, juste write adverbs
        [API_QUESTION] Write adverbs that start by the letter 'l'.
        [API_ANSWER] ['Loudly', 'Lazily', 'Lively', 'Largely', 'Lately', 'Lightly', 'Loud', 'Lavishly', 'Largely', 'Lazily', 'Lethally', 'Liberally', 'Likely', 'Limpidly', 'Lingeringly', 'Lividly', 'Loftily', 'Logically', 'Longingly', 'Lovingly']
        [API_TOKENS] 74
    [CREATE_FILE] adverbslist/start_by_l.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 20 english adverbs , if possible, otherwise include as many as possible. Never comments, juste write adverbs
        [API_QUESTION] Write adverbs that start by the letter 'm'.
        [API_ANSWER] ['Maybe', 'Merrily', 'Miserably', 'Mightily', 'Mortally', 'Mostly', 'Much', 'More', 'Moreover', 'Most', 'Mysteriously', 'Mildly', 'Merrily', 'Monthly', 'Meaningfully', 'Majestically', 'Meekly', 'Mightily', 'Mournfully', 'Merrily']
        [API_TOKENS] 67
    [CREATE_FILE] adverbslist/start_by_m.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 20 english adverbs , if possible, otherwise include as many as possible. Never comments, juste write adverbs
        [API_QUESTION] Write adverbs that start by the letter 'n'.
        [API_ANSWER] ['Naturally', 'Neatly', 'Nearly', 'Nervously', 'Never', 'Nicely', 'Noisily', 'Normally', 'Notably', 'Now', 'Numbly']
        [API_TOKENS] 32
    [CREATE_FILE] adverbslist/start_by_n.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 20 english adverbs , if possible, otherwise include as many as possible. Never comments, juste write adverbs
        [API_QUESTION] Write adverbs that start by the letter 'o'.
        [API_ANSWER] ['Obviously', 'Often', 'Once', 'Only', 'Otherwise', 'Out', 'Outdoors', 'Outright', 'Overboard', 'Overhead', 'Overly', 'Overnight', 'Overseas', 'Overtime', 'Outwardly', 'Outrightly', 'Onward', 'Offensively', 'Obliviously']
        [API_TOKENS] 55
    [CREATE_FILE] adverbslist/start_by_o.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 20 english adverbs , if possible, otherwise include as many as possible. Never comments, juste write adverbs
        [API_QUESTION] Write adverbs that start by the letter 'p'.
        [API_ANSWER] ['Perfectly', 'Poorly', 'Politely', 'Proudly', 'Patiently', 'Promptly', 'Powerfully', 'Precisely', 'Playfully', 'Professionally', 'Properly', 'Publicly', 'Pleasantly', 'Partially', 'Passionately', 'Peacefully', 'Painfully', 'Pleasurably', 'Pensively', 'Positively']
        [API_TOKENS] 71
    [CREATE_FILE] adverbslist/start_by_p.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 20 english adverbs , if possible, otherwise include as many as possible. Never comments, juste write adverbs
        [API_QUESTION] Write adverbs that start by the letter 'q'.
        [API_ANSWER] ['Quickly', 'Quietly']
        [API_TOKENS] 5
    [CREATE_FILE] adverbslist/start_by_q.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 20 english adverbs , if possible, otherwise include as many as possible. Never comments, juste write adverbs
        [API_QUESTION] Write adverbs that start by the letter 'r'.
        [API_ANSWER] ['Rapidly', 'Rarely', 'Rather', 'Readily', 'Really', 'Reasonably', 'Recently', 'Regularly', 'Reluctantly', 'Repeatedly', 'Rightfully', 'Rigorously', 'Roughly', 'Royally', 'Rudely', 'Ruefully', 'Ruggedly', 'Ruthlessly']
        [API_TOKENS] 58
    [CREATE_FILE] adverbslist/start_by_r.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 20 english adverbs , if possible, otherwise include as many as possible. Never comments, juste write adverbs
        [API_QUESTION] Write adverbs that start by the letter 's'.
        [API_ANSWER] ['Suddenly', 'Softly', 'Slowly', 'Safely', 'Sincerely', 'Seriously', 'Solemnly', 'Seductively', 'Satisfactorily', 'Slyly', 'Smoothly', 'Sensibly', 'Skeptically', 'Sorrowfully', 'Steadily', 'Strenuously', 'Strangely', 'Subtly', 'Supposedly', 'Synchronously']
        [API_TOKENS] 71
    [CREATE_FILE] adverbslist/start_by_s.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 20 english adverbs , if possible, otherwise include as many as possible. Never comments, juste write adverbs
        [API_QUESTION] Write adverbs that start by the letter 't'.
        [API_ANSWER] ['Today', 'Tomorrow', 'Tonight', 'Together', 'Thus', 'Tightly', 'Terribly', 'Tenderly', 'Temporarily', 'Tactfully', 'Tastefully', 'Tediously', 'Thankfully', 'Thoroughly', 'Thoughtfully', 'Tightly', 'Tremendously', 'Triumphantly', 'Truly', 'Twice']
        [API_TOKENS] 61
    [CREATE_FILE] adverbslist/start_by_t.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 20 english adverbs , if possible, otherwise include as many as possible. Never comments, juste write adverbs
        [API_QUESTION] Write adverbs that start by the letter 'u'.
        [API_ANSWER] ['Usually', 'Unabashedly', 'Unaccountably', 'Unarguably', 'Unbearably', 'Unbelievably', 'Unconditionally', 'Undeniably', 'Underground', 'Underneath', 'Unexpectedly', 'Unfailingly', 'Unfortunately', 'Unhappily', 'Uniquely', 'Universally', 'Unknowingly', 'Unquestionably', 'Unwittingly', 'Upstairs']
        [API_TOKENS] 72
    [CREATE_FILE] adverbslist/start_by_u.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 20 english adverbs , if possible, otherwise include as many as possible. Never comments, juste write adverbs
        [API_QUESTION] Write adverbs that start by the letter 'v'.
        [API_ANSWER] ['vainly', 'vastly', 'verbally', 'very', 'viciously', 'victoriously', 'vigilantly', 'vigorously', 'vilely', 'vindictively', 'violently', 'virtually', 'virtuously', 'visibly', 'visually', 'vivaciously', 'vividly', 'voluntarily', 'voraciously', 'vulnerably']
        [API_TOKENS] 73
    [CREATE_FILE] adverbslist/start_by_v.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 20 english adverbs , if possible, otherwise include as many as possible. Never comments, juste write adverbs
        [API_QUESTION] Write adverbs that start by the letter 'w'.
        [API_ANSWER] ['Warmly', 'Warily', 'Wastefully', 'Weekly', 'Well', 'Wetly', 'Where', 'Wholly', 'Why', 'Wickedly', 'Wide', 'Wildly', 'Willingly', 'Wistfully', 'Wonderfully', 'Worriedly', 'Worst', 'Worthily', 'Wrongly', 'Wryly']
        [API_TOKENS] 63
    [CREATE_FILE] adverbslist/start_by_w.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 20 english adverbs , if possible, otherwise include as many as possible. Never comments, juste write adverbs
        [API_QUESTION] Write adverbs that start by the letter 'x'.
        [API_ANSWER] ['Xenophobically', 'Xenodochially', 'Xenogenetically', 'Xenomorphically', 'Xenophontically', 'Xerographically', 'Xerophytically', 'Xylographically']
        [API_TOKENS] 44
    [CREATE_FILE] adverbslist/start_by_x.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 20 english adverbs , if possible, otherwise include as many as possible. Never comments, juste write adverbs
        [API_QUESTION] Write adverbs that start by the letter 'y'.
        [API_ANSWER] ['Yearly', 'Yesterday', 'Yet', 'Yonder', 'Yawningly', 'Yieldingly', 'Yare', 'Yarely', 'Yea', 'Yellingly', 'Yelpingly', "Yesterday's", 'Yesteryear', 'Yestreen', 'Yon', 'Yonderward', 'Yore', 'Youthfully', 'Yuppily', 'Ywis']
        [API_TOKENS] 68
    [CREATE_FILE] adverbslist/start_by_y.txt sucessfully
    --------------------------------------------------------------------------------
        [API_CONTEXT] Do not comment, just write one word per line without numbered it.
    Create a python list containing a minimum of 20 english adverbs , if possible, otherwise include as many as possible. Never comments, juste write adverbs
        [API_QUESTION] Write adverbs that start by the letter 'z'.
        [API_ANSWER] ['Zealously', 'Zestfully', 'Zanily', 'Zestily', 'Zippily', 'Zestfully', 'Zanily', 'Zestily', 'Zippily', 'Zestfully', 'Zanily', 'Zestily', 'Zippily', 'Zestfully', 'Zanily', 'Zestily', 'Zippily', 'Zestfully', 'Zanily', 'Zestily']
        [API_TOKENS] 79
    [CREATE_FILE] adverbslist/start_by_z.txt sucessfully
    --------------------------------------------------------------------------------
[CHECK_AND_UPDATE_ALL_LIST_OF_WORD]
[DONT_REMOVE_ARTICLE]: Kidney bean

[DONT_REMOVE_ARTICLE]: an eagle

[DONT_REMOVE_ARTICLE]: an ear

[DONT_REMOVE_ARTICLE]: an edge

[DONT_REMOVE_ARTICLE]: an egg

[DONT_REMOVE_ARTICLE]: an elbow

[DONT_REMOVE_ARTICLE]: an elephant

[DONT_REMOVE_ARTICLE]: an elevator

[DONT_REMOVE_ARTICLE]: an end

[DONT_REMOVE_ARTICLE]: an engine

[DONT_REMOVE_ARTICLE]: an entrance

[DONT_REMOVE_ARTICLE]: an envelope

[DONT_REMOVE_ARTICLE]: an equation

[DONT_REMOVE_ARTICLE]: an error

[DONT_REMOVE_ARTICLE]: an essay

[DONT_REMOVE_ARTICLE]: an establishment

[DONT_REMOVE_ARTICLE]: an estate

[DONT_REMOVE_ARTICLE]: an event

[DONT_REMOVE_ARTICLE]: an examination

[DONT_REMOVE_ARTICLE]: an example

[DONT_REMOVE_ARTICLE]: an excitement

[DONT_REMOVE_ARTICLE]: an exclusion

[DONT_REMOVE_ARTICLE]: an exercise

[DONT_REMOVE_ARTICLE]: an exhibition

[DONT_REMOVE_ARTICLE]: an existence

[DONT_REMOVE_ARTICLE]: an expansion

[DONT_REMOVE_ARTICLE]: an experience

[DONT_REMOVE_ARTICLE]: an experiment

[DONT_REMOVE_ARTICLE]: an expert

[DONT_REMOVE_ARTICLE]: an explanation

[DONT_REMOVE_ARTICLE]: an explosion

[DONT_REMOVE_ARTICLE]: an export

[DONT_REMOVE_ARTICLE]: an expression

[DONT_REMOVE_ARTICLE]: an extension

[DONT_REMOVE_ARTICLE]: an eye
[DONT_REMOVE_ARTICLE]: The galaxy

[DONT_REMOVE_ARTICLE]: The gallery

[DONT_REMOVE_ARTICLE]: The game

[DONT_REMOVE_ARTICLE]: The garage

[DONT_REMOVE_ARTICLE]: The garbage

[DONT_REMOVE_ARTICLE]: The garden

[DONT_REMOVE_ARTICLE]: The gardenia

[DONT_REMOVE_ARTICLE]: The garlic

[DONT_REMOVE_ARTICLE]: The gas

[DONT_REMOVE_ARTICLE]: The gasoline

[DONT_REMOVE_ARTICLE]: The gate

[DONT_REMOVE_ARTICLE]: The gatekeeper

[DONT_REMOVE_ARTICLE]: The gathering

[DONT_REMOVE_ARTICLE]: The gazebo

[DONT_REMOVE_ARTICLE]: The gear

[DONT_REMOVE_ARTICLE]: The gearshift

[DONT_REMOVE_ARTICLE]: The gecko

[DONT_REMOVE_ARTICLE]: The gem

[DONT_REMOVE_ARTICLE]: The gender

[DONT_REMOVE_ARTICLE]: The gene

[DONT_REMOVE_ARTICLE]: The general

[DONT_REMOVE_ARTICLE]: The generation

[DONT_REMOVE_ARTICLE]: The generosity

[DONT_REMOVE_ARTICLE]: The genius

[DONT_REMOVE_ARTICLE]: The geography

[DONT_REMOVE_ARTICLE]: The geology

[DONT_REMOVE_ARTICLE]: The geometry

[DONT_REMOVE_ARTICLE]: The geranium

[DONT_REMOVE_ARTICLE]: The germ

[DONT_REMOVE_ARTICLE]: The gesture

[DONT_REMOVE_ARTICLE]: The ghost

[DONT_REMOVE_ARTICLE]: The giant

[DONT_REMOVE_ARTICLE]: The gift

[DONT_REMOVE_ARTICLE]: The ginger

[DONT_REMOVE_ARTICLE]: The girl

[DONT_REMOVE_ARTICLE]: The glacier

[DONT_REMOVE_ARTICLE]: The glamour

[DONT_REMOVE_ARTICLE]: The glass

[DONT_REMOVE_ARTICLE]: The globe

[DONT_REMOVE_ARTICLE]: The glory

[DONT_REMOVE_ARTICLE]: The glove

[DONT_REMOVE_ARTICLE]: The goal

[DONT_REMOVE_ARTICLE]: The goat

[DONT_REMOVE_ARTICLE]: The goddess

[DONT_REMOVE_ARTICLE]: The gold

[DONT_REMOVE_ARTICLE]: The golf

[DONT_REMOVE_ARTICLE]: The goose

[DONT_REMOVE_ARTICLE]: The gossip

[DONT_REMOVE_ARTICLE]: The government

[DONT_REMOVE_ARTICLE]: The gown

[DONT_REMOVE_ARTICLE]: The grace

[DONT_REMOVE_ARTICLE]: The grain

[DONT_REMOVE_ARTICLE]: The grammar

[DONT_REMOVE_ARTICLE]: The grandparent

[DONT_REMOVE_ARTICLE]: The grape

[DONT_REMOVE_ARTICLE]: The grapefruit

[DONT_REMOVE_ARTICLE]: The graphics

[DONT_REMOVE_ARTICLE]: The grass

[DONT_REMOVE_ARTICLE]: The grasshopper

[DONT_REMOVE_ARTICLE]: The gratitude

[DONT_REMOVE_ARTICLE]: The gravestone

[DONT_REMOVE_ARTICLE]: The gravity

[DONT_REMOVE_ARTICLE]: The greed

[DONT_REMOVE_ARTICLE]: The greenhouse

[DONT_REMOVE_ARTICLE]: The greeting

[DONT_REMOVE_ARTICLE]: The greyhound

[DONT_REMOVE_ARTICLE]: The grill

[DONT_REMOVE_ARTICLE]: The grip

[DONT_REMOVE_ARTICLE]: The grocery

[DONT_REMOVE_ARTICLE]: The groom

[DONT_REMOVE_ARTICLE]: The group

[DONT_REMOVE_ARTICLE]: The growth

[DONT_REMOVE_ARTICLE]: The guarantee

[DONT_REMOVE_ARTICLE]: The guest

[DONT_REMOVE_ARTICLE]: The guidance

[DONT_REMOVE_ARTICLE]: The guide

[DONT_REMOVE_ARTICLE]: The guitar

[DONT_REMOVE_ARTICLE]: The gum

[DONT_REMOVE_ARTICLE]: The gun

[DONT_REMOVE_ARTICLE]: The guru

[DONT_REMOVE_ARTICLE]: The gutter

[DONT_REMOVE_ARTICLE]: The guy

[DONT_REMOVE_ARTICLE]: The gym

[DONT_REMOVE_ARTICLE]: The gymnasium

[DONT_REMOVE_ARTICLE]: The gymnastics

[DONT_REMOVE_ARTICLE]: a quack

[DONT_REMOVE_ARTICLE]: a quail

[DONT_REMOVE_ARTICLE]: a quality

[DONT_REMOVE_ARTICLE]: a quantum

[DONT_REMOVE_ARTICLE]: a quark

[DONT_REMOVE_ARTICLE]: a quarry

[DONT_REMOVE_ARTICLE]: a quarter

[DONT_REMOVE_ARTICLE]: a queen

[DONT_REMOVE_ARTICLE]: a quench

[DONT_REMOVE_ARTICLE]: a quest

[DONT_REMOVE_ARTICLE]: a questionnaire

[DONT_REMOVE_ARTICLE]: a queue

[DONT_REMOVE_ARTICLE]: a quibble

[DONT_REMOVE_ARTICLE]: a quiche

[DONT_REMOVE_ARTICLE]: a quickstep

[DONT_REMOVE_ARTICLE]: a quietus

[DONT_REMOVE_ARTICLE]: a quill

[DONT_REMOVE_ARTICLE]: a quilt

[DONT_REMOVE_ARTICLE]: a quince

[DONT_REMOVE_ARTICLE]: a quinoa

[DONT_REMOVE_ARTICLE]: a quintet

[DONT_REMOVE_ARTICLE]: a quintillion

[DONT_REMOVE_ARTICLE]: a quip

[DONT_REMOVE_ARTICLE]: a quorum

[DONT_REMOVE_ARTICLE]: an actor

[DONT_REMOVE_ARTICLE]: an agenda

[DONT_REMOVE_ARTICLE]: an aircraft

[DONT_REMOVE_ARTICLE]: an alarm

[DONT_REMOVE_ARTICLE]: an album

[DONT_REMOVE_ARTICLE]: an alley

[DONT_REMOVE_ARTICLE]: an alligator

[DONT_REMOVE_ARTICLE]: an almond

[DONT_REMOVE_ARTICLE]: an ambulance

[DONT_REMOVE_ARTICLE]: an amplifier

[DONT_REMOVE_ARTICLE]: an anchor

[DONT_REMOVE_ARTICLE]: an angel

[DONT_REMOVE_ARTICLE]: an angle

[DONT_REMOVE_ARTICLE]: an ankle

[DONT_REMOVE_ARTICLE]: an ant

[DONT_REMOVE_ARTICLE]: an apartment

[DONT_REMOVE_ARTICLE]: an ape

[DONT_REMOVE_ARTICLE]: an apple

[DONT_REMOVE_ARTICLE]: an apron

[DONT_REMOVE_ARTICLE]: an aquarium

[DONT_REMOVE_ARTICLE]: an arch

[DONT_REMOVE_ARTICLE]: an architect

[DONT_REMOVE_ARTICLE]: an arm

[DONT_REMOVE_ARTICLE]: an army

[DONT_REMOVE_ARTICLE]: an arrow

[DONT_REMOVE_ARTICLE]: an arrowhead

[DONT_REMOVE_ARTICLE]: an art

[DONT_REMOVE_ARTICLE]: an artist

[DONT_REMOVE_ARTICLE]: an artwork

[DONT_REMOVE_ARTICLE]: an ashtray

[DONT_REMOVE_ARTICLE]: an astronaut

[DONT_REMOVE_ARTICLE]: an asylum

[DONT_REMOVE_ARTICLE]: an atlas

[DONT_REMOVE_ARTICLE]: an atom

[DONT_REMOVE_ARTICLE]: an auction

[DONT_REMOVE_ARTICLE]: an audience

[DONT_REMOVE_ARTICLE]: an aunt

[DONT_REMOVE_ARTICLE]: an author

[DONT_REMOVE_ARTICLE]: an avocado

[DONT_REMOVE_ARTICLE]: an axe

[DONT_REMOVE_ARTICLE]: The rabbit

[DONT_REMOVE_ARTICLE]: The race

[DONT_REMOVE_ARTICLE]: The radio

[DONT_REMOVE_ARTICLE]: The rain

[DONT_REMOVE_ARTICLE]: The rainbow

[DONT_REMOVE_ARTICLE]: The rake

[DONT_REMOVE_ARTICLE]: The ram

[DONT_REMOVE_ARTICLE]: The ranch

[DONT_REMOVE_ARTICLE]: The range

[DONT_REMOVE_ARTICLE]: The rap

[DONT_REMOVE_ARTICLE]: The raspberry

[DONT_REMOVE_ARTICLE]: The rat

[DONT_REMOVE_ARTICLE]: The rate

[DONT_REMOVE_ARTICLE]: The ratio

[DONT_REMOVE_ARTICLE]: The raven

[DONT_REMOVE_ARTICLE]: The raw

[DONT_REMOVE_ARTICLE]: The ray

[DONT_REMOVE_ARTICLE]: The razor

[DONT_REMOVE_ARTICLE]: The reach

[DONT_REMOVE_ARTICLE]: The reaction

[DONT_REMOVE_ARTICLE]: The reading

[DONT_REMOVE_ARTICLE]: The reality

[DONT_REMOVE_ARTICLE]: The reason

[DONT_REMOVE_ARTICLE]: The rebel

[DONT_REMOVE_ARTICLE]: The receipt

[DONT_REMOVE_ARTICLE]: The recipe

[DONT_REMOVE_ARTICLE]: The recognition

[DONT_REMOVE_ARTICLE]: The recommendation

[DONT_REMOVE_ARTICLE]: The record

[DONT_REMOVE_ARTICLE]: The recovery

[DONT_REMOVE_ARTICLE]: The recreation

[DONT_REMOVE_ARTICLE]: The red

[DONT_REMOVE_ARTICLE]: The reduction

[DONT_REMOVE_ARTICLE]: The reference

[DONT_REMOVE_ARTICLE]: The reflection

[DONT_REMOVE_ARTICLE]: The refrigerator

[DONT_REMOVE_ARTICLE]: The refuge

[DONT_REMOVE_ARTICLE]: The region

[DONT_REMOVE_ARTICLE]: The register

[DONT_REMOVE_ARTICLE]: The regret

[DONT_REMOVE_ARTICLE]: The regular

[DONT_REMOVE_ARTICLE]: The regulation

[DONT_REMOVE_ARTICLE]: The rehearsal

[DONT_REMOVE_ARTICLE]: The relation

[DONT_REMOVE_ARTICLE]: The relaxation

[DONT_REMOVE_ARTICLE]: The release

[DONT_REMOVE_ARTICLE]: The relief

[DONT_REMOVE_ARTICLE]: The religion

[DONT_REMOVE_ARTICLE]: The remainder

[DONT_REMOVE_ARTICLE]: The remark

[DONT_REMOVE_ARTICLE]: The remedy

[DONT_REMOVE_ARTICLE]: The remote

[DONT_REMOVE_ARTICLE]: The removal

[DONT_REMOVE_ARTICLE]: The rent

[DONT_REMOVE_ARTICLE]: The repair

[DONT_REMOVE_ARTICLE]: The repeat

[DONT_REMOVE_ARTICLE]: The replacement

[DONT_REMOVE_ARTICLE]: The reply

[DONT_REMOVE_ARTICLE]: The report

[DONT_REMOVE_ARTICLE]: The representative

[DONT_REMOVE_ARTICLE]: The republic

[DONT_REMOVE_ARTICLE]: The reputation

[DONT_REMOVE_ARTICLE]: The request

[DONT_REMOVE_ARTICLE]: The requirement

[DONT_REMOVE_ARTICLE]: The rescue

[DONT_REMOVE_ARTICLE]: The research

[DONT_REMOVE_ARTICLE]: The reservation

[DONT_REMOVE_ARTICLE]: The residence

[DONT_REMOVE_ARTICLE]: The resignation

[DONT_REMOVE_ARTICLE]: The resistance

[DONT_REMOVE_ARTICLE]: The resolution

[DONT_REMOVE_ARTICLE]: The resort

[DONT_REMOVE_ARTICLE]: The resource

[DONT_REMOVE_ARTICLE]: The respect

[DONT_REMOVE_ARTICLE]: The response

[DONT_REMOVE_ARTICLE]: The responsibility

[DONT_REMOVE_ARTICLE]: The rest

[DONT_REMOVE_ARTICLE]: The restaurant

[DONT_REMOVE_ARTICLE]: The result

[DONT_REMOVE_ARTICLE]: The retirement

[DONT_REMOVE_ARTICLE]: The return

[DONT_REMOVE_ARTICLE]: The revelation

[DONT_REMOVE_ARTICLE]: The revenge

[DONT_REMOVE_ARTICLE]: The revenue

[DONT_REMOVE_ARTICLE]: The review

[DONT_REMOVE_ARTICLE]: The revolution

[DONT_REMOVE_ARTICLE]: The reward

[DONT_REMOVE_ARTICLE]: The rhythm

[DONT_REMOVE_ARTICLE]: The rice

[DONT_REMOVE_ARTICLE]: The rich

[DONT_REMOVE_ARTICLE]: The ride

[DONT_REMOVE_ARTICLE]: The rider

[DONT_REMOVE_ARTICLE]: The ridge

[DONT_REMOVE_ARTICLE]: The rifle

[DONT_REMOVE_ARTICLE]: The right

[DONT_REMOVE_ARTICLE]: The ring

[DONT_REMOVE_ARTICLE]: The riot

[DONT_REMOVE_ARTICLE]: The rise

[DONT_REMOVE_ARTICLE]: The risk

[DONT_REMOVE_ARTICLE]: The river

[DONT_REMOVE_ARTICLE]: The safety

[DONT_REMOVE_ARTICLE]: The salad

[DONT_REMOVE_ARTICLE]: The salmon

[DONT_REMOVE_ARTICLE]: The salt

[DONT_REMOVE_ARTICLE]: The sand

[DONT_REMOVE_ARTICLE]: The sandwich

[DONT_REMOVE_ARTICLE]: The satellite

[DONT_REMOVE_ARTICLE]: The sauce

[DONT_REMOVE_ARTICLE]: The sausage

[DONT_REMOVE_ARTICLE]: The scarf

[DONT_REMOVE_ARTICLE]: The scene

[DONT_REMOVE_ARTICLE]: The school

[DONT_REMOVE_ARTICLE]: The science

[DONT_REMOVE_ARTICLE]: The scissors

[DONT_REMOVE_ARTICLE]: The screen

[DONT_REMOVE_ARTICLE]: The sea

[DONT_REMOVE_ARTICLE]: The season

[DONT_REMOVE_ARTICLE]: The security

[DONT_REMOVE_ARTICLE]: The sensation

[DONT_REMOVE_ARTICLE]: The sentiment

[DONT_REMOVE_ARTICLE]: The sentimentality

[DONT_REMOVE_ARTICLE]: The sequel

[DONT_REMOVE_ARTICLE]: The series

[DONT_REMOVE_ARTICLE]: The service

[DONT_REMOVE_ARTICLE]: The shampoo

[DONT_REMOVE_ARTICLE]: The shape

[DONT_REMOVE_ARTICLE]: The shelter

[DONT_REMOVE_ARTICLE]: The ship

[DONT_REMOVE_ARTICLE]: The shirt

[DONT_REMOVE_ARTICLE]: The shoe

[DONT_REMOVE_ARTICLE]: The shorts

[DONT_REMOVE_ARTICLE]: The shower

[DONT_REMOVE_ARTICLE]: The shrimp

[DONT_REMOVE_ARTICLE]: The sidewalk

[DONT_REMOVE_ARTICLE]: The sight

[DONT_REMOVE_ARTICLE]: The sign

[DONT_REMOVE_ARTICLE]: The simplicity

[DONT_REMOVE_ARTICLE]: The sincerity

[DONT_REMOVE_ARTICLE]: The sink

[DONT_REMOVE_ARTICLE]: The size

[DONT_REMOVE_ARTICLE]: The skillet

[DONT_REMOVE_ARTICLE]: The skirt

[DONT_REMOVE_ARTICLE]: The sky

[DONT_REMOVE_ARTICLE]: The smell

[DONT_REMOVE_ARTICLE]: The snake

[DONT_REMOVE_ARTICLE]: The soap

[DONT_REMOVE_ARTICLE]: The social

[DONT_REMOVE_ARTICLE]: The society

[DONT_REMOVE_ARTICLE]: The sock

[DONT_REMOVE_ARTICLE]: The soda

[DONT_REMOVE_ARTICLE]: The software

[DONT_REMOVE_ARTICLE]: The solution

[DONT_REMOVE_ARTICLE]: The sound

[DONT_REMOVE_ARTICLE]: The space

[DONT_REMOVE_ARTICLE]: The spatula

[DONT_REMOVE_ARTICLE]: The speaker

[DONT_REMOVE_ARTICLE]: The spice

[DONT_REMOVE_ARTICLE]: The spider

[DONT_REMOVE_ARTICLE]: The spoon

[DONT_REMOVE_ARTICLE]: The squirrel

[DONT_REMOVE_ARTICLE]: The stadium

[DONT_REMOVE_ARTICLE]: The stage

[DONT_REMOVE_ARTICLE]: The stamp

[DONT_REMOVE_ARTICLE]: The stapler

[DONT_REMOVE_ARTICLE]: The star

[DONT_REMOVE_ARTICLE]: The stationery

[DONT_REMOVE_ARTICLE]: The steak

[DONT_REMOVE_ARTICLE]: The stereo

[DONT_REMOVE_ARTICLE]: The stop

[DONT_REMOVE_ARTICLE]: The store

[DONT_REMOVE_ARTICLE]: The stove

[DONT_REMOVE_ARTICLE]: The strategy

[DONT_REMOVE_ARTICLE]: The street

[DONT_REMOVE_ARTICLE]: The structure

[DONT_REMOVE_ARTICLE]: The student

[DONT_REMOVE_ARTICLE]: The style

[DONT_REMOVE_ARTICLE]: The subject

[DONT_REMOVE_ARTICLE]: The substance

[DONT_REMOVE_ARTICLE]: The success

[DONT_REMOVE_ARTICLE]: The sugar

[DONT_REMOVE_ARTICLE]: The suitcase

[DONT_REMOVE_ARTICLE]: The sun

[DONT_REMOVE_ARTICLE]: The sunglasses

[DONT_REMOVE_ARTICLE]: The supermarket

[DONT_REMOVE_ARTICLE]: The supernova

[DONT_REMOVE_ARTICLE]: The support

[DONT_REMOVE_ARTICLE]: The sweater

[DONT_REMOVE_ARTICLE]: The sword

[DONT_REMOVE_ARTICLE]: The syrup

[DONT_REMOVE_ARTICLE]: The system

[DONT_REMOVE_ARTICLE]: The taste

[DONT_REMOVE_ARTICLE]: The teacher

[DONT_REMOVE_ARTICLE]: The texture

[DONT_REMOVE_ARTICLE]: The touch

[DONT_REMOVE_ARTICLE]: an umbrella

[DONT_REMOVE_ARTICLE]: an uncle

[DONT_REMOVE_ARTICLE]: an understanding

[DONT_REMOVE_ARTICLE]: an undertaking

[DONT_REMOVE_ARTICLE]: an underwear

[DONT_REMOVE_ARTICLE]: an unicorn

[DONT_REMOVE_ARTICLE]: an union

[DONT_REMOVE_ARTICLE]: an uniqueness

[DONT_REMOVE_ARTICLE]: an university

[DONT_REMOVE_ARTICLE]: an uprising

[DONT_REMOVE_ARTICLE]: an urge

[DONT_REMOVE_ARTICLE]: an usage

[DONT_REMOVE_ARTICLE]: an usher

[DONT_REMOVE_ARTICLE]: an utensil

[DONT_REMOVE_ARTICLE]: an utility

[DONT_REMOVE_ARTICLE]: an utterance
[DONT_REMOVE_ARTICLE]: a jacket

[DONT_REMOVE_ARTICLE]: a jaguar

[DONT_REMOVE_ARTICLE]: a jail

[DONT_REMOVE_ARTICLE]: a jam

[DONT_REMOVE_ARTICLE]: a janitor

[DONT_REMOVE_ARTICLE]: a jar

[DONT_REMOVE_ARTICLE]: a jasmine

[DONT_REMOVE_ARTICLE]: a jaw

[DONT_REMOVE_ARTICLE]: a jazz

[DONT_REMOVE_ARTICLE]: a jeep

[DONT_REMOVE_ARTICLE]: a jellyfish

[DONT_REMOVE_ARTICLE]: a jet

[DONT_REMOVE_ARTICLE]: a jewel

[DONT_REMOVE_ARTICLE]: a jigsaw

[DONT_REMOVE_ARTICLE]: a job

[DONT_REMOVE_ARTICLE]: a jog

[DONT_REMOVE_ARTICLE]: a joint

[DONT_REMOVE_ARTICLE]: a joke

[DONT_REMOVE_ARTICLE]: a journalist

[DONT_REMOVE_ARTICLE]: a journey

[DONT_REMOVE_ARTICLE]: a joy

[DONT_REMOVE_ARTICLE]: a judge

[DONT_REMOVE_ARTICLE]: a juice

[DONT_REMOVE_ARTICLE]: a jumper

[DONT_REMOVE_ARTICLE]: a jungle

[DONT_REMOVE_ARTICLE]: a junior

[DONT_REMOVE_ARTICLE]: a junk

[DONT_REMOVE_ARTICLE]: a jury

[DONT_REMOVE_ARTICLE]: a justice

[DONT_REMOVE_ARTICLE]: a justification
[DONT_REMOVE_ARTICLE]: A nail

[DONT_REMOVE_ARTICLE]: A name

[DONT_REMOVE_ARTICLE]: A napkin

[DONT_REMOVE_ARTICLE]: A narwhal

[DONT_REMOVE_ARTICLE]: A nation

[DONT_REMOVE_ARTICLE]: A nature

[DONT_REMOVE_ARTICLE]: A necklace

[DONT_REMOVE_ARTICLE]: A nectar

[DONT_REMOVE_ARTICLE]: A needle

[DONT_REMOVE_ARTICLE]: A needlework

[DONT_REMOVE_ARTICLE]: A negotiation

[DONT_REMOVE_ARTICLE]: A neighbor

[DONT_REMOVE_ARTICLE]: A nephew

[DONT_REMOVE_ARTICLE]: A nest

[DONT_REMOVE_ARTICLE]: A net

[DONT_REMOVE_ARTICLE]: A network

[DONT_REMOVE_ARTICLE]: A news

[DONT_REMOVE_ARTICLE]: A newspaper

[DONT_REMOVE_ARTICLE]: A nexus

[DONT_REMOVE_ARTICLE]: A night

[DONT_REMOVE_ARTICLE]: A nightgown

[DONT_REMOVE_ARTICLE]: A nightingale

[DONT_REMOVE_ARTICLE]: A nightmare

[DONT_REMOVE_ARTICLE]: A nipple

[DONT_REMOVE_ARTICLE]: A nitrogen

[DONT_REMOVE_ARTICLE]: A nobility

[DONT_REMOVE_ARTICLE]: A node

[DONT_REMOVE_ARTICLE]: A noise

[DONT_REMOVE_ARTICLE]: A nomad

[DONT_REMOVE_ARTICLE]: A non-fiction

[DONT_REMOVE_ARTICLE]: A nonchalance

[DONT_REMOVE_ARTICLE]: A nonentity

[DONT_REMOVE_ARTICLE]: A nonviolence

[DONT_REMOVE_ARTICLE]: A noodle

[DONT_REMOVE_ARTICLE]: A north

[DONT_REMOVE_ARTICLE]: A nose

[DONT_REMOVE_ARTICLE]: A nostalgia

[DONT_REMOVE_ARTICLE]: A notation

[DONT_REMOVE_ARTICLE]: A notebook

[DONT_REMOVE_ARTICLE]: A nothing

[DONT_REMOVE_ARTICLE]: A notice

[DONT_REMOVE_ARTICLE]: A notion

[DONT_REMOVE_ARTICLE]: A novel

[DONT_REMOVE_ARTICLE]: A novelty

[DONT_REMOVE_ARTICLE]: A novice

[DONT_REMOVE_ARTICLE]: A noxious

[DONT_REMOVE_ARTICLE]: A nozzle

[DONT_REMOVE_ARTICLE]: A nuance

[DONT_REMOVE_ARTICLE]: A nuclear

[DONT_REMOVE_ARTICLE]: A nucleus

[DONT_REMOVE_ARTICLE]: A nudity

[DONT_REMOVE_ARTICLE]: A nuisance

[DONT_REMOVE_ARTICLE]: A nullification

[DONT_REMOVE_ARTICLE]: A number

[DONT_REMOVE_ARTICLE]: A numbness

[DONT_REMOVE_ARTICLE]: A numeracy

[DONT_REMOVE_ARTICLE]: A numerator

[DONT_REMOVE_ARTICLE]: A nurse

[DONT_REMOVE_ARTICLE]: A nursemaid

[DONT_REMOVE_ARTICLE]: A nursery

[DONT_REMOVE_ARTICLE]: A nut

[DONT_REMOVE_ARTICLE]: A nutcase

[DONT_REMOVE_ARTICLE]: A nutcracker

[DONT_REMOVE_ARTICLE]: A nutmeg

[DONT_REMOVE_ARTICLE]: A nutraceutical

[DONT_REMOVE_ARTICLE]: A nutraceuticals

[DONT_REMOVE_ARTICLE]: A nutriment

[DONT_REMOVE_ARTICLE]: A nutrition

[DONT_REMOVE_ARTICLE]: A nutritionist

[DONT_REMOVE_ARTICLE]: A nutritions

[DONT_REMOVE_ARTICLE]: A nutshells

[DONT_REMOVE_ARTICLE]: A nylon

[DONT_REMOVE_ARTICLE]: A nymph

[DONT_REMOVE_ARTICLE]: a yacht

[DONT_REMOVE_ARTICLE]: a yard

[DONT_REMOVE_ARTICLE]: a year

[DONT_REMOVE_ARTICLE]: a yeast

[DONT_REMOVE_ARTICLE]: a yell

[DONT_REMOVE_ARTICLE]: a yellow

[DONT_REMOVE_ARTICLE]: a yen

[DONT_REMOVE_ARTICLE]: a yield

[DONT_REMOVE_ARTICLE]: a yoga

[DONT_REMOVE_ARTICLE]: a yogurt

[DONT_REMOVE_ARTICLE]: a yolk

[DONT_REMOVE_ARTICLE]: a youngster

[DONT_REMOVE_ARTICLE]: a youth

[DONT_REMOVE_ARTICLE]: a yowl
[DONT_REMOVE_ARTICLE]: The ladder

[DONT_REMOVE_ARTICLE]: The lady

[DONT_REMOVE_ARTICLE]: The ladybug

[DONT_REMOVE_ARTICLE]: The lagoon

[DONT_REMOVE_ARTICLE]: The lake

[DONT_REMOVE_ARTICLE]: The lamb

[DONT_REMOVE_ARTICLE]: The lamp

[DONT_REMOVE_ARTICLE]: The land

[DONT_REMOVE_ARTICLE]: The landmark

[DONT_REMOVE_ARTICLE]: The lane

[DONT_REMOVE_ARTICLE]: The language

[DONT_REMOVE_ARTICLE]: The lantern

[DONT_REMOVE_ARTICLE]: The lap

[DONT_REMOVE_ARTICLE]: The lapel

[DONT_REMOVE_ARTICLE]: The laptop

[DONT_REMOVE_ARTICLE]: The lard

[DONT_REMOVE_ARTICLE]: The laser

[DONT_REMOVE_ARTICLE]: The lattice

[DONT_REMOVE_ARTICLE]: The laughter

[DONT_REMOVE_ARTICLE]: The laundry

[DONT_REMOVE_ARTICLE]: The lavender

[DONT_REMOVE_ARTICLE]: The law

[DONT_REMOVE_ARTICLE]: The lawsuit

[DONT_REMOVE_ARTICLE]: The lawyer

[DONT_REMOVE_ARTICLE]: The layer

[DONT_REMOVE_ARTICLE]: The layout

[DONT_REMOVE_ARTICLE]: The leader

[DONT_REMOVE_ARTICLE]: The leadership

[DONT_REMOVE_ARTICLE]: The leaf

[DONT_REMOVE_ARTICLE]: The leaflet

[DONT_REMOVE_ARTICLE]: The league

[DONT_REMOVE_ARTICLE]: The leakage

[DONT_REMOVE_ARTICLE]: The lean

[DONT_REMOVE_ARTICLE]: The leap

[DONT_REMOVE_ARTICLE]: The learning

[DONT_REMOVE_ARTICLE]: The lease

[DONT_REMOVE_ARTICLE]: The leather

[DONT_REMOVE_ARTICLE]: The lecture

[DONT_REMOVE_ARTICLE]: The lecturer

[DONT_REMOVE_ARTICLE]: The leg

[DONT_REMOVE_ARTICLE]: The legacy

[DONT_REMOVE_ARTICLE]: The legend

[DONT_REMOVE_ARTICLE]: The leisure

[DONT_REMOVE_ARTICLE]: The lemon

[DONT_REMOVE_ARTICLE]: The length

[DONT_REMOVE_ARTICLE]: The lens

[DONT_REMOVE_ARTICLE]: The leopard

[DONT_REMOVE_ARTICLE]: The letter

[DONT_REMOVE_ARTICLE]: The level

[DONT_REMOVE_ARTICLE]: The liability

[DONT_REMOVE_ARTICLE]: The library

[DONT_REMOVE_ARTICLE]: The license

[DONT_REMOVE_ARTICLE]: The life

[DONT_REMOVE_ARTICLE]: The lift

[DONT_REMOVE_ARTICLE]: The light

[DONT_REMOVE_ARTICLE]: The lightning

[DONT_REMOVE_ARTICLE]: The likelihood

[DONT_REMOVE_ARTICLE]: The limb

[DONT_REMOVE_ARTICLE]: The lime

[DONT_REMOVE_ARTICLE]: The limit

[DONT_REMOVE_ARTICLE]: The line

[DONT_REMOVE_ARTICLE]: The link

[DONT_REMOVE_ARTICLE]: The lion

[DONT_REMOVE_ARTICLE]: The lip

[DONT_REMOVE_ARTICLE]: The liquid

[DONT_REMOVE_ARTICLE]: The list

[DONT_REMOVE_ARTICLE]: The listener

[DONT_REMOVE_ARTICLE]: The literature

[DONT_REMOVE_ARTICLE]: The litter

[DONT_REMOVE_ARTICLE]: The liver

[DONT_REMOVE_ARTICLE]: The living

[DONT_REMOVE_ARTICLE]: The lizard

[DONT_REMOVE_ARTICLE]: The load

[DONT_REMOVE_ARTICLE]: The loan

[DONT_REMOVE_ARTICLE]: The lobby

[DONT_REMOVE_ARTICLE]: The location

[DONT_REMOVE_ARTICLE]: The lock

[DONT_REMOVE_ARTICLE]: The logic

[DONT_REMOVE_ARTICLE]: The loneliness

[DONT_REMOVE_ARTICLE]: The long-term

[DONT_REMOVE_ARTICLE]: The look

[DONT_REMOVE_ARTICLE]: The loop

[DONT_REMOVE_ARTICLE]: The lord

[DONT_REMOVE_ARTICLE]: The loss

[DONT_REMOVE_ARTICLE]: The lot

[DONT_REMOVE_ARTICLE]: The lottery

[DONT_REMOVE_ARTICLE]: The lounge

[DONT_REMOVE_ARTICLE]: The love

[DONT_REMOVE_ARTICLE]: The lover

[DONT_REMOVE_ARTICLE]: The loyalty

[DONT_REMOVE_ARTICLE]: The luck

[DONT_REMOVE_ARTICLE]: The luggage

[DONT_REMOVE_ARTICLE]: The lumber

[DONT_REMOVE_ARTICLE]: The lunch

[DONT_REMOVE_ARTICLE]: The lung

[DONT_REMOVE_ARTICLE]: The luxury

[DONT_REMOVE_ARTICLE]: The lyric

[DONT_REMOVE_ARTICLE]: a face

[DONT_REMOVE_ARTICLE]: a factory

[DONT_REMOVE_ARTICLE]: a faith

[DONT_REMOVE_ARTICLE]: a family

[DONT_REMOVE_ARTICLE]: a fan

[DONT_REMOVE_ARTICLE]: a farm

[DONT_REMOVE_ARTICLE]: a fashion

[DONT_REMOVE_ARTICLE]: a father

[DONT_REMOVE_ARTICLE]: a fault

[DONT_REMOVE_ARTICLE]: a fear

[DONT_REMOVE_ARTICLE]: a feather

[DONT_REMOVE_ARTICLE]: a feature

[DONT_REMOVE_ARTICLE]: a fee

[DONT_REMOVE_ARTICLE]: a feed

[DONT_REMOVE_ARTICLE]: a feeling

[DONT_REMOVE_ARTICLE]: a female

[DONT_REMOVE_ARTICLE]: a fence

[DONT_REMOVE_ARTICLE]: a festival

[DONT_REMOVE_ARTICLE]: a fiber

[DONT_REMOVE_ARTICLE]: a fiction

[DONT_REMOVE_ARTICLE]: a field

[DONT_REMOVE_ARTICLE]: a figure

[DONT_REMOVE_ARTICLE]: a file

[DONT_REMOVE_ARTICLE]: a film

[DONT_REMOVE_ARTICLE]: a filter

[DONT_REMOVE_ARTICLE]: a finance

[DONT_REMOVE_ARTICLE]: a finger

[DONT_REMOVE_ARTICLE]: a finish

[DONT_REMOVE_ARTICLE]: a fire

[DONT_REMOVE_ARTICLE]: a fireman

[DONT_REMOVE_ARTICLE]: a firm

[DONT_REMOVE_ARTICLE]: a fish

[DONT_REMOVE_ARTICLE]: a fisherman

[DONT_REMOVE_ARTICLE]: a fist

[DONT_REMOVE_ARTICLE]: a fitness

[DONT_REMOVE_ARTICLE]: a flag

[DONT_REMOVE_ARTICLE]: a flame

[DONT_REMOVE_ARTICLE]: a flavor

[DONT_REMOVE_ARTICLE]: a fleet

[DONT_REMOVE_ARTICLE]: a flight

[DONT_REMOVE_ARTICLE]: a flood

[DONT_REMOVE_ARTICLE]: a floor

[DONT_REMOVE_ARTICLE]: a flour

[DONT_REMOVE_ARTICLE]: a flower

[DONT_REMOVE_ARTICLE]: a flowerpot

[DONT_REMOVE_ARTICLE]: a flu

[DONT_REMOVE_ARTICLE]: a fluid

[DONT_REMOVE_ARTICLE]: a fly

[DONT_REMOVE_ARTICLE]: a foam

[DONT_REMOVE_ARTICLE]: a focus

[DONT_REMOVE_ARTICLE]: a fog

[DONT_REMOVE_ARTICLE]: a fold

[DONT_REMOVE_ARTICLE]: a folk

[DONT_REMOVE_ARTICLE]: a food

[DONT_REMOVE_ARTICLE]: a fool

[DONT_REMOVE_ARTICLE]: a foot

[DONT_REMOVE_ARTICLE]: a footstep

[DONT_REMOVE_ARTICLE]: a force

[DONT_REMOVE_ARTICLE]: a forecast

[DONT_REMOVE_ARTICLE]: a forehead

[DONT_REMOVE_ARTICLE]: a forest

[DONT_REMOVE_ARTICLE]: a fork

[DONT_REMOVE_ARTICLE]: a forklift

[DONT_REMOVE_ARTICLE]: a form

[DONT_REMOVE_ARTICLE]: a format

[DONT_REMOVE_ARTICLE]: a formula

[DONT_REMOVE_ARTICLE]: a fortune

[DONT_REMOVE_ARTICLE]: a forum

[DONT_REMOVE_ARTICLE]: a fossil

[DONT_REMOVE_ARTICLE]: a foundation

[DONT_REMOVE_ARTICLE]: a fountain

[DONT_REMOVE_ARTICLE]: a fox

[DONT_REMOVE_ARTICLE]: a foxhound

[DONT_REMOVE_ARTICLE]: a fraction

[DONT_REMOVE_ARTICLE]: a frame

[DONT_REMOVE_ARTICLE]: a framework

[DONT_REMOVE_ARTICLE]: a fraud

[DONT_REMOVE_ARTICLE]: a freedom

[DONT_REMOVE_ARTICLE]: a freezer

[DONT_REMOVE_ARTICLE]: a frequency

[DONT_REMOVE_ARTICLE]: a fridge

[DONT_REMOVE_ARTICLE]: a friend

[DONT_REMOVE_ARTICLE]: a friendliness

[DONT_REMOVE_ARTICLE]: a frog

[DONT_REMOVE_ARTICLE]: a frogman

[DONT_REMOVE_ARTICLE]: a front

[DONT_REMOVE_ARTICLE]: a frost

[DONT_REMOVE_ARTICLE]: a fruit

[DONT_REMOVE_ARTICLE]: a fruitcake

[DONT_REMOVE_ARTICLE]: a fuel

[DONT_REMOVE_ARTICLE]: a fulfillment

[DONT_REMOVE_ARTICLE]: a fullback

[DONT_REMOVE_ARTICLE]: a function

[DONT_REMOVE_ARTICLE]: a fund

[DONT_REMOVE_ARTICLE]: a funeral

[DONT_REMOVE_ARTICLE]: a fungus

[DONT_REMOVE_ARTICLE]: a furniture

[DONT_REMOVE_ARTICLE]: a furnituremaker

[DONT_REMOVE_ARTICLE]: a fury

[DONT_REMOVE_ARTICLE]: a fuse

[DONT_REMOVE_ARTICLE]: a fuss.
[DONT_REMOVE_ARTICLE]: an iceberg

[DONT_REMOVE_ARTICLE]: an idea

[DONT_REMOVE_ARTICLE]: an idol

[DONT_REMOVE_ARTICLE]: an igloo

[DONT_REMOVE_ARTICLE]: an iguana

[DONT_REMOVE_ARTICLE]: an illusion

[DONT_REMOVE_ARTICLE]: an image

[DONT_REMOVE_ARTICLE]: an inch

[DONT_REMOVE_ARTICLE]: an infection

[DONT_REMOVE_ARTICLE]: an inmate

[DONT_REMOVE_ARTICLE]: an inspector

[DONT_REMOVE_ARTICLE]: an instructor

[DONT_REMOVE_ARTICLE]: an instrument

[DONT_REMOVE_ARTICLE]: an intake

[DONT_REMOVE_ARTICLE]: an intersection

[DONT_REMOVE_ARTICLE]: an interview

[DONT_REMOVE_ARTICLE]: an investor

[DONT_REMOVE_ARTICLE]: an invitation

[DONT_REMOVE_ARTICLE]: an invoice

[DONT_REMOVE_ARTICLE]: an iris

[DONT_REMOVE_ARTICLE]: an iron

[DONT_REMOVE_ARTICLE]: an island

[DONT_REMOVE_ARTICLE]: an issue

[DONT_REMOVE_ARTICLE]: an item

[DONT_REMOVE_ARTICLE]: an itinerary

[DONT_REMOVE_ARTICLE]: an ivory

[DONT_REMOVE_ARTICLE]: an ivy
[DONT_REMOVE_ARTICLE]: an object

[DONT_REMOVE_ARTICLE]: an obligation

[DONT_REMOVE_ARTICLE]: an observation

[DONT_REMOVE_ARTICLE]: an obstacle

[DONT_REMOVE_ARTICLE]: an occasion

[DONT_REMOVE_ARTICLE]: an occupation

[DONT_REMOVE_ARTICLE]: an ocean

[DONT_REMOVE_ARTICLE]: an offer

[DONT_REMOVE_ARTICLE]: an office

[DONT_REMOVE_ARTICLE]: an officer

[DONT_REMOVE_ARTICLE]: an offspring

[DONT_REMOVE_ARTICLE]: an oil

[DONT_REMOVE_ARTICLE]: an onion

[DONT_REMOVE_ARTICLE]: an opening

[DONT_REMOVE_ARTICLE]: an opera

[DONT_REMOVE_ARTICLE]: an operation

[DONT_REMOVE_ARTICLE]: an operator

[DONT_REMOVE_ARTICLE]: an opinion

[DONT_REMOVE_ARTICLE]: an opportunity

[DONT_REMOVE_ARTICLE]: an opposition

[DONT_REMOVE_ARTICLE]: an option

[DONT_REMOVE_ARTICLE]: an orange

[DONT_REMOVE_ARTICLE]: an orbit

[DONT_REMOVE_ARTICLE]: an orchestra

[DONT_REMOVE_ARTICLE]: an order

[DONT_REMOVE_ARTICLE]: an organization

[DONT_REMOVE_ARTICLE]: an origin

[DONT_REMOVE_ARTICLE]: an outcome

[DONT_REMOVE_ARTICLE]: an outlet

[DONT_REMOVE_ARTICLE]: an outline

[DONT_REMOVE_ARTICLE]: an oven

[DONT_REMOVE_ARTICLE]: an owner

[DONT_REMOVE_ARTICLE]: an ox
[DONT_REMOVE_ARTICLE]: The paper

[DONT_REMOVE_ARTICLE]: The passenger

[DONT_REMOVE_ARTICLE]: The pattern

[DONT_REMOVE_ARTICLE]: The peace

[DONT_REMOVE_ARTICLE]: The peak

[DONT_REMOVE_ARTICLE]: The pearl

[DONT_REMOVE_ARTICLE]: The peasant

[DONT_REMOVE_ARTICLE]: The pedestal

[DONT_REMOVE_ARTICLE]: The peer

[DONT_REMOVE_ARTICLE]: The pen

[DONT_REMOVE_ARTICLE]: The pencil

[DONT_REMOVE_ARTICLE]: The pension

[DONT_REMOVE_ARTICLE]: The perception

[DONT_REMOVE_ARTICLE]: The performance

[DONT_REMOVE_ARTICLE]: The perfume

[DONT_REMOVE_ARTICLE]: The period

[DONT_REMOVE_ARTICLE]: The permission

[DONT_REMOVE_ARTICLE]: The personality

[DONT_REMOVE_ARTICLE]: The perspective

[DONT_REMOVE_ARTICLE]: The pet

[DONT_REMOVE_ARTICLE]: The pharmacy

[DONT_REMOVE_ARTICLE]: The phenomenon

[DONT_REMOVE_ARTICLE]: The philosophy

[DONT_REMOVE_ARTICLE]: The phone

[DONT_REMOVE_ARTICLE]: The photographer

[DONT_REMOVE_ARTICLE]: The photography

[DONT_REMOVE_ARTICLE]: The physics

[DONT_REMOVE_ARTICLE]: The piano

[DONT_REMOVE_ARTICLE]: The pick

[DONT_REMOVE_ARTICLE]: The picnic

[DONT_REMOVE_ARTICLE]: The picture

[DONT_REMOVE_ARTICLE]: The pie

[DONT_REMOVE_ARTICLE]: The pig

[DONT_REMOVE_ARTICLE]: The pillow

[DONT_REMOVE_ARTICLE]: The pilot

[DONT_REMOVE_ARTICLE]: The pin

[DONT_REMOVE_ARTICLE]: The pine

[DONT_REMOVE_ARTICLE]: The pink

[DONT_REMOVE_ARTICLE]: The pipe

[DONT_REMOVE_ARTICLE]: The pirate

[DONT_REMOVE_ARTICLE]: The pit

[DONT_REMOVE_ARTICLE]: The pitch

[DONT_REMOVE_ARTICLE]: The pizza

[DONT_REMOVE_ARTICLE]: The place

[DONT_REMOVE_ARTICLE]: The plain

[DONT_REMOVE_ARTICLE]: The plane

[DONT_REMOVE_ARTICLE]: The planet

[DONT_REMOVE_ARTICLE]: The planetarium

[DONT_REMOVE_ARTICLE]: The plank

[DONT_REMOVE_ARTICLE]: The plant

[DONT_REMOVE_ARTICLE]: The plastic

[DONT_REMOVE_ARTICLE]: The plate

[DONT_REMOVE_ARTICLE]: The platform

[DONT_REMOVE_ARTICLE]: The platinum

[DONT_REMOVE_ARTICLE]: The play

[DONT_REMOVE_ARTICLE]: The player

[DONT_REMOVE_ARTICLE]: The playground

[DONT_REMOVE_ARTICLE]: The plea

[DONT_REMOVE_ARTICLE]: The pleasure

[DONT_REMOVE_ARTICLE]: The pledge

[DONT_REMOVE_ARTICLE]: The pliers

[DONT_REMOVE_ARTICLE]: The plot

[DONT_REMOVE_ARTICLE]: The plow

[DONT_REMOVE_ARTICLE]: The plug

[DONT_REMOVE_ARTICLE]: The plumber

[DONT_REMOVE_ARTICLE]: The plural

[DONT_REMOVE_ARTICLE]: The pocket

[DONT_REMOVE_ARTICLE]: The poem

[DONT_REMOVE_ARTICLE]: The poet

[DONT_REMOVE_ARTICLE]: The point

[DONT_REMOVE_ARTICLE]: The poison

[DONT_REMOVE_ARTICLE]: The police

[DONT_REMOVE_ARTICLE]: The pool

[DONT_REMOVE_ARTICLE]: The popcorn

[DONT_REMOVE_ARTICLE]: The potato

[DONT_REMOVE_ARTICLE]: The power

[DONT_REMOVE_ARTICLE]: The price

[DONT_REMOVE_ARTICLE]: The prince

[DONT_REMOVE_ARTICLE]: The princess

[DONT_REMOVE_ARTICLE]: The problem

[DONT_REMOVE_ARTICLE]: The profession

[DONT_REMOVE_ARTICLE]: The professor

[DONT_REMOVE_ARTICLE]: The program

[DONT_REMOVE_ARTICLE]: The progress

[DONT_REMOVE_ARTICLE]: The project

[DONT_REMOVE_ARTICLE]: The property

[DONT_REMOVE_ARTICLE]: The proposal

[DONT_REMOVE_ARTICLE]: The prospect

[DONT_REMOVE_ARTICLE]: The publication

[DONT_REMOVE_ARTICLE]: The publisher

[DONT_REMOVE_ARTICLE]: The pulse

[DONT_REMOVE_ARTICLE]: The punishment

[DONT_REMOVE_ARTICLE]: The puzzle

[DONT_REMOVE_ARTICLE]: The pyramid

[DONT_REMOVE_ARTICLE]: The python

[DONT_REMOVE_ARTICLE]: a waffle

[DONT_REMOVE_ARTICLE]: a waist

[DONT_REMOVE_ARTICLE]: a waiter

[DONT_REMOVE_ARTICLE]: a waitress

[DONT_REMOVE_ARTICLE]: a wake

[DONT_REMOVE_ARTICLE]: a walk

[DONT_REMOVE_ARTICLE]: a walker

[DONT_REMOVE_ARTICLE]: a wall

[DONT_REMOVE_ARTICLE]: a wallaby

[DONT_REMOVE_ARTICLE]: a wallet

[DONT_REMOVE_ARTICLE]: a walnut

[DONT_REMOVE_ARTICLE]: a wand

[DONT_REMOVE_ARTICLE]: a wardrobe

[DONT_REMOVE_ARTICLE]: a warlock

[DONT_REMOVE_ARTICLE]: a warrior

[DONT_REMOVE_ARTICLE]: a wasp

[DONT_REMOVE_ARTICLE]: a waste

[DONT_REMOVE_ARTICLE]: a watch

[DONT_REMOVE_ARTICLE]: a watchman

[DONT_REMOVE_ARTICLE]: a water

[DONT_REMOVE_ARTICLE]: a watermelon

[DONT_REMOVE_ARTICLE]: a wave

[DONT_REMOVE_ARTICLE]: a wavelet

[DONT_REMOVE_ARTICLE]: a wax

[DONT_REMOVE_ARTICLE]: a way

[DONT_REMOVE_ARTICLE]: a wayfarer

[DONT_REMOVE_ARTICLE]: a weakness

[DONT_REMOVE_ARTICLE]: a weasel

[DONT_REMOVE_ARTICLE]: a web

[DONT_REMOVE_ARTICLE]: a webbing

[DONT_REMOVE_ARTICLE]: a wedding

[DONT_REMOVE_ARTICLE]: a weed

[DONT_REMOVE_ARTICLE]: a week

[DONT_REMOVE_ARTICLE]: a weight

[DONT_REMOVE_ARTICLE]: a weightlifter

[DONT_REMOVE_ARTICLE]: a welder

[DONT_REMOVE_ARTICLE]: a well

[DONT_REMOVE_ARTICLE]: a werewolf

[DONT_REMOVE_ARTICLE]: a west

[DONT_REMOVE_ARTICLE]: a wetland

[DONT_REMOVE_ARTICLE]: a whale

[DONT_REMOVE_ARTICLE]: a wheat

[DONT_REMOVE_ARTICLE]: a wheel

[DONT_REMOVE_ARTICLE]: a wheelbarrow

[DONT_REMOVE_ARTICLE]: a wheelchair

[DONT_REMOVE_ARTICLE]: a whip

[DONT_REMOVE_ARTICLE]: a whistle

[DONT_REMOVE_ARTICLE]: a whistle-blower

[DONT_REMOVE_ARTICLE]: a whiteboard

[DONT_REMOVE_ARTICLE]: a widow

[DONT_REMOVE_ARTICLE]: a width

[DONT_REMOVE_ARTICLE]: a wife

[DONT_REMOVE_ARTICLE]: a wig

[DONT_REMOVE_ARTICLE]: a wildcat

[DONT_REMOVE_ARTICLE]: a wilderness

[DONT_REMOVE_ARTICLE]: a will

[DONT_REMOVE_ARTICLE]: a willow

[DONT_REMOVE_ARTICLE]: a wind

[DONT_REMOVE_ARTICLE]: a windmill

[DONT_REMOVE_ARTICLE]: a window

[DONT_REMOVE_ARTICLE]: a windowpane

[DONT_REMOVE_ARTICLE]: a wine

[DONT_REMOVE_ARTICLE]: a wineglass

[DONT_REMOVE_ARTICLE]: a wing

[DONT_REMOVE_ARTICLE]: a wingman

[DONT_REMOVE_ARTICLE]: a winner

[DONT_REMOVE_ARTICLE]: a winter

[DONT_REMOVE_ARTICLE]: a wire

[DONT_REMOVE_ARTICLE]: a wiretap

[DONT_REMOVE_ARTICLE]: a witch

[DONT_REMOVE_ARTICLE]: a witchcraft

[DONT_REMOVE_ARTICLE]: a witness

[DONT_REMOVE_ARTICLE]: a wolf

[DONT_REMOVE_ARTICLE]: a woman

[DONT_REMOVE_ARTICLE]: a womanizer

[DONT_REMOVE_ARTICLE]: a wood

[DONT_REMOVE_ARTICLE]: a woodpecker

[DONT_REMOVE_ARTICLE]: a wool

[DONT_REMOVE_ARTICLE]: a word

[DONT_REMOVE_ARTICLE]: a wordplay

[DONT_REMOVE_ARTICLE]: a work

[DONT_REMOVE_ARTICLE]: a workbench

[DONT_REMOVE_ARTICLE]: a world

[DONT_REMOVE_ARTICLE]: a worry

[DONT_REMOVE_ARTICLE]: a worrywart

[DONT_REMOVE_ARTICLE]: a worth

[DONT_REMOVE_ARTICLE]: a worthiness

[DONT_REMOVE_ARTICLE]: a wound

[DONT_REMOVE_ARTICLE]: a wrist

[DONT_REMOVE_ARTICLE]: a wristwatch

[DONT_REMOVE_ARTICLE]: a writer

[DONT_REMOVE_ARTICLE]: a wrong

[DONT_REMOVE_ARTICLE]: a wrongdoer

[DONT_REMOVE_ARTICLE]: a wunderkind.
[DONT_REMOVE_ARTICLE]: The machine

[DONT_REMOVE_ARTICLE]: The magazine

[DONT_REMOVE_ARTICLE]: The man

[DONT_REMOVE_ARTICLE]: The mansion

[DONT_REMOVE_ARTICLE]: The map

[DONT_REMOVE_ARTICLE]: The marriage

[DONT_REMOVE_ARTICLE]: The masterpiece

[DONT_REMOVE_ARTICLE]: The material

[DONT_REMOVE_ARTICLE]: The meal

[DONT_REMOVE_ARTICLE]: The measurement

[DONT_REMOVE_ARTICLE]: The mechanic

[DONT_REMOVE_ARTICLE]: The medicine

[DONT_REMOVE_ARTICLE]: The melody

[DONT_REMOVE_ARTICLE]: The member

[DONT_REMOVE_ARTICLE]: The memory

[DONT_REMOVE_ARTICLE]: The merchandise

[DONT_REMOVE_ARTICLE]: The message

[DONT_REMOVE_ARTICLE]: The messenger

[DONT_REMOVE_ARTICLE]: The method

[DONT_REMOVE_ARTICLE]: The mind

[DONT_REMOVE_ARTICLE]: The miracle

[DONT_REMOVE_ARTICLE]: The mission

[DONT_REMOVE_ARTICLE]: The mistake

[DONT_REMOVE_ARTICLE]: The moment

[DONT_REMOVE_ARTICLE]: The month

[DONT_REMOVE_ARTICLE]: The mood

[DONT_REMOVE_ARTICLE]: The moon

[DONT_REMOVE_ARTICLE]: The morning

[DONT_REMOVE_ARTICLE]: The mother

[DONT_REMOVE_ARTICLE]: The mountain

[DONT_REMOVE_ARTICLE]: The movement

[DONT_REMOVE_ARTICLE]: The movie

[DONT_REMOVE_ARTICLE]: The muscle

[DONT_REMOVE_ARTICLE]: The music

[DONT_REMOVE_ARTICLE]: The mystery

[DONT_REMOVE_ARTICLE]: a badge

[DONT_REMOVE_ARTICLE]: a bag

[DONT_REMOVE_ARTICLE]: a bakery

[DONT_REMOVE_ARTICLE]: a ball

[DONT_REMOVE_ARTICLE]: a banana

[DONT_REMOVE_ARTICLE]: a bass

[DONT_REMOVE_ARTICLE]: a bay

[DONT_REMOVE_ARTICLE]: a beach

[DONT_REMOVE_ARTICLE]: a beard

[DONT_REMOVE_ARTICLE]: a bed

[DONT_REMOVE_ARTICLE]: a beetle

[DONT_REMOVE_ARTICLE]: a bell

[DONT_REMOVE_ARTICLE]: a bench

[DONT_REMOVE_ARTICLE]: a berry

[DONT_REMOVE_ARTICLE]: a beverage

[DONT_REMOVE_ARTICLE]: a bib

[DONT_REMOVE_ARTICLE]: a bike

[DONT_REMOVE_ARTICLE]: a bird

[DONT_REMOVE_ARTICLE]: a biscuit

[DONT_REMOVE_ARTICLE]: a blade

[DONT_REMOVE_ARTICLE]: a blanket

[DONT_REMOVE_ARTICLE]: a blood

[DONT_REMOVE_ARTICLE]: a bloom

[DONT_REMOVE_ARTICLE]: a blouse

[DONT_REMOVE_ARTICLE]: a board

[DONT_REMOVE_ARTICLE]: a boat

[DONT_REMOVE_ARTICLE]: a body

[DONT_REMOVE_ARTICLE]: a bone

[DONT_REMOVE_ARTICLE]: a book

[DONT_REMOVE_ARTICLE]: a bookcase

[DONT_REMOVE_ARTICLE]: a boot

[DONT_REMOVE_ARTICLE]: a border

[DONT_REMOVE_ARTICLE]: a bottle

[DONT_REMOVE_ARTICLE]: a bowl

[DONT_REMOVE_ARTICLE]: a box

[DONT_REMOVE_ARTICLE]: a boy

[DONT_REMOVE_ARTICLE]: a brain

[DONT_REMOVE_ARTICLE]: a brake

[DONT_REMOVE_ARTICLE]: a branch

[DONT_REMOVE_ARTICLE]: a brass

[DONT_REMOVE_ARTICLE]: a bread

[DONT_REMOVE_ARTICLE]: a breakfast

[DONT_REMOVE_ARTICLE]: a brick

[DONT_REMOVE_ARTICLE]: a bride

[DONT_REMOVE_ARTICLE]: a bridge

[DONT_REMOVE_ARTICLE]: a broccoli

[DONT_REMOVE_ARTICLE]: a broom

[DONT_REMOVE_ARTICLE]: a brother

[DONT_REMOVE_ARTICLE]: a brush

[DONT_REMOVE_ARTICLE]: a bubble

[DONT_REMOVE_ARTICLE]: a bucket

[DONT_REMOVE_ARTICLE]: a bud

[DONT_REMOVE_ARTICLE]: a buffalo

[DONT_REMOVE_ARTICLE]: a bug

[DONT_REMOVE_ARTICLE]: a building

[DONT_REMOVE_ARTICLE]: a bulb

[DONT_REMOVE_ARTICLE]: a bull

[DONT_REMOVE_ARTICLE]: a bullet

[DONT_REMOVE_ARTICLE]: a bun

[DONT_REMOVE_ARTICLE]: a bus

[DONT_REMOVE_ARTICLE]: a bush

[DONT_REMOVE_ARTICLE]: a business

[DONT_REMOVE_ARTICLE]: a butter

[DONT_REMOVE_ARTICLE]: a butterfly

[DONT_REMOVE_ARTICLE]: a button

[DONT_REMOVE_ARTICLE]: a buyer

[DONT_REMOVE_ARTICLE]: a byte
[DONT_REMOVE_ARTICLE]: Teddy bear

[DONT_REMOVE_ARTICLE]: Tennis ball

[DONT_REMOVE_ARTICLE]: Tennis racket

[DONT_REMOVE_ARTICLE]: a daisy

[DONT_REMOVE_ARTICLE]: a dam

[DONT_REMOVE_ARTICLE]: a dancer

[DONT_REMOVE_ARTICLE]: a dart

[DONT_REMOVE_ARTICLE]: a data

[DONT_REMOVE_ARTICLE]: a daydream

[DONT_REMOVE_ARTICLE]: a deadline

[DONT_REMOVE_ARTICLE]: a deal

[DONT_REMOVE_ARTICLE]: a debate

[DONT_REMOVE_ARTICLE]: a debt

[DONT_REMOVE_ARTICLE]: a decade

[DONT_REMOVE_ARTICLE]: a decoration

[DONT_REMOVE_ARTICLE]: a dedication

[DONT_REMOVE_ARTICLE]: a deer

[DONT_REMOVE_ARTICLE]: a deficiency

[DONT_REMOVE_ARTICLE]: a definition

[DONT_REMOVE_ARTICLE]: a delivery

[DONT_REMOVE_ARTICLE]: a democracy

[DONT_REMOVE_ARTICLE]: a demonstration

[DONT_REMOVE_ARTICLE]: a dentist

[DONT_REMOVE_ARTICLE]: a depression

[DONT_REMOVE_ARTICLE]: a desert

[DONT_REMOVE_ARTICLE]: a design

[DONT_REMOVE_ARTICLE]: a desire

[DONT_REMOVE_ARTICLE]: a desk

[DONT_REMOVE_ARTICLE]: a detective

[DONT_REMOVE_ARTICLE]: a development

[DONT_REMOVE_ARTICLE]: a device

[DONT_REMOVE_ARTICLE]: a devil

[DONT_REMOVE_ARTICLE]: a diamond

[DONT_REMOVE_ARTICLE]: a dictionary

[DONT_REMOVE_ARTICLE]: a diet

[DONT_REMOVE_ARTICLE]: a difference

[DONT_REMOVE_ARTICLE]: a difficulty

[DONT_REMOVE_ARTICLE]: a digression

[DONT_REMOVE_ARTICLE]: a dilemma

[DONT_REMOVE_ARTICLE]: a dime

[DONT_REMOVE_ARTICLE]: a dimension

[DONT_REMOVE_ARTICLE]: a dinner

[DONT_REMOVE_ARTICLE]: a dinosaur

[DONT_REMOVE_ARTICLE]: a diploma

[DONT_REMOVE_ARTICLE]: a direction

[DONT_REMOVE_ARTICLE]: a director

[DONT_REMOVE_ARTICLE]: a dirt

[DONT_REMOVE_ARTICLE]: a disability

[DONT_REMOVE_ARTICLE]: a disaster

[DONT_REMOVE_ARTICLE]: a discovery

[DONT_REMOVE_ARTICLE]: a discussion

[DONT_REMOVE_ARTICLE]: a disease

[DONT_REMOVE_ARTICLE]: a dish

[DONT_REMOVE_ARTICLE]: a disk

[DONT_REMOVE_ARTICLE]: a dismissal

[DONT_REMOVE_ARTICLE]: a display

[DONT_REMOVE_ARTICLE]: a distance

[DONT_REMOVE_ARTICLE]: a distribution

[DONT_REMOVE_ARTICLE]: a district

[DONT_REMOVE_ARTICLE]: a diversity

[DONT_REMOVE_ARTICLE]: a division

[DONT_REMOVE_ARTICLE]: a divorce

[DONT_REMOVE_ARTICLE]: a doctor

[DONT_REMOVE_ARTICLE]: a document

[DONT_REMOVE_ARTICLE]: a dog

[DONT_REMOVE_ARTICLE]: a dogma

[DONT_REMOVE_ARTICLE]: a doll

[DONT_REMOVE_ARTICLE]: a dolphin

[DONT_REMOVE_ARTICLE]: a domain

[DONT_REMOVE_ARTICLE]: a donation

[DONT_REMOVE_ARTICLE]: a donkey

[DONT_REMOVE_ARTICLE]: a door

[DONT_REMOVE_ARTICLE]: a dose

[DONT_REMOVE_ARTICLE]: a dot

[DONT_REMOVE_ARTICLE]: a doubt

[DONT_REMOVE_ARTICLE]: a doughnut

[DONT_REMOVE_ARTICLE]: a dozen

[DONT_REMOVE_ARTICLE]: a dragon

[DONT_REMOVE_ARTICLE]: a drama

[DONT_REMOVE_ARTICLE]: a drawer

[DONT_REMOVE_ARTICLE]: a dream

[DONT_REMOVE_ARTICLE]: a dress

[DONT_REMOVE_ARTICLE]: a drift

[DONT_REMOVE_ARTICLE]: a drill

[DONT_REMOVE_ARTICLE]: a drink

[DONT_REMOVE_ARTICLE]: a drive

[DONT_REMOVE_ARTICLE]: a driver

[DONT_REMOVE_ARTICLE]: a drop

[DONT_REMOVE_ARTICLE]: a drug

[DONT_REMOVE_ARTICLE]: a drum

[DONT_REMOVE_ARTICLE]: a duck

[DONT_REMOVE_ARTICLE]: a due

[DONT_REMOVE_ARTICLE]: a duke

[DONT_REMOVE_ARTICLE]: a dumbbell

[DONT_REMOVE_ARTICLE]: a dump

[DONT_REMOVE_ARTICLE]: a dungeon

[DONT_REMOVE_ARTICLE]: a duration

[DONT_REMOVE_ARTICLE]: a dust

[DONT_REMOVE_ARTICLE]: a duty

[DONT_REMOVE_ARTICLE]: a dwarf

[DONT_REMOVE_ARTICLE]: a dynamic

[DONT_REMOVE_ARTICLE]: a dynasty
[CREATE_ALL_CSV]
  [CREATE_CSV] File data/french_english/nouns/csv/c.csv
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['Kaleidoscope', 'Kangaroo', 'Karaoke', 'Karma', 'Kayak', 'Kebab', 'Keel', 'Keenness', 'Keep', 'Keeper']
        [API_ANSWER] ['[["Kaleidoscope", "Kaléidoscope", "B2", 3],', ' ["Kangaroo", "Kangourou", "A2", 3],', ' ["Karaoke", "Karaoké", "A2", 4],', ' ["Karma", "Karma", "B2", 4],', ' ["Kayak", "Kayak", "A2", 5],', ' ["Kebab", "Kebab", "A2", 6],', ' ["Keel", "Quille", "B2", 2],', ' ["Keenness", "Acuité", "C1", 1],', ' ["Keep", "Garder", "A2", 8],', ' ["Keeper", "Gardien", "B2", 5]]']
        [API_TOKENS] 164
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['Kernel', 'Ketchup', 'Kettle', 'Kettlebell', 'Key', 'Keyboard', 'Keynote', 'Keypad', 'Keystone', 'Khaki']
        [API_ANSWER] ['[["Kernel", "Noyau", "B2", 5], ["Ketchup", "Ketchup", "A2", 8], ["Kettle", "Bouilloire", "A2", 7], ["Kettlebell", "Kettlebell", "B2", 2], ["Key", "Clé", "A2", 10], ["Keyboard", "Clavier", "A2", 8], ["Keynote", "Note clé", "B2", 3], ["Keypad", "Clavier numérique", "B1", 4], ["Keystone", "Clé de voûte", "C1", 2], ["Khaki", "Kaki", "B2", 4]]']
        [API_TOKENS] 160
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['Kibble', 'Kibbutz', 'Kick', 'Kicker', 'Kidnapper', 'Kidnapping', 'Kidney', 'Killdeer', 'Killer', 'Killing']
        [API_ANSWER] ['[["Kibble", "Croquettes", "A2", 4], ["Kibbutz", "Kibboutz", "B2", 3], ["Kick", "Coup de pied", "A2", 8], ["Kicker", "Botteur", "B1", 3], ["Kidnapper", "Kidnappeur", "B2", 3], ["Kidnapping", "Enlèvement", "B2", 4], ["Kidney", "Rein", "B2", 5], ["Killdeer", "Pluvier kildir", "B2", 1], ["Killer", "Tueur", "B2", 6], ["Killing", "Meurtre", "B2", 6]]']
        [API_TOKENS] 169
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['Kiln', 'Kilogram', 'Kilometer', 'Kilt', 'Kimono', 'Kindergarten', 'Kinematics', 'Kinetic', 'King', 'Kingfisher']
        [API_ANSWER] ['[["Kiln", "Four", "B2", 3], ["Kilogram", "Kilogramme", "A2", 8], ["Kilometer", "Kilomètre", "A2", 8], ["Kilt", "Kilt", "B2", 3], ["Kimono", "Kimono", "B1", 4], ["Kindergarten", "Jardin d\'enfants", "A2", 5], ["Kinematics", "Cinématique", "C1", 2], ["Kinetic", "Cinétique", "B2", 4], ["King", "Roi", "A2", 8], ["Kingfisher", "Martin-pêcheur", "B2", 2]]']
        [API_TOKENS] 168
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['Kingpin', 'Kingship', 'Kinship', 'Kiosk', 'Kiss', 'Kit', 'Kitchen', 'Kitchenware', 'Kite', 'Kiteboarding']
        [API_ANSWER] ['[["Kingpin", "Le parrain", "C1", 3],', ' ["Kingship", "La royauté", "B2", 2],', ' ["Kinship", "La parenté", "B2", 3],', ' ["Kiosk", "Le kiosque", "A2", 5],', ' ["Kiss", "Le baiser", "A2", 7],', ' ["Kit", "Le kit", "A2", 6],', ' ["Kitchen", "La cuisine", "A1", 10],', ' ["Kitchenware", "Les ustensiles de cuisine", "B2", 3],', ' ["Kite", "Le cerf-volant", "A2", 5],', ' ["Kiteboarding", "Le kitesurf", "B2", 1]]']
        [API_TOKENS] 167
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['Kitsch', 'Kitten', 'Kittiwake', 'Kitty', 'Kiwi', 'Kiwifruit', 'Kleenex', 'Knapsack', 'Knead', 'Kneading']
        [API_ANSWER] ['[["Kitsch", "Kitsch", "B2", 4], ["Kitten", "Chaton", "A1", 6], ["Kittiwake", "Mouette tridactyle", "C1", 1], ["Kitty", "Minou", "A2", 5], ["Kiwi", "Kiwi", "B2", 5], ["Kiwifruit", "Kiwi", "B2", 3], ["Kleenex", "Mouchoir en papier", "B2", 4], ["Knapsack", "Sac à dos", "A2", 3], ["Knead", "Pétrir", "B2", 3], ["Kneading", "Pétrissage", "C1", 2]]']
        [API_TOKENS] 177
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['Kneecap', 'Kneeler', 'Kneepad', 'Knickknack', 'Knife', 'Knife-edge', 'Knight', 'Knight-errant', 'Knighthood', 'Knitwear']
        [API_ANSWER] ['[["Kneecap", "Rotule", "B1", 3], ["Kneeler", "Prie-Dieu", "B2", 2], ["Kneepad", "Genouillère", "B2", 4], ["Knickknack", "Babiole", "C1", 2], ["Knife", "Couteau", "A2", 9], ["Knife-edge", "Tranchant", "C1", 1], ["Knight", "Chevalier", "B2", 5], ["Knight-errant", "Chevalier Errant", "C1", 1], ["Knighthood", "Chevalerie", "C1", 2], ["Knitwear", "Tricot", "B2", 4]]']
        [API_TOKENS] 172
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['Knob', 'Knobkerrie', 'Knock', 'Knockout', 'Knot', 'Knotting', 'Knotweed', 'Knowledge', 'Knurl', 'Knurling']
        [API_ANSWER] ['[["Knob", "Bouton", "B1", 5], ["Knobkerrie", "Massue", "C1", 1], ["Knock", "Coup", "B2", 6], ["Knockout", "K.-O.", "C1", 3], ["Knot", "Noeud", "B1", 7], ["Knotting", "Nouage", "C1", 2], ["Knotweed", "Renouée", "C1", 1], ["Knowledge", "Connaissance", "B2", 10], ["Knurl", "Cannelure", "C1", 1], ["Knurling", "Cannelage", "C1", 1]]']
        [API_TOKENS] 163
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['Koala', 'Koi', 'Komodo', 'Krypton', 'Kryptonite', 'Kubotan', 'Kudzu', 'Kumquat', 'Kung-fu', 'Kush']
        [API_ANSWER] ['[["Koala", "Koala", "A2", 5], ["Koi", "Carpe Koï", "A2", 3], ["Komodo", "Komodo", "B2", 2], ["Krypton", "Krypton", "C1", 1], ["Kryptonite", "Kryptonite", "C1", 1], ["Kubotan", "Kubotan", "C2", 1], ["Kudzu", "Kudzu", "B2", 1], ["Kumquat", "Kumquat", "B2", 2], ["Kung-fu", "Kung-fu", "A2", 5], ["Kush", "Kush", "C1", 1]]']
        [API_TOKENS] 169
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['Kwanzaa', 'Kyat', 'Kymograph', 'Kyrie']
        [API_ANSWER] ['[["Kwanzaa", "Kwanzaa", "A2", 4], ["Kyat", "Kyat", "A2", 2], ["Kymograph", "Kymographe", "C1", 1], ["Kyrie", "Kyrie", "B2", 3]]']
        [API_TOKENS] 69
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/nouns/csv/k.csv
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['an eagle', 'an ear', 'an edge', 'an egg', 'an elbow', 'an elephant', 'an elevator', 'an end', 'an engine', 'an entrance']
        [API_ANSWER] ['[["an eagle", "un aigle", "B2", 4], ["an ear", "une oreille", "A2", 8], ["an edge", "un bord", "B2", 5], ["an egg", "un oeuf", "A1", 9], ["an elbow", "un coude", "A2", 6], ["an elephant", "un éléphant", "A2", 4], ["an elevator", "un ascenseur", "A2", 5], ["an end", "une fin", "A2", 7], ["an engine", "un moteur", "A2", 6], ["an entrance", "une entrée", "A2", 7]]']
        [API_TOKENS] 162
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['an envelope', 'an equation', 'an error', 'an essay', 'an establishment', 'an estate', 'an event', 'an examination', 'an example', 'an excitement']
        [API_ANSWER] ['[["an envelope", "une enveloppe", "A2", 7], ["an equation", "une équation", "B2", 5], ["an error", "une erreur", "A2", 8], ["an essay", "une dissertation", "B2", 4], ["an establishment", "un établissement", "B2", 5], ["an estate", "un domaine", "B2", 4], ["an event", "un événement", "A2", 9], ["an examination", "un examen", "A2", 9], ["an example", "un exemple", "A2", 9], ["an excitement", "une excitation", "B2", 3]]']
        [API_TOKENS] 160
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['an exclusion', 'an exercise', 'an exhibition', 'an existence', 'an expansion', 'an experience', 'an experiment', 'an expert', 'an explanation', 'an explosion']
        [API_ANSWER] ['[["an exclusion", "une exclusion", "B2", 5], ["an exercise", "un exercice", "A2", 8], ["an exhibition", "une exposition", "B2", 6], ["an existence", "une existence", "B2", 4], ["an expansion", "une expansion", "C1", 3], ["an experience", "une expérience", "B1", 9], ["an experiment", "une expérience", "B2", 7], ["an expert", "un expert", "B2", 6], ["an explanation", "une explication", "B1", 9], ["an explosion", "une explosion", "B2", 5]]']
        [API_TOKENS] 153
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['an export', 'an expression', 'an extension', 'an eye']
        [API_ANSWER] ['[["an export", "une exportation", "B2", 5], ["an expression", "une expression", "B1", 7], ["an extension", "une extension", "B2", 6], ["an eye", "un œil", "A2", 10]]']
        [API_TOKENS] 63
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/nouns/csv/e.csv
  [CREATE_CSV] File data/french_english/nouns/csv/g.csv
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a quack', 'a quail', 'a quality', 'a quantum', 'a quark', 'a quarry', 'a quarter', 'a queen', 'a quench', 'a quest']
        [API_ANSWER] ['[["a quack", "un charlatan", "B2", 2], ["a quail", "une caille", "A2", 3], ["a quality", "une qualité", "A2", 8], ["a quantum", "un quantum", "C1", 4], ["a quark", "un quark", "C1", 2], ["a quarry", "une carrière", "B2", 4], ["a quarter", "un quart", "A2", 9], ["a queen", "une reine", "A2", 8], ["a quench", "étancher", "C1", 2], ["a quest", "une quête", "B2", 5]]']
        [API_TOKENS] 163
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a questionnaire', 'a queue', 'a quibble', 'a quiche', 'a quickstep', 'a quietus', 'a quill', 'a quilt', 'a quince', 'a quinoa']
        [API_ANSWER] ['[["a questionnaire", "un questionnaire", "B2", 5],', ' ["a queue", "une file", "A2", 7],', ' ["a quibble", "une chicane", "C1", 2],', ' ["a quiche", "une quiche", "A2", 4],', ' ["a quickstep", "un quickstep", "C1", 1],', ' ["a quietus", "un repos éternel", "C2", 1],', ' ["a quill", "une plume", "B2", 3],', ' ["a quilt", "un quilt", "B2", 3],', ' ["a quince", "un coing", "B2", 2],', ' ["a quinoa", "une quinoa", "B2", 4]]']
        [API_TOKENS] 167
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a quintet', 'a quintillion', 'a quip', 'a quorum']
        [API_ANSWER] ['[["a quintet", "un quintette", "B2", 4], ["a quintillion", "un quintillion", "C2", 1], ["a quip", "un trait d\'esprit", "C1", 2], ["a quorum", "un quorum", "C2", 3]]']
        [API_TOKENS] 71
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/nouns/csv/q.csv
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['an actor', 'an agenda', 'an aircraft', 'an alarm', 'an album', 'an alley', 'an alligator', 'an almond', 'an ambulance', 'an amplifier']
        [API_ANSWER] ['[["an actor", "un acteur", "B2", 7], ["an agenda", "un agenda", "A2", 6], ["an aircraft", "un avion", "B2", 8], ["an alarm", "une alarme", "A2", 7], ["an album", "un album", "B1", 6], ["an alley", "une ruelle", "B2", 3], ["an alligator", "un alligator", "B2", 2], ["an almond", "une amande", "B2", 4], ["an ambulance", "une ambulance", "B1", 5], ["an amplifier", "un amplificateur", "B2", 3]]']
        [API_TOKENS] 160
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['an anchor', 'an angel', 'an angle', 'an ankle', 'an ant', 'an apartment', 'an ape', 'an apple', 'an apron', 'an aquarium']
        [API_ANSWER] ['[["an anchor", "une ancre", "B2", 5], ["an angel", "un ange", "A2", 4], ["an angle", "un angle", "A2", 5], ["an ankle", "une cheville", "A2", 4], ["an ant", "une fourmi", "A1", 6], ["an apartment", "un appartement", "A1", 8], ["an ape", "un singe", "A2", 3], ["an apple", "une pomme", "A1", 9], ["an apron", "un tablier", "A2", 4], ["an aquarium", "un aquarium", "A2", 4]]']
        [API_TOKENS] 159
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['an arch', 'an architect', 'an arm', 'an army', 'an arrow', 'an arrowhead', 'an art', 'an artist', 'an artwork', 'an ashtray']
        [API_ANSWER] ['[["an arch", "une arche", "B2", 3], ["an architect", "un architecte", "B2", 4], ["an arm", "un bras", "A1", 8], ["an army", "une armée", "A2", 6], ["an arrow", "une flèche", "A2", 4], ["an arrowhead", "une pointe de flèche", "C1", 1], ["an art", "un art", "B1", 7], ["an artist", "un artiste", "A2", 6], ["an artwork", "une œuvre d\'art", "B2", 3], ["an ashtray", "un cendrier", "B2", 2]]']
        [API_TOKENS] 171
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['an astronaut', 'an asylum', 'an atlas', 'an atom', 'an auction', 'an audience', 'an aunt', 'an author', 'an avocado', 'an axe']
        [API_ANSWER] ['[["an astronaut", "un astronaute", "B2", 4],', ' ["an asylum", "un asile", "C1", 2],', ' ["an atlas", "un atlas", "B2", 5],', ' ["an atom", "un atome", "B2", 6],', ' ["an auction", "une vente aux enchères", "B2", 4],', ' ["an audience", "un public", "B2", 7],', ' ["an aunt", "une tante", "A2", 8],', ' ["an author", "un auteur", "B2", 8],', ' ["an avocado", "un avocat", "B1", 6],', ' ["an axe", "une hache", "B2", 3]]']
        [API_TOKENS] 163
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/nouns/csv/a.csv
  [CREATE_CSV] File data/french_english/nouns/csv/z.csv
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['Habitat', 'Hair', 'Hamburger', 'Hammer', 'Hand', 'Handicap', 'Hardship', 'Harmony', 'Harvest', 'Hat']
        [API_ANSWER] ['[["Habitat", "Habitat", "B1", 6], ["Hair", "Cheveux", "A2", 8], ["Hamburger", "Hamburger", "A2", 5], ["Hammer", "Marteau", "A2", 5], ["Hand", "Main", "A1", 10], ["Handicap", "Handicap", "B2", 4], ["Hardship", "Épreuve", "C1", 2], ["Harmony", "Harmonie", "B2", 4], ["Harvest", "Récolte", "B2", 4], ["Hat", "Chapeau", "A1", 7]]']
        [API_TOKENS] 155
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['Hawk', 'Hazard', 'Head', 'Health', 'Hearing', 'Heart', 'Heir', 'Helicopter', 'Hell', 'Help']
        [API_ANSWER] ['[["Hawk", "Faucon", "B2", 4], ["Hazard", "Danger", "B2", 6], ["Head", "Tête", "A1", 10], ["Health", "Santé", "A2", 10], ["Hearing", "Audition", "B2", 4], ["Heart", "Cœur", "A2", 10], ["Heir", "Héritier", "B2", 3], ["Helicopter", "Hélicoptère", "A2", 5], ["Hell", "Enfer", "C1", 3], ["Help", "Aider", "A2", 10]]']
        [API_TOKENS] 152
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['Herb', 'Heritage', 'Hero', 'Heroine', 'Hierarchy', 'Highway', 'Hike', 'Hill', 'Hint', 'Hip']
[ERROR_API] Error when call API: That model is currently overloaded with other requests. You can retry your request, or contact us through our help center at help.openai.com if the error persists. (Please include the request ID 0274e1ce8527e69cd8de859040d25cb7 in your message.)
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['Herb', 'Heritage', 'Hero', 'Heroine', 'Hierarchy', 'Highway', 'Hike', 'Hill', 'Hint', 'Hip']
        [API_ANSWER] ['[["Herb", "Herbe", "B1", 5], ["Heritage", "Patrimoine", "B2", 6], ["Hero", "Héros", "B2", 6], ["Heroine", "Héroïne", "B2", 5], ["Hierarchy", "Hiérarchie", "C1", 5], ["Highway", "Autoroute", "A2", 8], ["Hike", "Randonnée", "B2", 4], ["Hill", "Colline", "A2", 7], ["Hint", "Indice", "B2", 6], ["Hip", "Hanche", "B2", 5]]']
        [API_TOKENS] 155
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['Hire', 'History', 'Hit', 'Hobby', 'Hockey', 'Hold', 'Hole', 'Holiday', 'Home', 'Homework']
        [API_ANSWER] ['[["Hire", "Embaucher", "B1", 5], ["History", "Histoire", "A2", 8], ["Hit", "Frapper", "B1", 6], ["Hobby", "Passe-temps", "A2", 5], ["Hockey", "Hockey", "A2", 4], ["Hold", "Tenir", "A2", 7], ["Hole", "Trou", "A2", 6], ["Holiday", "Vacances", "A1", 8], ["Home", "Maison", "A1", 10], ["Homework", "Devoirs", "A1", 7]]']
        [API_TOKENS] 150
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['Homosexuality', 'Honest', 'Honey', 'Honor', 'Hood', 'Hope', 'Horizon', 'Horn', 'Horror', 'Horse']
        [API_ANSWER] ['[["Homosexuality", "Homosexualité", "B2", 5],', ' ["Honest", "Honnête", "B2", 7],', ' ["Honey", "Miel", "A2", 6],', ' ["Honor", "Honneur", "B2", 6],', ' ["Hood", "Capuche", "B2", 4],', ' ["Hope", "Espoir", "B1", 8],', ' ["Horizon", "Horizon", "B1", 6],', ' ["Horn", "Corne", "B2", 5],', ' ["Horror", "Horreur", "B2", 6],', ' ["Horse", "Cheval", "A1", 9]]']
        [API_TOKENS] 154
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['Hospital', 'Host', 'Hotel', 'Hour', 'House', 'Housing', 'Human', 'Humidity', 'Humor', 'Hunger']
        [API_ANSWER] ['[["Hospital", "Hôpital", "B2", 8], ["Host", "Hôte", "B2", 5], ["Hotel", "Hôtel", "A2", 9], ["Hour", "Heure", "A1", 10], ["House", "Maison", "A1", 10], ["Housing", "Logement", "B2", 6], ["Human", "Humain", "B1", 10], ["Humidity", "Humidité", "B2", 4], ["Humor", "Humour", "B2", 6], ["Hunger", "Faim", "B2", 5]]']
        [API_TOKENS] 149
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['Hunt', 'Husband', 'Hut', 'Hybrid', 'Hydrogen', 'Hype', 'Hypothesis']
        [API_ANSWER] ['[["Hunt", "Chasse", "B2", 5], ["Husband", "Mari", "A2", 7], ["Hut", "Cabane", "A2", 4], ["Hybrid", "Hybride", "B2", 4], ["Hydrogen", "Hydrogène", "B2", 5], ["Hype", "Engouement", "C1", 6], ["Hypothesis", "Hypothèse", "B2", 8]]']
        [API_TOKENS] 114
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/nouns/csv/h.csv
  [CREATE_CSV] File data/french_english/nouns/csv/r.csv
  [CREATE_CSV] File data/french_english/nouns/csv/v.csv
  [CREATE_CSV] File data/french_english/nouns/csv/s.csv
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['an umbrella', 'an uncle', 'an understanding', 'an undertaking', 'an underwear', 'an unicorn', 'an union', 'an uniqueness', 'an university', 'an uprising']
        [API_ANSWER] ['[["an umbrella", "un parapluie", "A2", 8], ["an uncle", "un oncle", "A1", 7], ["an understanding", "une compréhension", "B2", 5], ["an undertaking", "une entreprise", "C1", 4], ["an underwear", "un sous-vêtement", "B2", 4], ["an unicorn", "une licorne", "A2", 2], ["an union", "un syndicat", "B2", 6], ["an uniqueness", "une singularité", "C1", 3], ["an university", "une université", "A2", 9], ["an uprising", "une révolte", "C1", 3]]']
        [API_TOKENS] 168
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['an urge', 'an usage', 'an usher', 'an utensil', 'an utility', 'an utterance']
        [API_ANSWER] ['[["an urge", "un besoin pressant", "B2", 5],', ' ["an usage", "une utilisation", "B2", 4],', ' ["an usher", "un huissier", "B2", 2],', ' ["an utensil", "un ustensile", "B2", 4],', ' ["an utility", "une utilité", "B2", 5],', ' ["an utterance", "une déclaration", "C1", 3]]']
        [API_TOKENS] 102
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/nouns/csv/u.csv
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a jacket', 'a jaguar', 'a jail', 'a jam', 'a janitor', 'a jar', 'a jasmine', 'a jaw', 'a jazz', 'a jeep']
        [API_ANSWER] ['[["a jacket", "une veste", "A2", 8], ["a jaguar", "un jaguar", "B2", 4], ["a jail", "une prison", "B2", 5], ["a jam", "de la confiture", "A2", 6], ["a janitor", "un concierge", "B2", 3], ["a jar", "un pot", "A2", 7], ["a jasmine", "un jasmin", "C1", 2], ["a jaw", "une mâchoire", "C1", 3], ["a jazz", "un jazz", "B2", 6], ["a jeep", "un jeep", "B2", 5]]']
        [API_TOKENS] 163
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a jellyfish', 'a jet', 'a jewel', 'a jigsaw', 'a job', 'a jog', 'a joint', 'a joke', 'a journalist', 'a journey']
        [API_ANSWER] ['[["a jellyfish", "une méduse", "B2", 3], ["a jet", "un jet", "B2", 4], ["a jewel", "un bijou", "B1", 5], ["a jigsaw", "un puzzle", "B2", 2], ["a job", "un travail", "A2", 10], ["a jog", "un footing", "B1", 4], ["a joint", "une articulation", "B2", 5], ["a joke", "une blague", "A2", 8], ["a journalist", "un journaliste", "B2", 6], ["a journey", "un voyage", "A2", 9]]']
        [API_TOKENS] 158
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a joy', 'a judge', 'a juice', 'a jumper', 'a jungle', 'a junior', 'a junk', 'a jury', 'a justice', 'a justification']
        [API_ANSWER] ['[["a joy", "une joie", "B2", 5], ["a judge", "un juge", "B2", 6], ["a juice", "un jus", "A2", 5], ["a jumper", "un pull", "A2", 3], ["a jungle", "une jungle", "B2", 4], ["a junior", "un(e) junior", "B1", 4], ["a junk", "un déchet", "C1", 2], ["a jury", "un jury", "B2", 5], ["a justice", "une justice", "B2", 6], ["a justification", "une justification", "C1", 4]]']
        [API_TOKENS] 156
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/nouns/csv/j.csv
  [CREATE_CSV] File data/french_english/nouns/csv/n.csv
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a yacht', 'a yard', 'a year', 'a yeast', 'a yell', 'a yellow', 'a yen', 'a yield', 'a yoga', 'a yogurt']
        [API_ANSWER] ['[["a yacht", "un yacht", "B2", 3],', ' ["a yard", "une cour", "A2", 5],', ' ["a year", "une année", "A2", 10],', ' ["a yeast", "une levure", "B2", 3],', ' ["a yell", "un cri", "C1", 2],', ' ["a yellow", "un jaune", "A1", 6],', ' ["a yen", "un yen", "B2", 4],', ' ["a yield", "un rendement", "C1", 3],', ' ["a yoga", "un yoga", "B1", 4],', ' ["a yogurt", "un yaourt", "A2", 5]]']
        [API_TOKENS] 155
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a yolk', 'a youngster', 'a youth', 'a yowl']
        [API_ANSWER] ['[["a yolk", "un jaune-d\'œuf", "B2", 5], ["a youngster", "un jeune", "A2", 6], ["a youth", "un jeune", "B1", 7], ["a yowl", "un hurlement", "C1", 2]]']
        [API_TOKENS] 69
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/nouns/csv/y.csv
  [CREATE_CSV] File data/french_english/nouns/csv/l.csv
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a face', 'a factory', 'a faith', 'a family', 'a fan', 'a farm', 'a fashion', 'a father', 'a fault', 'a fear']
        [API_ANSWER] ['[["a face", "un visage", "A2", 9], ["a factory", "une usine", "A2", 6], ["a faith", "une foi", "B2", 5], ["a family", "une famille", "A1", 10], ["a fan", "un ventilateur", "A2", 5], ["a farm", "une ferme", "A2", 6], ["a fashion", "la mode", "B2", 6], ["a father", "un père", "A1", 10], ["a fault", "un défaut", "B2", 5], ["a fear", "une peur", "A2", 9]]']
        [API_TOKENS] 158
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a feather', 'a feature', 'a fee', 'a feed', 'a feeling', 'a female', 'a fence', 'a festival', 'a fiber', 'a fiction']
        [API_ANSWER] ['[["a feather", "une plume", "B1", 4], ["a feature", "une caractéristique", "B2", 6], ["a fee", "des frais", "B2", 5], ["a feed", "une alimentation", "B2", 4], ["a feeling", "un sentiment", "B1", 6], ["a female", "une femme", "A2", 6], ["a fence", "une clôture", "B2", 4], ["a festival", "un festival", "B2", 5], ["a fiber", "une fibre", "B2", 4], ["a fiction", "une fiction", "B2", 5]]']
        [API_TOKENS] 158
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a field', 'a figure', 'a file', 'a film', 'a filter', 'a finance', 'a finger', 'a finish', 'a fire', 'a fireman']
        [API_ANSWER] ['[["a field", "un champ", "A2", 5], ["a figure", "une figure", "B2", 6], ["a file", "un fichier", "A2", 7], ["a film", "un film", "A2", 10], ["a filter", "un filtre", "B2", 4], ["a finance", "une finance", "C1", 3], ["a finger", "un doigt", "A1", 9], ["a finish", "une finition", "B2", 5], ["a fire", "un feu", "A1", 10], ["a fireman", "un pompier", "A2", 8]]']
        [API_TOKENS] 156
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a firm', 'a fish', 'a fisherman', 'a fist', 'a fitness', 'a flag', 'a flame', 'a flavor', 'a fleet', 'a flight']
        [API_ANSWER] ['[["a firm", "une entreprise", "B2", 6], ["a fish", "un poisson", "A1", 10], ["a fisherman", "un pêcheur", "A2", 4], ["a fist", "un poing", "B2", 3], ["a fitness", "une forme physique", "B1", 4], ["a flag", "un drapeau", "A2", 7], ["a flame", "une flamme", "B2", 5], ["a flavor", "une saveur", "B2", 4], ["a fleet", "une flotte", "B2", 4], ["a flight", "un vol", "A2", 9]]']
        [API_TOKENS] 163
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a flood', 'a floor', 'a flour', 'a flower', 'a flowerpot', 'a flu', 'a fluid', 'a fly', 'a foam', 'a focus']
        [API_ANSWER] ['[["a flood", "une inondation", "B2", 5], ["a floor", "un plancher", "A2", 8], ["a flour", "une farine", "A2", 6], ["a flower", "une fleur", "A1", 9], ["a flowerpot", "un pot de fleurs", "B1", 4], ["a flu", "une grippe", "B2", 5], ["a fluid", "un fluide", "B2", 4], ["a fly", "une mouche", "A2", 8], ["a foam", "une mousse", "B2", 4], ["a focus", "une mise au point", "B2", 6]]']
        [API_TOKENS] 166
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a fog', 'a fold', 'a folk', 'a food', 'a fool', 'a foot', 'a footstep', 'a force', 'a forecast', 'a forehead']
        [API_ANSWER] ['[["a fog", "un brouillard", "B1", 5], ["a fold", "un pli", "B2", 4], ["a folk", "un peuple", "B2", 4], ["a food", "une nourriture", "A2", 8], ["a fool", "un imbécile", "B2", 5], ["a foot", "un pied", "A1", 9], ["a footstep", "une empreinte de pas", "B2", 3], ["a force", "une force", "B2", 7], ["a forecast", "une prévision", "B2", 6], ["a forehead", "un front", "A2", 6]]']
        [API_TOKENS] 165
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a forest', 'a fork', 'a forklift', 'a form', 'a format', 'a formula', 'a fortune', 'a forum', 'a fossil', 'a foundation']
        [API_ANSWER] ['[["a forest", "une forêt", "B2", 6], ["a fork", "une fourchette", "A1", 8], ["a forklift", "un chariot élévateur", "B2", 2], ["a form", "un formulaire", "B2", 5], ["a format", "un format", "B2", 6], ["a formula", "une formule", "B2", 6], ["a fortune", "une fortune", "B2", 4], ["a forum", "un forum", "B2", 6], ["a fossil", "un fossile", "B2", 4], ["a foundation", "une fondation", "B2", 6]]']
        [API_TOKENS] 164
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a fountain', 'a fox', 'a foxhound', 'a fraction', 'a frame', 'a framework', 'a fraud', 'a freedom', 'a freezer', 'a frequency']
        [API_ANSWER] ['[["a fountain", "une fontaine", "B2", 4], ["a fox", "un renard", "A2", 5], ["a foxhound", "un foxhound", "B2", 2], ["a fraction", "une fraction", "B1", 6], ["a frame", "un cadre", "B2", 5], ["a framework", "un cadre", "C1", 4], ["a fraud", "une fraude", "C1", 3], ["a freedom", "une liberté", "B2", 6], ["a freezer", "un congélateur", "B2", 4], ["a frequency", "une fréquence", "B2", 6]]']
        [API_TOKENS] 162
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a fridge', 'a friend', 'a friendliness', 'a frog', 'a frogman', 'a front', 'a frost', 'a fruit', 'a fruitcake', 'a fuel']
        [API_ANSWER] ['[["a fridge", "un réfrigérateur", "A2", 8], ["a friend", "un ami", "A1", 9], ["a friendliness", "une amabilité", "B2", 2], ["a frog", "une grenouille", "A2", 5], ["a frogman", "un homme-grenouille", "C1", 1], ["a front", "un front", "B2", 6], ["a frost", "un gel", "B2", 3], ["a fruit", "un fruit", "A1", 10], ["a fruitcake", "un gâteau aux fruits", "C1", 1], ["a fuel", "un carburant", "B2", 8]]']
        [API_TOKENS] 172
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a fulfillment', 'a fullback', 'a function', 'a fund', 'a funeral', 'a fungus', 'a furniture', 'a furnituremaker', 'a fury', 'a fuse']
        [API_ANSWER] ['[["a fulfillment", "un accomplissement", "B2", 4],', ' ["a fullback", "un arrière", "B2", 2],', ' ["a function", "une fonction", "A2", 8],', ' ["a fund", "un fonds", "B2", 5],', ' ["a funeral", "un enterrement", "B1", 6],', ' ["a fungus", "un champignon", "B2", 3],', ' ["a furniture", "un meuble", "A2", 7],', ' ["a furnituremaker", "un ébéniste", "C1", 1],', ' ["a fury", "une fureur", "C1", 3],', ' ["a fuse", "un fusible", "B2", 4]]']
        [API_TOKENS] 165
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a fuss.']
        [API_ANSWER] ['[["fuss", "agitation", "B1", 5]]']
        [API_TOKENS] 16
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/nouns/csv/f.csv
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['an iceberg', 'an idea', 'an idol', 'an igloo', 'an iguana', 'an illusion', 'an image', 'an inch', 'an infection', 'an inmate']
        [API_ANSWER] ['[["an iceberg", "un iceberg", "B2", 3], ["an idea", "une idée", "A2", 9], ["an idol", "une idole", "B2", 2], ["an igloo", "un igloo", "A2", 4], ["an iguana", "un iguane", "B2", 3], ["an illusion", "une illusion", "B2", 4], ["an image", "une image", "A2", 10], ["an inch", "un pouce", "B1", 5], ["an infection", "une infection", "B1", 6], ["an inmate", "un détenu", "C1", 2]]']
        [API_TOKENS] 161
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['an inspector', 'an instructor', 'an instrument', 'an intake', 'an intersection', 'an interview', 'an investor', 'an invitation', 'an invoice', 'an iris']
        [API_ANSWER] ['[["an inspector", "un inspecteur", "B2", 5], ["an instructor", "un instructeur", "B2", 4], ["an instrument", "un instrument", "A2", 8], ["an intake", "une admission", "B2", 3], ["an intersection", "une intersection", "B2", 5], ["an interview", "un entretien", "B1", 7], ["an investor", "un investisseur", "B2", 4], ["an invitation", "une invitation", "A2", 8], ["an invoice", "une facture", "B1", 6], ["an iris", "une iris", "B2", 2]]']
        [API_TOKENS] 157
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['an iron', 'an island', 'an issue', 'an item', 'an itinerary', 'an ivory', 'an ivy']
        [API_ANSWER] ['[["an iron", "un fer à repasser", "A2", 7],', ' ["an island", "une île", "A2", 8],', ' ["an issue", "une question/problématique", "B2", 9],', ' ["an item", "un article/objet", "B1", 8],', ' ["an itinerary", "un itinéraire", "B2", 4],', ' ["an ivory", "de l\'ivoire", "C1", 2],', ' ["an ivy", "du lierre", "B2", 3]]']
        [API_TOKENS] 125
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/nouns/csv/i.csv
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['an object', 'an obligation', 'an observation', 'an obstacle', 'an occasion', 'an occupation', 'an ocean', 'an offer', 'an office', 'an officer']
        [API_ANSWER] ['[["an object", "un objet", "B1", 8], ["an obligation", "une obligation", "B2", 6], ["an observation", "une observation", "B2", 6], ["an obstacle", "un obstacle", "B2", 5], ["an occasion", "une occasion", "B1", 7], ["an occupation", "une occupation", "B2", 5], ["an ocean", "un océan", "A2", 5], ["an offer", "une offre", "B1", 7], ["an office", "un bureau", "A2", 8], ["an officer", "un officier", "B2", 5]]']
        [API_TOKENS] 154
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['an offspring', 'an oil', 'an onion', 'an opening', 'an opera', 'an operation', 'an operator', 'an opinion', 'an opportunity', 'an opposition']
        [API_ANSWER] ['[["an offspring", "une progéniture", "B2", 4], ["an oil", "une huile", "A2", 8], ["an onion", "un oignon", "A2", 6], ["an opening", "une ouverture", "B2", 4], ["an opera", "un opéra", "B2", 4], ["an operation", "une opération", "B2", 6], ["an operator", "un opérateur", "B2", 4], ["an opinion", "une opinion", "B1", 8], ["an opportunity", "une opportunité", "B1", 6], ["an opposition", "une opposition", "B2", 6]]']
        [API_TOKENS] 163
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['an option', 'an orange', 'an orbit', 'an orchestra', 'an order', 'an organization', 'an origin', 'an outcome', 'an outlet', 'an outline']
        [API_ANSWER] ['[["an option", "une option", "B1", 6], ["an orange", "une orange", "A2", 8], ["an orbit", "une orbite", "C1", 3], ["an orchestra", "un orchestre", "B2", 4], ["an order", "un ordre", "B1", 7], ["an organization", "une organisation", "B2", 6], ["an origin", "une origine", "B2", 4], ["an outcome", "un résultat", "C1", 5], ["an outlet", "une prise de courant", "B2", 3], ["an outline", "un plan", "B2", 5]]']
        [API_TOKENS] 159
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['an oven', 'an owner', 'an ox']
        [API_ANSWER] ['[["an oven", "un four", "A2", 8], ["an owner", "un propriétaire", "B2", 5], ["an ox", "un bœuf", "A2", 3]]']
        [API_TOKENS] 50
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/nouns/csv/o.csv
  [CREATE_CSV] File data/french_english/nouns/csv/p.csv
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a waffle', 'a waist', 'a waiter', 'a waitress', 'a wake', 'a walk', 'a walker', 'a wall', 'a wallaby', 'a wallet']
        [API_ANSWER] ['[["a waffle", "une gaufre", "A2", 5],', ' ["a waist", "une taille", "B2", 4],', ' ["a waiter", "un serveur", "A2", 6],', ' ["a waitress", "une serveuse", "A2", 6],', ' ["a wake", "un éveil", "B2", 3],', ' ["a walk", "une promenade", "A2", 8],', ' ["a walker", "un marcheur", "B2", 4],', ' ["a wall", "un mur", "A1", 10],', ' ["a wallaby", "un wallaby", "B2", 2],', ' ["a wallet", "un portefeuille", "A2", 8]]']
        [API_TOKENS] 165
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a walnut', 'a wand', 'a wardrobe', 'a warlock', 'a warrior', 'a wasp', 'a waste', 'a watch', 'a watchman', 'a water']
        [API_ANSWER] ['[["a walnut", "une noix", "B2", 4], ["a wand", "une baguette", "B2", 3], ["a wardrobe", "une garde-robe", "B1", 6], ["a warlock", "un sorcier", "C1", 1], ["a warrior", "un guerrier", "B2", 5], ["a wasp", "une guêpe", "A2", 4], ["a waste", "un gaspillage", "B2", 4], ["a watch", "une montre", "A2", 9], ["a watchman", "un gardien", "B2", 2], ["a water", "l\'eau", "A1", 10]]']
        [API_TOKENS] 170
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a watermelon', 'a wave', 'a wavelet', 'a wax', 'a way', 'a wayfarer', 'a weakness', 'a weasel', 'a web', 'a webbing']
        [API_ANSWER] ['[["a watermelon", "une pastèque", "A2", 6],', ' ["a wave", "une vague", "A2", 8],', ' ["a wavelet", "une petite vague", "B2", 2],', ' ["a wax", "une cire", "B2", 4],', ' ["a way", "un chemin", "A2", 9],', ' ["a wayfarer", "un voyageur", "C1", 2],', ' ["a weakness", "une faiblesse", "B2", 6],', ' ["a weasel", "une belette", "C1", 2],', ' ["a web", "une toile", "B2", 6],', ' ["a webbing", "une sangle", "C1", 3]]']
        [API_TOKENS] 166
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a wedding', 'a weed', 'a week', 'a weight', 'a weightlifter', 'a welder', 'a well', 'a werewolf', 'a west', 'a wetland']
        [API_ANSWER] ['[["a wedding", "un mariage", "B1", 7], ["a weed", "une mauvaise herbe", "A2", 4], ["a week", "une semaine", "A1", 10], ["a weight", "un poids", "A2", 8], ["a weightlifter", "un haltérophile", "B2", 2], ["a welder", "un soudeur", "B1", 3], ["a well", "un puits", "B2", 5], ["a werewolf", "un loup-garou", "C1", 1], ["a west", "un ouest", "B2", 4], ["a wetland", "une zone humide", "C1", 2]]']
        [API_TOKENS] 173
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a whale', 'a wheat', 'a wheel', 'a wheelbarrow', 'a wheelchair', 'a whip', 'a whistle', 'a whistle-blower', 'a whiteboard', 'a widow']
        [API_ANSWER] ['[["a whale", "une baleine", "B2", 4], ["a wheat", "un blé", "A2", 5], ["a wheel", "une roue", "A2", 7], ["a wheelbarrow", "une brouette", "B1", 3], ["a wheelchair", "un fauteuil roulant", "B2", 4], ["a whip", "un fouet", "C1", 2], ["a whistle", "un sifflet", "B1", 5], ["a whistle-blower", "un lanceur d\'alerte", "C1", 2], ["a whiteboard", "un tableau blanc", "A2", 4], ["a widow", "une veuve", "B2", 5]]']
        [API_TOKENS] 177
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a width', 'a wife', 'a wig', 'a wildcat', 'a wilderness', 'a will', 'a willow', 'a wind', 'a windmill', 'a window']
        [API_ANSWER] ['[["a width", "une largeur", "B1", 5], ["a wife", "une épouse", "A2", 6], ["a wig", "une perruque", "B2", 3], ["a wildcat", "un chat sauvage", "C1", 2], ["a wilderness", "une région sauvage", "C1", 3], ["a will", "un testament", "B2", 4], ["a willow", "un saule", "B2", 3], ["a wind", "un vent", "A2", 8], ["a windmill", "un moulin à vent", "B2", 3], ["a window", "une fenêtre", "A1", 10]]']
        [API_TOKENS] 170
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a windowpane', 'a wine', 'a wineglass', 'a wing', 'a wingman', 'a winner', 'a winter', 'a wire', 'a wiretap', 'a witch']
        [API_ANSWER] ['[["a windowpane", "une vitre", "B1", 5], ["a wine", "un vin", "A2", 7], ["a wineglass", "un verre à vin", "B1", 4], ["a wing", "une aile", "A2", 6], ["a wingman", "un équipier", "C1", 2], ["a winner", "un gagnant", "B1", 5], ["a winter", "un hiver", "A1", 8], ["a wire", "un fil", "B1", 6], ["a wiretap", "une écoute téléphonique", "C1", 1], ["a witch", "une sorcière", "B2", 3]]']
        [API_TOKENS] 170
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a witchcraft', 'a witness', 'a wolf', 'a woman', 'a womanizer', 'a wood', 'a woodpecker', 'a wool', 'a word', 'a wordplay']
        [API_ANSWER] ['[["a witchcraft", "une sorcellerie", "B2", 3],', ' ["a witness", "un témoin", "B2", 6],', ' ["a wolf", "un loup", "A2", 5],', ' ["a woman", "une femme", "A1", 10],', ' ["a womanizer", "un coureur de jupons", "C1", 1],', ' ["a wood", "un bois", "A2", 8],', ' ["a woodpecker", "un pic-vert", "B2", 2],', ' ["a wool", "une laine", "A2", 5],', ' ["a word", "un mot", "A1", 10],', ' ["a wordplay", "un jeu de mots", "B2", 3]]']
        [API_TOKENS] 171
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a work', 'a workbench', 'a world', 'a worry', 'a worrywart', 'a worth', 'a worthiness', 'a wound', 'a wrist', 'a wristwatch']
        [API_ANSWER] ['[["a work", "un travail", "B2", 7], ["a workbench", "un établi", "B2", 3], ["a world", "un monde", "A2", 10], ["a worry", "une inquiétude", "B1", 6], ["a worrywart", "un(e) angoissé(e)", "C1", 2], ["a worth", "une valeur", "B2", 5], ["a worthiness", "une dignité", "C2", 1], ["a wound", "une blessure", "B1", 8], ["a wrist", "un poignet", "A2", 8], ["a wristwatch", "une montre-bracelet", "A2", 6]]']
        [API_TOKENS] 173
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a writer', 'a wrong', 'a wrongdoer', 'a wunderkind.']
        [API_ANSWER] ['[["a writer", "un écrivain", "B2", 7], ["a wrong", "un tort", "B2", 4], ["a wrongdoer", "un malfaiteur", "C1", 2], ["a wunderkind", "un enfant prodige", "C2", 3]]']
        [API_TOKENS] 73
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/nouns/csv/w.csv
  [CREATE_CSV] File data/french_english/nouns/csv/m.csv
  [CREATE_CSV] File data/french_english/nouns/csv/x.csv
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a badge', 'a bag', 'a bakery', 'a ball', 'a banana', 'a bass', 'a bay', 'a beach', 'a beard', 'a bed']
[ERROR_API] Error when call API: That model is currently overloaded with other requests. You can retry your request, or contact us through our help center at help.openai.com if the error persists. (Please include the request ID 942c8ecdc7a5fe32083e5f443a12bc93 in your message.)
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a badge', 'a bag', 'a bakery', 'a ball', 'a banana', 'a bass', 'a bay', 'a beach', 'a beard', 'a bed']
        [API_ANSWER] ['[["a badge", "un badge", "A2", 5], ["a bag", "un sac", "A1", 8], ["a bakery", "une boulangerie", "A2", 4], ["a ball", "une balle", "A1", 7], ["a banana", "une banane", "A1", 9], ["a bass", "une basse", "B2", 3], ["a bay", "une baie", "B2", 2], ["a beach", "une plage", "A2", 6], ["a beard", "une barbe", "B1", 4], ["a bed", "un lit", "A1", 9]]']
        [API_TOKENS] 159
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a beetle', 'a bell', 'a bench', 'a berry', 'a beverage', 'a bib', 'a bike', 'a bird', 'a biscuit', 'a blade']
        [API_ANSWER] ['[["a beetle", "un scarabée", "B1", 3], ["a bell", "une cloche", "A2", 4], ["a bench", "un banc", "A2", 6], ["a berry", "une baie", "B2", 4], ["a beverage", "une boisson", "A2", 7], ["a bib", "un bavoir", "A1", 2], ["a bike", "un vélo", "A1", 8], ["a bird", "un oiseau", "A1", 9], ["a biscuit", "un biscuit", "A2", 6], ["a blade", "une lame", "B2", 5]]']
        [API_TOKENS] 163
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a blanket', 'a blood', 'a bloom', 'a blouse', 'a board', 'a boat', 'a body', 'a bone', 'a book', 'a bookcase']
        [API_ANSWER] ['[["a blanket", "une couverture", "A2", 6], ["a blood", "un sang", "B2", 4], ["a bloom", "une floraison", "C1", 2], ["a blouse", "un chemisier", "B1", 5], ["a board", "un tableau", "B2", 6], ["a boat", "un bateau", "A2", 8], ["a body", "un corps", "A2", 9], ["a bone", "un os", "A2", 8], ["a book", "un livre", "A1", 10], ["a bookcase", "une bibliothèque", "B1", 4]]']
        [API_TOKENS] 160
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a boot', 'a border', 'a bottle', 'a bowl', 'a box', 'a boy', 'a brain', 'a brake', 'a branch', 'a brass']
        [API_ANSWER] ['[["a boot", "une botte", "A2", 5], ["a border", "une frontière", "B2", 6], ["a bottle", "une bouteille", "A1", 8], ["a bowl", "un bol", "A1", 7], ["a box", "une boîte", "A1", 9], ["a boy", "un garçon", "A1", 10], ["a brain", "un cerveau", "B2", 5], ["a brake", "un frein", "B1", 4], ["a branch", "une branche", "A2", 5], ["a brass", "du laiton", "C1", 3]]']
        [API_TOKENS] 163
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a bread', 'a breakfast', 'a brick', 'a bride', 'a bridge', 'a broccoli', 'a broom', 'a brother', 'a brush', 'a bubble']
        [API_ANSWER] ['[["a bread", "un pain", "A2", 8], ["a breakfast", "un petit déjeuner", "A2", 7], ["a brick", "une brique", "A2", 5], ["a bride", "une mariée", "B1", 3], ["a bridge", "un pont", "A2", 8], ["a broccoli", "un brocoli", "A2", 4], ["a broom", "un balai", "A2", 4], ["a brother", "un frère", "A1", 9], ["a brush", "une brosse", "A2", 7], ["a bubble", "une bulle", "A2", 4]]']
        [API_TOKENS] 162
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a bucket', 'a bud', 'a buffalo', 'a bug', 'a building', 'a bulb', 'a bull', 'a bullet', 'a bun', 'a bus']
        [API_ANSWER] ['[["a bucket", "un seau", "A2", 6], ["a bud", "un bourgeon", "B2", 3], ["a buffalo", "un buffle", "B2", 2], ["a bug", "un insecte", "A2", 5], ["a building", "un bâtiment", "A2", 10], ["a bulb", "une ampoule", "A2", 7], ["a bull", "un taureau", "B1", 4], ["a bullet", "une balle", "B2", 3], ["a bun", "un petit pain", "A2", 6], ["a bus", "un bus", "A1", 10]]']
        [API_TOKENS] 163
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a bush', 'a business', 'a butter', 'a butterfly', 'a button', 'a buyer', 'a byte']
        [API_ANSWER] ['[["a bush", "un buisson", "A2", 4], ["a business", "une entreprise", "B2", 9], ["a butter", "un beurre", "A2", 5], ["a butterfly", "un papillon", "A2", 4], ["a button", "un bouton", "A1", 8], ["a buyer", "un acheteur", "B1", 4], ["a byte", "un octet", "B2", 6]]']
        [API_TOKENS] 113
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/nouns/csv/b.csv
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['T-shirt', 'TV', 'Table', 'Taco', 'Taffy', 'Tambour', 'Tambourine', 'Tangerine', 'Tank', 'Tap']
        [API_ANSWER] ['[["T-shirt", "T-shirt", "A2", 9], ["TV", "Télévision", "A2", 10], ["Table", "Table", "A1", 10], ["Taco", "Taco", "B1", 3], ["Taffy", "Bonbon", "B2", 1], ["Tambour", "Tambour", "C1", 2], ["Tambourine", "Tambourin", "B2", 2], ["Tangerine", "Mandarine", "B1", 3], ["Tank", "Réservoir", "B2", 6], ["Tap", "Robinet", "A2", 7]]']
        [API_TOKENS] 157
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['Tape', 'Tarmac', 'Tassel', 'Tea', 'Teapot', 'Teaspoon', 'Telephone', 'Telescope', 'Television', 'Tennis']
        [API_ANSWER] ['[["Tape", "Ruban adhésif", "A2", 8], ["Tarmac", "Revêtement de sol", "B2", 4], ["Tassel", "Gland", "C1", 2], ["Tea", "Thé", "A1", 10], ["Teapot", "Théière", "A2", 5], ["Teaspoon", "Cuillère à thé", "A2", 6], ["Telephone", "Téléphone", "A2", 10], ["Telescope", "Télescope", "B2", 5], ["Television", "Télévision", "A2", 10], ["Tennis", "Tennis", "A2", 8]]']
        [API_TOKENS] 165
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['Tent', 'Theater', 'Thermometer', 'Thimble', 'Thread', 'Throne', 'Ticket', 'Tie', 'Tiger', 'Tile']
        [API_ANSWER] ['[["Tent", "Tente", "A2", 5], ["Theater", "Théâtre", "A2", 6], ["Thermometer", "Thermomètre", "B1", 4], ["Thimble", "Dé à coudre", "B2", 2], ["Thread", "Fil", "A2", 6], ["Throne", "Trône", "C1", 2], ["Ticket", "Billet", "A2", 8], ["Tie", "Cravate", "A2", 7], ["Tiger", "Tigre", "A2", 4], ["Tile", "Carreau", "A2", 5]]']
        [API_TOKENS] 159
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['Time', 'Tin', 'Tire', 'Tissue', 'Toaster', 'Toe', 'Tomato', 'Tongs', 'Tongue', 'Tooth']
        [API_ANSWER] ['[["Time", "Temps", "A2", 10], ["Tin", "Étain", "B2", 3], ["Tire", "Pneu", "B1", 6], ["Tissue", "Mouchoir", "A2", 5], ["Toaster", "Grille-pain", "A2", 4], ["Toe", "Orteil", "A2", 7], ["Tomato", "Tomate", "A1", 9], ["Tongs", "Pince", "B2", 4], ["Tongue", "Langue", "A2", 8], ["Tooth", "Dent", "A1", 10]]']
        [API_TOKENS] 155
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['Toothbrush', 'Top', 'Torch', 'Tornado', 'Towel', 'Toy', 'Tractor', 'Train', 'Tram', 'Trampoline']
        [API_ANSWER] ['[["Toothbrush", "Brosse à dents", "A2", 9],', ' ["Top", "Haut/Sommet", "B1", 6],', ' ["Torch", "Lampe de poche", "B2", 5],', ' ["Tornado", "Tornade", "C1", 2],', ' ["Towel", "Serviette", "A2", 8],', ' ["Toy", "Jouet", "A1", 10],', ' ["Tractor", "Tracteur", "A2", 5],', ' ["Train", "Train", "A1", 10],', ' ["Tram", "Tramway", "B1", 4],', ' ["Trampoline", "Trampoline", "B2", 3]]']
        [API_TOKENS] 163
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['Tray', 'Tree', 'Triangle', 'Tricycle', 'Trolley', 'Trombone', 'Trophy', 'Trousers', 'Truck', 'Trumpet']
        [API_ANSWER] ['[["Tray", "Plateau", "A2", 5], ["Tree", "Arbre", "A1", 10], ["Triangle", "Triangle", "A2", 6], ["Tricycle", "Tricycle", "A2", 3], ["Trolley", "Chariot", "B1", 5], ["Trombone", "Trombone", "B2", 3], ["Trophy", "Trophée", "B2", 4], ["Trousers", "Pantalon", "A2", 7], ["Truck", "Camion", "A2", 8], ["Trumpet", "Trompette", "B1", 4]]']
        [API_TOKENS] 156
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['Trunk', 'Tuba', 'Tulip', 'Tuna', 'Tunnel', 'Turban', 'Turkey', 'Turnip', 'Turtle', 'Tweezers']
        [API_ANSWER] ['[["Trunk", "Tronc", "A2", 6], ["Tuba", "Tuba", "B2", 4], ["Tulip", "Tulipe", "A2", 3], ["Tuna", "Thon", "B2", 5], ["Tunnel", "Tunnel", "B1", 6], ["Turban", "Turban", "B2", 3], ["Turkey", "Dinde", "A2", 4], ["Turnip", "Navet", "A2", 3], ["Turtle", "Tortue", "A2", 4], ["Tweezers", "Pince à épiler", "B2", 3]]']
        [API_TOKENS] 159
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['Twig', 'Twilight', 'Twine', 'Twist', 'Typewriter', 'Typhoon', 'Tyrannosaurus']
        [API_ANSWER] ['[["Twig", "Brindille", "A2", 4], ["Twilight", "Crépuscule", "B2", 8], ["Twine", "Ficelle", "B2", 5], ["Twist", "Torsion", "B2", 6], ["Typewriter", "Machine à écrire", "B1", 3], ["Typhoon", "Typhon", "C1", 2], ["Tyrannosaurus", "Tyrannosaure", "B2", 3]]']
        [API_TOKENS] 119
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/nouns/csv/t.csv
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a daisy', 'a dam', 'a dancer', 'a dart', 'a data', 'a daydream', 'a deadline', 'a deal', 'a debate', 'a debt']
        [API_ANSWER] ['[["a daisy", "une marguerite", "A2", 5], ["a dam", "un barrage", "B2", 4], ["a dancer", "un danseur/une danseuse", "B1", 6], ["a dart", "une fléchette", "B2", 3], ["a data", "des données", "B1", 8], ["a daydream", "un rêve éveillé", "B2", 2], ["a deadline", "une date limite", "B2", 7], ["a deal", "un accord", "B2", 8], ["a debate", "un débat", "B2", 7], ["a debt", "une dette", "B2", 8]]']
        [API_TOKENS] 173
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a decade', 'a decoration', 'a dedication', 'a deer', 'a deficiency', 'a definition', 'a delivery', 'a democracy', 'a demonstration', 'a dentist']
        [API_ANSWER] ['[["a decade", "une décennie", "B2", 6], ["a decoration", "une décoration", "A2", 7], ["a dedication", "une dédicace", "B2", 3], ["a deer", "un cerf", "A2", 2], ["a deficiency", "une carence", "C1", 4], ["a definition", "une définition", "A2", 8], ["a delivery", "une livraison", "B2", 6], ["a democracy", "une démocratie", "B2", 8], ["a demonstration", "une démonstration", "B1", 6], ["a dentist", "un dentiste", "A2", 7]]']
        [API_TOKENS] 164
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a depression', 'a desert', 'a design', 'a desire', 'a desk', 'a detective', 'a development', 'a device', 'a devil', 'a diamond']
        [API_ANSWER] ['[["a depression", "une dépression", "B2", 5],', ' ["a desert", "un désert", "A2", 6],', ' ["a design", "un design", "B2", 7],', ' ["a desire", "un désir", "B1", 6],', ' ["a desk", "un bureau", "A1", 8],', ' ["a detective", "un détective", "B2", 4],', ' ["a development", "un développement", "B2", 7],', ' ["a device", "un appareil", "B1", 8],', ' ["a devil", "un diable", "C1", 3],', ' ["a diamond", "un diamant", "B2", 5]]']
        [API_TOKENS] 158
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a dictionary', 'a diet', 'a difference', 'a difficulty', 'a digression', 'a dilemma', 'a dime', 'a dimension', 'a dinner', 'a dinosaur']
        [API_ANSWER] ['[["a dictionary", "un dictionnaire", "B2", 10],', ' ["a diet", "un régime", "B2", 7],', ' ["a difference", "une différence", "A2", 10],', ' ["a difficulty", "une difficulté", "A2", 9],', ' ["a digression", "une digression", "C1", 3],', ' ["a dilemma", "un dilemme", "C1", 4],', ' ["a dime", "dix cents", "B2", 2],', ' ["a dimension", "une dimension", "B2", 7],', ' ["a dinner", "un dîner", "A2", 8],', ' ["a dinosaur", "un dinosaure", "A2", 5]]']
        [API_TOKENS] 165
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a diploma', 'a direction', 'a director', 'a dirt', 'a disability', 'a disaster', 'a discovery', 'a discussion', 'a disease', 'a dish']
        [API_ANSWER] ['[["a diploma", "un diplôme", "B2", 5], ["a direction", "une direction", "A2", 7], ["a director", "un directeur", "A2", 6], ["a dirt", "de la saleté", "B1", 4], ["a disability", "un handicap", "B2", 5], ["a disaster", "une catastrophe", "B1", 6], ["a discovery", "une découverte", "B2", 5], ["a discussion", "une discussion", "A2", 8], ["a disease", "une maladie", "B1", 8], ["a dish", "un plat", "A2", 9]]']
        [API_TOKENS] 160
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a disk', 'a dismissal', 'a display', 'a distance', 'a distribution', 'a district', 'a diversity', 'a division', 'a divorce', 'a doctor']
        [API_ANSWER] ['[["a disk", "un disque", "B1", 6], ["a dismissal", "un renvoi", "B2", 4], ["a display", "un affichage", "B2", 6], ["a distance", "une distance", "A2", 8], ["a distribution", "une distribution", "B2", 6], ["a district", "un quartier", "B1", 5], ["a diversity", "une diversité", "B2", 4], ["a division", "une division", "B2", 6], ["a divorce", "un divorce", "B1", 5], ["a doctor", "un médecin", "A2", 10]]']
        [API_TOKENS] 159
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a document', 'a dog', 'a dogma', 'a doll', 'a dolphin', 'a domain', 'a donation', 'a donkey', 'a door', 'a dose']
        [API_ANSWER] ['[["a document", "un document", "B2", 8], ["a dog", "un chien", "A1", 10], ["a dogma", "un dogme", "C1", 3], ["a doll", "une poupée", "A2", 5], ["a dolphin", "un dauphin", "B1", 2], ["a domain", "un domaine", "B2", 6], ["a donation", "un don", "B2", 4], ["a donkey", "un âne", "A2", 3], ["a door", "une porte", "A1", 10], ["a dose", "une dose", "B2", 6]]']
        [API_TOKENS] 160
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a dot', 'a doubt', 'a doughnut', 'a dozen', 'a dragon', 'a drama', 'a drawer', 'a dream', 'a dress', 'a drift']
        [API_ANSWER] ['[["a dot", "un point", "A2", 6], ["a doubt", "un doute", "B2", 5], ["a doughnut", "un beignet", "A2", 3], ["a dozen", "une douzaine", "A2", 5], ["a dragon", "un dragon", "B1", 3], ["a drama", "un drame", "B2", 5], ["a drawer", "un tiroir", "A2", 5], ["a dream", "un rêve", "A2", 7], ["a dress", "une robe", "A1", 8], ["a drift", "une dérive", "C1", 2]]']
        [API_TOKENS] 162
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a drill', 'a drink', 'a drive', 'a driver', 'a drop', 'a drug', 'a drum', 'a duck', 'a due', 'a duke']
        [API_ANSWER] ['[["a drill", "une perceuse", "B1", 5], ["a drink", "une boisson", "A1", 10], ["a drive", "une conduite", "B2", 7], ["a driver", "un conducteur", "B1", 6], ["a drop", "une goutte", "B2", 5], ["a drug", "un médicament", "B2", 6], ["a drum", "un tambour", "B1", 4], ["a duck", "un canard", "A1", 5], ["a due", "un dû", "C1", 3], ["a duke", "un duc", "C2", 2]]']
        [API_TOKENS] 163
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of nouns and guidelines, you have to create a list of list. For each nouns, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
nouns
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of nouns into the expected list of lists of nouns without comments. ['a dumbbell', 'a dump', 'a dungeon', 'a duration', 'a dust', 'a duty', 'a dwarf', 'a dynamic', 'a dynasty']
        [API_ANSWER] ['[["a dumbbell", "un haltère", "B1", 4],', ' ["a dump", "un dépotoir", "B2", 3],', ' ["a dungeon", "un donjon", "C1", 2],', ' ["a duration", "une durée", "B1", 5],', ' ["a dust", "de la poussière", "A2", 7],', ' ["a duty", "un devoir", "B1", 6],', ' ["a dwarf", "un nain", "B2", 3],', ' ["a dynamic", "un dynamique", "C1", 4],', ' ["a dynasty", "une dynastie", "C1", 3]]']
        [API_TOKENS] 150
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/nouns/csv/d.csv
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to calculate', 'to call', 'to carry', 'to catch', 'to change', 'to chat', 'to check', 'to cheer', 'to chew', 'to choose']
        [API_ANSWER] ['[["to calculate", "calculer", "B2", 6], ["to call", "appeler", "A2", 8], ["to carry", "porter", "A2", 7], ["to catch", "attraper", "A2", 7], ["to change", "changer", "A2", 9], ["to chat", "discuter", "B1", 4], ["to check", "vérifier", "B1", 7], ["to cheer", "encourager", "B2", 3], ["to chew", "mâcher", "A2", 4], ["to choose", "choisir", "A2", 9]]']
        [API_TOKENS] 153
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to clap', 'to classify', 'to clean', 'to climb', 'to close', 'to coach', 'to coil', 'to collect', 'to color', 'to comb']
        [API_ANSWER] ['[["to clap", "applaudir", "B1", 5], ["to classify", "classer", "B2", 4], ["to clean", "nettoyer", "A1", 8], ["to climb", "grimper", "B1", 6], ["to close", "fermer", "A1", 9], ["to coach", "entraîner", "B2", 5], ["to coil", "enrouler", "C1", 2], ["to collect", "collecter", "B2", 4], ["to color", "colorier", "A2", 5], ["to comb", "peigner", "A2", 6]]']
        [API_TOKENS] 156
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to comfort', 'to command', 'to communicate', 'to compare', 'to compete', 'to complete', 'to compose', 'to compute', 'to concentrate', 'to conclude']
        [API_ANSWER] ['[["to comfort", "réconforter", "B1", 5], ["to command", "commander", "B2", 6], ["to communicate", "communiquer", "A2", 8], ["to compare", "comparer", "A2", 7], ["to compete", "concurrencer", "B2", 5], ["to complete", "compléter", "A2", 7], ["to compose", "composer", "B2", 5], ["to compute", "calculer", "B2", 4], ["to concentrate", "concentrer", "B1", 6], ["to conclude", "conclure", "B2", 6]]']
        [API_TOKENS] 158
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to conduct', 'to confess', 'to confuse', 'to connect', 'to consider', 'to consist', 'to construct', 'to consume', 'to contain', 'to continue']
        [API_ANSWER] ['[["to conduct", "conduire", "B2", 6], ["to confess", "confesser", "B2", 3], ["to confuse", "confondre", "B2", 5], ["to connect", "connecter", "B1", 6], ["to consider", "considérer", "B2", 7], ["to consist", "consister", "B2", 4], ["to construct", "construire", "B1", 6], ["to consume", "consommer", "B1", 5], ["to contain", "contenir", "B1", 6], ["to continue", "continuer", "A2", 8]]']
        [API_TOKENS] 157
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to cook', 'to copy', 'to correct', 'to correspond', 'to count', 'to cover', 'to crack', 'to create', 'to cross', 'to cry']
        [API_ANSWER] ['[["to cook", "cuisiner", "A2", 7], ["to copy", "copier", "A2", 6], ["to correct", "corriger", "B1", 6], ["to correspond", "correspondre", "B1", 5], ["to count", "compter", "A2", 7], ["to cover", "couvrir", "A2", 6], ["to crack", "craquer", "B2", 3], ["to create", "créer", "A2", 6], ["to cross", "traverser", "A2", 6], ["to cry", "pleurer", "A2", 6]]']
        [API_TOKENS] 156
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/verbs/csv/c.csv
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to kayak', 'to keep', 'to kibitz', 'to kibosh', 'to kick', 'to kidnap', 'to kill', 'to kindle', 'to kiss', 'to knead']
        [API_ANSWER] ['[["to kayak", "faire du kayak", "B1", 3], ["to keep", "garder", "A2", 9], ["to kibitz", "commenter", "C1", 1], ["to kibosh", "anéantir", "C2", 1], ["to kick", "donner un coup de pied", "A2", 8], ["to kidnap", "enlever", "B2", 4], ["to kill", "tuer", "A2", 9], ["to kindle", "allumer", "B2", 4], ["to kiss", "embrasser", "A2", 8], ["to knead", "pétrir", "B2", 3]]']
        [API_TOKENS] 168
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to kneecap', 'to kneel', 'to knit', 'to knitpick', 'to knock', 'to knockdown', 'to knot', 'to know', 'to kowtow']
        [API_ANSWER] ['[["to kneecap", "briser les genoux", "C2", 1], ["to kneel", "s\'agenouiller", "B2", 4], ["to knit", "tricoter", "A2", 5], ["to knitpick", "ergoter", "C1", 2], ["to knock", "frapper", "A2", 7], ["to knockdown", "abattre", "C1", 3], ["to knot", "nouer", "B1", 6], ["to know", "savoir", "A1", 10], ["to kowtow", "faire la courbette", "C2", 1]]']
        [API_TOKENS] 157
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/verbs/csv/k.csv
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to eat', 'to embrace', 'to endure', 'to enjoy', 'to enlighten', 'to enlist', 'to enrage', 'to enrich', 'to enroll', 'to entertain']
        [API_ANSWER] ['[["to eat", "manger", "A1", 10], ["to embrace", "embrasser", "B2", 5], ["to endure", "endurer", "C1", 3], ["to enjoy", "apprécier", "B1", 8], ["to enlighten", "éclairer", "C2", 2], ["to enlist", "s\'engager", "B2", 4], ["to enrage", "enrager", "C1", 2], ["to enrich", "enrichir", "B2", 5], ["to enroll", "s\'inscrire", "A2", 6], ["to entertain", "divertir", "B1", 7]]']
        [API_TOKENS] 163
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to envy', 'to equip', 'to erase', 'to establish', 'to estimate', 'to evacuate', 'to evaluate', 'to evaporate', 'to evict', 'to evoke']
        [API_ANSWER] ['[["to envy", "envier", "B2", 4], ["to equip", "équiper", "B1", 5], ["to erase", "effacer", "B2", 4], ["to establish", "établir", "B2", 6], ["to estimate", "estimer", "B2", 5], ["to evacuate", "évacuer", "B2", 5], ["to evaluate", "évaluer", "B2", 6], ["to evaporate", "évaporer", "B2", 3], ["to evict", "expulser", "C1", 3], ["to evoke", "évoquer", "B2", 5]]']
        [API_TOKENS] 161
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to evolve', 'to exaggerate', 'to examine', 'to exchange', 'to excite', 'to excuse', 'to execute', 'to exercise', 'to exhibit', 'to exist']
        [API_ANSWER] ['[["to evolve", "évoluer", "B2", 5], ["to exaggerate", "exagérer", "B2", 4], ["to examine", "examiner", "B2", 6], ["to exchange", "échanger", "B1", 6], ["to excite", "exciter", "B2", 5], ["to excuse", "excuser", "B1", 5], ["to execute", "exécuter", "B2", 5], ["to exercise", "exercer", "B1", 6], ["to exhibit", "exposer", "B2", 5], ["to exist", "exister", "A2", 7]]']
        [API_TOKENS] 158
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to expand', 'to expect', 'to experience', 'to experiment', 'to explain', 'to explode', 'to explore', 'to export', 'to express', 'to extend']
        [API_ANSWER] ['[["to expand", "étendre", "B2", 6], ["to expect", "s\'attendre à", "B1", 7], ["to experience", "expérimenter", "B2", 5], ["to experiment", "expérimenter", "B2", 5], ["to explain", "expliquer", "A2", 9], ["to explode", "exploser", "B2", 3], ["to explore", "explorer", "B2", 4], ["to export", "exporter", "B2", 5], ["to express", "exprimer", "B1", 7], ["to extend", "étendre", "B2", 5]]']
        [API_TOKENS] 160
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to extract']
        [API_ANSWER] ['[["extract", "extraire", "B2", 5]]']
        [API_TOKENS] 15
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/verbs/csv/e.csv
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to gather', 'to gaze', 'to get', 'to give', 'to glance', 'to glare', 'to glide', 'to glimpse', 'to gnaw', 'to go']
        [API_ANSWER] ['[["to gather", "rassembler", "B2", 6], ["to gaze", "regarder fixement", "B2", 5], ["to get", "obtenir", "A2", 10], ["to give", "donner", "A1", 10], ["to glance", "jeter un coup d\'œil", "B2", 4], ["to glare", "regarder fixement", "C1", 3], ["to glide", "glisser", "B2", 3], ["to glimpse", "apercevoir", "C1", 3], ["to gnaw", "ronger", "C2", 1], ["to go", "aller", "A1", 10]]']
        [API_TOKENS] 165
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to gobble', 'to gossip', 'to grab', 'to graduate', 'to grant', 'to grasp', 'to grease', 'to greet', 'to grill', 'to grimace']
        [API_ANSWER] ['[["to gobble", "engloutir", "B1", 3], ["to gossip", "colporter des ragots", "B2", 4], ["to grab", "saisir", "B1", 6], ["to graduate", "obtenir son diplôme", "B2", 5], ["to grant", "accorder", "B2", 5], ["to grasp", "saisir", "B2", 6], ["to grease", "graisser", "B2", 3], ["to greet", "saluer", "A2", 6], ["to grill", "griller", "B1", 5], ["to grimace", "grimacer", "C1", 3]]']
        [API_TOKENS] 164
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to grin', 'to grind', 'to grip', 'to groan', 'to grow', 'to growl', 'to grumble', 'to grunt', 'to guarantee', 'to guard']
        [API_ANSWER] ['[["to grin", "sourire largement", "B1", 4], ["to grind", "moudre", "B2", 5], ["to grip", "saisir", "B2", 6], ["to groan", "gémir", "C1", 3], ["to grow", "grandir", "A2", 6], ["to growl", "gronder", "C1", 2], ["to grumble", "ronchonner", "B2", 4], ["to grunt", "grogner", "C1", 3], ["to guarantee", "garantir", "B2", 7], ["to guard", "garder", "A2", 8]]']
        [API_TOKENS] 164
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to guess', 'to guide', 'to gulp', 'to gurgle', 'to gush', 'to gut', 'to guzzle']
        [API_ANSWER] ['[["to guess", "deviner", "B1", 6], ["to guide", "guider", "B2", 5], ["to gulp", "engloutir", "B2", 4], ["to gurgle", "gargouiller", "B2", 3], ["to gush", "jaillir", "C1", 4], ["to gut", "éviscérer", "C1", 3], ["to guzzle", "engloutir", "C2", 3]]']
        [API_TOKENS] 117
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/verbs/csv/g.csv
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to quack', 'to quackling', 'to quadruple', 'to quadrupling', 'to quaff', 'to quaffing', 'to quail', 'to quailing', 'to quake', 'to quaking']
        [API_ANSWER] ['[["to quack", "canarder", "B2", 3], ["to quackling", "gazouiller", "C1", 1], ["to quadruple", "quadrupler", "C1", 2], ["to quadrupling", "quadrupler", "C1", 1], ["to quaff", "s\'enivrer", "C2", 2], ["to quaffing", "s\'enivrer", "C2", 1], ["to quail", "avoir peur", "B2", 3], ["to quailing", "avoir peur", "B2", 1], ["to quake", "trembler", "B1", 5], ["to quaking", "trembler", "B1", 2]]']
        [API_TOKENS] 180
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to qualify', 'to qualifying', 'to quantify', 'to quantifying', 'to quarantine', 'to quarantining', 'to quarrel', 'to quarrelling', 'to quarry', 'to quarrying']
        [API_ANSWER] ['[["to qualify", "qualifier", "B2", 5], ["to qualifying", "qualifiant", "B2", 3], ["to quantify", "quantifier", "C1", 3], ["to quantifying", "quantifiant", "C1", 2], ["to quarantine", "mettre en quarantaine", "B2", 4], ["to quarantining", "mettant en quarantaine", "B2", 2], ["to quarrel", "se disputer", "B2", 5], ["to quarrelling", "se disputant", "B2", 3], ["to quarry", "extraire", "B2", 4], ["to quarrying", "extrayant", "B2", 2]]']
        [API_TOKENS] 169
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to quarter', 'to quartering', 'to quash', 'to quashing', 'to quaver', 'to quavering', 'to queening', 'to queer', 'to quell', 'to quelling']
        [API_ANSWER] ['[["to quarter", "quartage", "B2", 4], ["to quartering", "quartage", "C1", 2], ["to quash", "annuler", "C2", 4], ["to quashing", "annulation", "C2", 2], ["to quaver", "trembler", "B2", 3], ["to quavering", "tremblant", "C1", 2], ["to queening", "dame", "C2", 1], ["to queer", "étrange", "C1", 2], ["to quell", "réprimer", "C1", 4], ["to quelling", "répression", "C1", 2]]']
        [API_TOKENS] 166
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to quench', 'to quenching', 'to query', 'to querying', 'to quest', 'to question', 'to questioning', 'to queue', 'to queuing', 'to quicken']
        [API_ANSWER] ['[["to quench", "éteindre-étancher", "B2", 4], ["to quenching", "éteignant-étanchant", "B2", 2], ["to query", "interroger-questionner", "B2", 5], ["to querying", "interrogeant-questionnant", "B2", 3], ["to quest", "chercher-rechercher", "C1", 2], ["to question", "questionner-interroger", "B1", 8], ["to questioning", "questionnant-interrogeant", "B1", 5], ["to queue", "faire la queue", "A2", 6], ["to queuing", "faisant la queue", "A2", 4], ["to quicken", "accélérer", "C1", 3]]']
        [API_TOKENS] 189
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to quickening', 'to quickstep', 'to quiet', 'to quieten', 'to quietening', 'to quilt', 'to quilting', 'to quintuple', 'to quintupling', 'to quip']
        [API_ANSWER] ['[["to quickening", "accélérer", "C1", 2], ["to quickstep", "danser le quickstep", "B2", 2], ["to quiet", "calmer", "B1", 4], ["to quieten", "calmer", "B2", 3], ["to quietening", "calmant", "C1", 1], ["to quilt", "quilter", "B2", 2], ["to quilting", "quilter", "B2", 2], ["to quintuple", "quintupler", "C1", 1], ["to quintupling", "quintupler", "C1", 1], ["to quip", "faire une plaisanterie", "C1", 3]]']
        [API_TOKENS] 173
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to quipping', 'to quirk', 'to quirking', 'to quit', 'to quitting', 'to quiver', 'to quivering', 'to quiz', 'to quizzing']
        [API_ANSWER] ['[["to quipping", "faire des plaisanteries", "C1", 3],', ' ["to quirk", "faire une grimace", "B2", 2],', ' ["to quirking", "faire une grimace", "C1", 1],', ' ["to quit", "quitter", "A2", 8],', ' ["to quitting", "quitter", "B1", 5],', ' ["to quiver", "trembler", "B2", 4],', ' ["to quivering", "trembler", "C1", 2],', ' ["to quiz", "interroger", "B2", 4],', ' ["to quizzing", "interroger", "C1", 2]]']
        [API_TOKENS] 157
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/verbs/csv/q.csv
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to abandon', 'to accelerate', 'to accompany', 'to accomplish', 'to accuse', 'to achieve', 'to acknowledge', 'to acquire', 'to act', 'to activate']
        [API_ANSWER] ['[["to abandon", "abandonner", "B2", 5], ["to accelerate", "accélérer", "B2", 4], ["to accompany", "accompagner", "B1", 5], ["to accomplish", "accomplir", "B2", 4], ["to accuse", "accuser", "B2", 4], ["to achieve", "réaliser", "B2", 5], ["to acknowledge", "reconnaître", "C1", 4], ["to acquire", "acquérir", "B2", 4], ["to act", "agir", "B2", 5], ["to activate", "activer", "B2", 4]]']
        [API_TOKENS] 160
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to adapt', 'to add', 'to address', 'to adjust', 'to administer', 'to admire', 'to admit', 'to adopt', 'to advance', 'to advertise']
        [API_ANSWER] ['[["to adapt", "s\'adapter", "B2", 6], ["to add", "ajouter", "A2", 8], ["to address", "adresser", "B2", 5], ["to adjust", "ajuster", "B2", 6], ["to administer", "administrer", "C1", 4], ["to admire", "admirer", "B1", 5], ["to admit", "admettre", "B2", 5], ["to adopt", "adopter", "B1", 6], ["to advance", "avancer", "B2", 6], ["to advertise", "faire de la publicité", "B2", 5]]']
        [API_TOKENS] 158
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to advise', 'to afford', 'to age', 'to agree', 'to aid', 'to aim', 'to alert', 'to allege', 'to allocate', 'to allow']
        [API_ANSWER] ['[["to advise", "conseiller", "B2", 6], ["to afford", "avoir les moyens de", "B2", 5], ["to age", "vieillir", "A2", 3], ["to agree", "être d\'accord", "A2", 8], ["to aid", "aider", "B2", 6], ["to aim", "viser", "B2", 5], ["to alert", "alerter", "B2", 4], ["to allege", "prétendre", "C1", 3], ["to allocate", "allouer", "B2", 5], ["to allow", "permettre", "A2", 10]]']
        [API_TOKENS] 163
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to alter', 'to amaze', 'to analyze', 'to announce', 'to annoy', 'to answer', 'to anticipate', 'to apologize', 'to appeal', 'to appear']
        [API_ANSWER] ['[["to alter", "modifier", "B2", 5], ["to amaze", "étonner", "B2", 3], ["to analyze", "analyser", "B2", 4], ["to announce", "annoncer", "B1", 6], ["to annoy", "agacer", "B2", 5], ["to answer", "répondre", "A2", 8], ["to anticipate", "anticiper", "C1", 3], ["to apologize", "s\'excuser", "B2", 4], ["to appeal", "appeler", "B2", 4], ["to appear", "apparaître", "A1", 9]]']
        [API_TOKENS] 156
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to applaud', 'to apply', 'to appoint', 'to appreciate', 'to approach', 'to approve', 'to argue', 'to arise', 'to arrange', 'to arrest']
        [API_ANSWER] ['[["to applaud", "applaudir", "B2", 4], ["to apply", "postuler - appliquer", "B1", 6], ["to appoint", "nommer", "B2", 5], ["to appreciate", "apprécier", "B1", 6], ["to approach", "approcher", "A2", 6], ["to approve", "approuver", "B2", 5], ["to argue", "argumenter", "B2", 5], ["to arise", "survenir", "C1", 4], ["to arrange", "organiser", "B1", 6], ["to arrest", "arrêter", "B2", 5]]']
        [API_TOKENS] 159
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to arrive', 'to articulate', 'to ask', 'to assemble', 'to assert', 'to assess', 'to assign', 'to assist', 'to assume', 'to assure']
        [API_ANSWER] ['[["to arrive", "arriver", "A2", 8], ["to articulate", "articuler", "B2", 5], ["to ask", "demander", "A1", 10], ["to assemble", "assembler", "B2", 4], ["to assert", "affirmer", "C1", 4], ["to assess", "évaluer", "B2", 6], ["to assign", "assigner", "B2", 5], ["to assist", "aider", "B1", 8], ["to assume", "supposer", "B2", 6], ["to assure", "assurer", "B1", 8]]']
        [API_TOKENS] 153
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to attach', 'to attack', 'to attempt', 'to attend', 'to attract', 'to auction', 'to audit', 'to avert', 'to avoid', 'to await']
        [API_ANSWER] ['[["to attach", "attacher", "B1", 6], ["to attack", "attaquer", "B2", 7], ["to attempt", "tenter - essayer", "B2", 7], ["to attend", "assister à", "B1", 8], ["to attract", "attirer", "B1", 7], ["to auction", "mettre aux enchères", "C1", 3], ["to audit", "vérifier - contrôler", "C1", 4], ["to avert", "éviter", "C1", 5], ["to avoid", "éviter", "A2", 8], ["to await", "attendre", "B2", 6]]']
        [API_TOKENS] 167
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to awake', 'to award']
        [API_ANSWER] ['[["to awake", "se réveiller", "A2", 5], ["to award", "décerner", "B2", 6]]']
        [API_TOKENS] 34
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/verbs/csv/a.csv
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to zero', 'to zest', 'to zestify', 'to zinc', 'to zing', 'to zip', 'to zombify', 'to zone', 'to zoogeographers', 'to zoogeographic']
        [API_ANSWER] ['[["to zero", "mettre à zéro", "B2", 4], ["to zest", "zester", "B2", 2], ["to zestify", "zestifier", "C1", 1], ["to zinc", "zincifier", "C2", 1], ["to zing", "zinguer", "C1", 1], ["to zip", "fermeture éclair", "B2", 5], ["to zombify", "zombifier", "C1", 1], ["to zone", "zonage", "B2", 4], ["to zoogeographers", "zoogéographes", "C2", 1], ["to zoogeographic", "zoogéographique", "C2", 1]]']
        [API_TOKENS] 174
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to zoogeographical', 'to zoogeographies', 'to zookeep', 'to zoologize', 'to zoom', 'to zoophagize', 'to zoophyte', 'to zooplankton', 'to zoosporangium', 'to zoosporize']
        [API_ANSWER] ['[["to zoogeographical", "zoogéographique", "C2", 1], ["to zoogeographies", "zoogéographies", "C2", 1], ["to zookeep", "soigner des animaux", "B2", 2], ["to zoologize", "zoologiser", "C1", 1], ["to zoom", "zoomer", "A2", 5], ["to zoophagize", "zoophagiser", "C2", 1], ["to zoophyte", "zoophyte", "C2", 1], ["to zooplankton", "zooplancton", "C2", 1], ["to zoosporangium", "zoosporangium", "C2", 1], ["to zoosporize", "zoosporiser", "C2", 1]]']
        [API_TOKENS] 192
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to zootomize']
        [API_ANSWER] ['[["to zootomize", "zootomiser", "C2", 1]]']
        [API_TOKENS] 21
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/verbs/csv/z.csv
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to hail', 'to harass', 'to harden', 'to harm', 'to harness', 'to hasten', 'to hatch', 'to haul', 'to heal', 'to heap']
        [API_ANSWER] ['[["to hail", "saluer de loin", "B2", 4], ["to harass", "harceler", "B2", 5], ["to harden", "durcir", "B2", 5], ["to harm", "nuire", "B2", 6], ["to harness", "exploiter", "C1", 4], ["to hasten", "se dépêcher", "C1", 4], ["to hatch", "éclore", "B2", 3], ["to haul", "remorquer", "C1", 4], ["to heal", "guérir", "B2", 6], ["to heap", "entasser", "C1", 4]]']
        [API_TOKENS] 160
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to hear', 'to heat', 'to help', 'to hesitate', 'to hide', 'to highlight', 'to hinder', 'to hire', 'to hit', 'to hold']
        [API_ANSWER] ['[["to hear", "entendre", "A2", 8], ["to heat", "chauffer", "B1", 5], ["to help", "aider", "A2", 9], ["to hesitate", "hésiter", "B1", 6], ["to hide", "cacher", "A2", 7], ["to highlight", "surligner", "B2", 4], ["to hinder", "gêner", "C1", 3], ["to hire", "embaucher", "B1", 6], ["to hit", "frapper", "A2", 8], ["to hold", "tenir", "A2", 9]]']
        [API_TOKENS] 156
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to hone', 'to hook', 'to hop', 'to hope', 'to hover', 'to huddle', 'to hug', 'to hum', 'to hunt', 'to hurry']
        [API_ANSWER] ['[["to hone", "affûter", "C1", 4], ["to hook", "crocheter", "B2", 5], ["to hop", "sauter", "A2", 4], ["to hope", "espérer", "A2", 7], ["to hover", "planer", "B2", 3], ["to huddle", "se blottir", "B2", 3], ["to hug", "prendre dans ses bras", "A2", 6], ["to hum", "chanter", "B1", 4], ["to hunt", "chasser", "B2", 4], ["to hurry", "se dépêcher", "B1", 7]]']
        [API_TOKENS] 162
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to hurt', 'to hustle', 'to hyphenate']
        [API_ANSWER] ['[["to hurt", "blesser", "B2", 6], ["to hustle", "bousculer", "B2", 4], ["to hyphenate", "mettre un trait d\'union", "C1", 2]]']
        [API_TOKENS] 55
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/verbs/csv/h.csv
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to reach', 'to read', 'to realize', 'to reap', 'to rearrange', 'to rebel', 'to rebuild', 'to recharge', 'to recite', 'to reclaim']
        [API_ANSWER] ['[["to reach", "atteindre", "B2", 7], ["to read", "lire", "A1", 10], ["to realize", "réaliser", "B2", 6], ["to reap", "récolter", "C1", 3], ["to rearrange", "réarranger", "C1", 2], ["to rebel", "se rebeller", "B2", 4], ["to rebuild", "rebâtir", "B2", 5], ["to recharge", "recharger", "B1", 4], ["to recite", "réciter", "B1", 5], ["to reclaim", "récupérer", "B2", 6]]']
        [API_TOKENS] 161
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to reconcile', 'to reconnect', 'to reconsider', 'to recreate', 'to redecorate', 'to redefine', 'to redesign', 'to redirect', 'to rediscover', 'to redistribute']
        [API_ANSWER] ['[["to reconcile", "réconcilier", "B2", 5], ["to reconnect", "reconnecter", "B2", 4], ["to reconsider", "reconsidérer", "B2", 5], ["to recreate", "recréer", "B2", 4], ["to redecorate", "redécorer", "B2", 4], ["to redefine", "redéfinir", "B2", 5], ["to redesign", "redessiner", "B2", 4], ["to redirect", "rediriger", "B2", 5], ["to rediscover", "redécouvrir", "B2", 4], ["to redistribute", "redistribuer", "B2", 5]]']
        [API_TOKENS] 169
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to reduce', 'to reel', 'to reenact', 'to reestablish', 'to reexamine', 'to refer', 'to refine', 'to reflect', 'to reform', 'to refresh']
        [API_ANSWER] ['[["to reduce", "réduire", "B2", 7], ["to reel", "enrouler", "B2", 4], ["to reenact", "rejouer", "B2", 2], ["to reestablish", "rétablir", "B2", 5], ["to reexamine", "réexaminer", "B2", 4], ["to refer", "référer", "B2", 6], ["to refine", "affiner", "B2", 5], ["to reflect", "réfléchir", "B2", 7], ["to reform", "réformer", "B2", 6], ["to refresh", "rafraîchir", "B2", 5]]']
        [API_TOKENS] 169
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to refrigerate', 'to refuel', 'to refuse', 'to refute', 'to regain', 'to regard', 'to register', 'to regret', 'to regulate', 'to rehearse']
        [API_ANSWER] ['[["to refrigerate", "réfrigérer", "B2", 4], ["to refuel", "faire le plein", "B2", 5], ["to refuse", "refuser", "A2", 8], ["to refute", "réfuter", "C1", 2], ["to regain", "récupérer", "B2", 5], ["to regard", "regarder", "A1", 10], ["to register", "enregistrer", "A2", 9], ["to regret", "regretter", "B1", 7], ["to regulate", "réguler", "C1", 4], ["to rehearse", "répéter", "B1", 6]]']
        [API_TOKENS] 167
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to rejoice', 'to relax', 'to rely', 'to remember', 'to repair', 'to reproduce', 'to resist', 'to ride', 'to run']
        [API_ANSWER] ['[["to rejoice", "se réjouir", "B2", 4], ["to relax", "se détendre", "B1", 5], ["to rely", "compter sur", "B2", 5], ["to remember", "se souvenir de", "A2", 6], ["to repair", "réparer", "B1", 5], ["to reproduce", "reproduire", "B2", 3], ["to resist", "résister", "B2", 5], ["to ride", "monter (à cheval, à vélo)", "A2", 4], ["to run", "courir", "A1", 8]]']
        [API_TOKENS] 153
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/verbs/csv/r.csv
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to vacate', 'to validate', 'to value', 'to vandalize', 'to vanish', 'to vaporize', 'to vary', 'to vault', 'to veer', 'to vegetate']
        [API_ANSWER] ['[["to vacate", "quitter-vider", "B2", 6], ["to validate", "valider", "B2", 5], ["to value", "estimer-valoriser", "B2", 6], ["to vandalize", "dégrader-vandaliser", "C1", 2], ["to vanish", "disparaître", "B2", 4], ["to vaporize", "vaporiser", "C1", 2], ["to vary", "varier", "B1", 7], ["to vault", "sauter-parcourir", "C1", 2], ["to veer", "tourner-changer de direction", "C1", 3], ["to vegetate", "végéter", "C1", 4]]']
        [API_TOKENS] 178
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to veil', 'to vend', 'to venerate', 'to vent', 'to venture', 'to verbalize', 'to verge', 'to verify', 'to versify', 'to vest']
        [API_ANSWER] ['[["to veil", "voiler", "B2", 3], ["to vend", "vendre", "B1", 5], ["to venerate", "vénérer", "C1", 2], ["to vent", "exprimer", "C1", 3], ["to venture", "s\'aventurer", "B2", 4], ["to verbalize", "verbaliser", "C1", 3], ["to verge", "frôler", "C1", 2], ["to verify", "vérifier", "B1", 7], ["to versify", "versifier", "C2", 1], ["to vest", "revêtir", "B2", 3]]']
        [API_TOKENS] 162
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to veto', 'to vex', 'to vibrate', 'to videotape', 'to vie', 'to view', 'to vilify', 'to visit', 'to visualize', 'to vitalize']
        [API_ANSWER] ['[["to veto", "mettre son veto", "C1", 4], ["to vex", "contrarier", "C2", 3], ["to vibrate", "vibrer", "B2", 5], ["to videotape", "enregistrer sur vidéo", "B2", 3], ["to vie", "lutter pour", "C2", 2], ["to view", "considérer", "B2", 6], ["to vilify", "calomnier", "C2", 2], ["to visit", "visiter", "A1", 8], ["to visualize", "visualiser", "B2", 4], ["to vitalize", "revitaliser", "C1", 2]]']
        [API_TOKENS] 166
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to vitiate', 'to vocalize', 'to vogue', 'to volunteer', 'to vomit', 'to vote', 'to vouch', 'to vow', 'to voyage', 'to vulcanise']
        [API_ANSWER] ['[["to vitiate", "altérer", "C2", 3], ["to vocalize", "vocaliser", "B2", 4], ["to vogue", "être en vogue", "C1", 2], ["to volunteer", "se porter volontaire", "B2", 6], ["to vomit", "vomir", "B1", 4], ["to vote", "voter", "A2", 8], ["to vouch", "garantir", "C1", 3], ["to vow", "promettre solennellement", "B2", 4], ["to voyage", "voyager", "B1", 3], ["to vulcanise", "vulcaniser", "C1", 2]]']
        [API_TOKENS] 172
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to vulcanize', 'to vulgarize']
        [API_ANSWER] ['[["to vulcanize", "vulcaniser", "B2", 3], ["to vulgarize", "vulgariser", "C1", 2]]']
        [API_TOKENS] 38
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/verbs/csv/v.csv
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to sail', 'to sanitize', 'to satisfy', 'to saturate', 'to scare', 'to scold', 'to scorch', 'to score', 'to scrape', 'to scratch']
        [API_ANSWER] ['[["to sail", "naviguer", "B2", 3], ["to sanitize", "assainir", "C1", 2], ["to satisfy", "satisfaire", "B1", 6], ["to saturate", "saturer", "C1", 2], ["to scare", "effrayer", "B1", 6], ["to scold", "gronder", "B2", 4], ["to scorch", "brûler", "B2", 3], ["to score", "marquer", "B2", 5], ["to scrape", "gratter", "B2", 5], ["to scratch", "gratter", "B1", 6]]']
        [API_TOKENS] 161
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to scream', 'to search', 'to sell', 'to separate', 'to serve', 'to settle', 'to sew', 'to shape', 'to share', 'to shatter']
        [API_ANSWER] ['[["to scream", "crier", "B1", 5], ["to search", "chercher", "A2", 7], ["to sell", "vendre", "A2", 9], ["to separate", "séparer", "B1", 6], ["to serve", "servir", "A2", 8], ["to settle", "régler", "B2", 5], ["to sew", "coudre", "A2", 4], ["to shape", "façonner", "B2", 4], ["to share", "partager", "A2", 8], ["to shatter", "briser", "C1", 3]]']
        [API_TOKENS] 157
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to shine', 'to shiver', 'to shoot', 'to shout', 'to show', 'to shrink', 'to shrug', 'to shut', 'to sigh', 'to simplify']
        [API_ANSWER] ['[["to shine", "briller", "B1", 5], ["to shiver", "frissonner", "B2", 3], ["to shoot", "tirer", "B1", 6], ["to shout", "crier", "A2", 6], ["to show", "montrer", "A1", 10], ["to shrink", "rétrécir", "B2", 2], ["to shrug", "hausser les épaules", "B2", 2], ["to shut", "fermer", "A2", 7], ["to sigh", "soupirer", "B2", 3], ["to simplify", "simplifier", "B2", 4]]']
        [API_TOKENS] 164
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to sin', 'to sing', 'to sit', 'to sketch', 'to skip', 'to slap', 'to sleep', 'to slice', 'to slide', 'to slip']
        [API_ANSWER] ['[["to sin", "pécher", "B2", 4], ["to sing", "chanter", "A2", 8], ["to sit", "s\'asseoir", "A1", 9], ["to sketch", "esquisser", "B2", 3], ["to skip", "sauter", "B1", 5], ["to slap", "gifler", "B2", 3], ["to sleep", "dormir", "A1", 10], ["to slice", "trancher", "B2", 4], ["to slide", "glisser", "B1", 6], ["to slip", "glisser", "B1", 6]]']
        [API_TOKENS] 157
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to smash', 'to smell', 'to smile', 'to smoke', 'to snap', 'to snatch', 'to sneak', 'to sneeze', 'to sniff', 'to snore']
        [API_ANSWER] ['[["to smash", "écraser", "B2", 5], ["to smell", "sentir", "A2", 6], ["to smile", "sourire", "A2", 7], ["to smoke", "fumer", "A2", 8], ["to snap", "claquer", "B2", 4], ["to snatch", "arracher", "C1", 3], ["to sneak", "se faufiler", "B2", 4], ["to sneeze", "éternuer", "A2", 6], ["to sniff", "renifler", "B1", 5], ["to snore", "ronfler", "B2", 4]]']
        [API_TOKENS] 161
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to snow', 'to soak', 'to solve', 'to sort', 'to sound', 'to sow', 'to spark', 'to speak', 'to specify', 'to spell']
        [API_ANSWER] ['[["to snow", "neiger", "A2", 5], ["to soak", "tremper", "B2", 4], ["to solve", "résoudre", "B1", 7], ["to sort", "classer", "B2", 5], ["to sound", "sonner", "B1", 6], ["to sow", "semer", "B2", 4], ["to spark", "étinceler", "C1", 3], ["to speak", "parler", "A1", 10], ["to specify", "préciser", "B2", 6], ["to spell", "épeler", "A2", 6]]']
        [API_TOKENS] 157
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to spend', 'to spill', 'to spin', 'to spoil', 'to spot', 'to spray', 'to spread', 'to spring', 'to squeeze', 'to stand']
        [API_ANSWER] ['[["to spend", "dépenser", "A2", 7], ["to spill", "renverser", "B2", 5], ["to spin", "tourner", "B2", 4], ["to spoil", "gâcher", "B2", 4], ["to spot", "repérer", "B2", 5], ["to spray", "pulvériser", "B2", 5], ["to spread", "étaler", "B2", 6], ["to spring", "sauter", "B2", 5], ["to squeeze", "presser", "B2", 6], ["to stand", "se tenir debout", "A2", 7]]']
        [API_TOKENS] 162
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to stare', 'to start', 'to state', 'to stay', 'to steal', 'to steer', 'to step', 'to stimulate', 'to stir', 'to stop']
        [API_ANSWER] ['[["to stare", "fixer du regard", "B2", 5], ["to start", "démarrer", "A2", 9], ["to state", "déclarer", "B2", 6], ["to stay", "rester", "A2", 10], ["to steal", "voler", "B1", 4], ["to steer", "diriger", "C1", 3], ["to step", "marcher", "A2", 8], ["to stimulate", "stimuler", "C1", 4], ["to stir", "remuer", "B2", 5], ["to stop", "arrêter", "A2", 9]]']
        [API_TOKENS] 159
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to store', 'to strain', 'to strengthen', 'to stress', 'to stretch', 'to strike', 'to strive', 'to struggle', 'to study', 'to submit']
        [API_ANSWER] ['[["to store", "stocker", "B1", 6], ["to strain", "tendre", "B2", 4], ["to strengthen", "renforcer", "B2", 6], ["to stress", "souligner", "B2", 5], ["to stretch", "étirer", "B1", 5], ["to strike", "frapper", "B1", 6], ["to strive", "s\'efforcer", "C1", 3], ["to struggle", "lutter", "B2", 6], ["to study", "étudier", "A1", 10], ["to submit", "soumettre", "B2", 6]]']
        [API_TOKENS] 160
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to subscribe', 'to subtract', 'to suck', 'to suffer', 'to suggest', 'to suit', 'to summarize', 'to supervise', 'to supply', 'to support']
        [API_ANSWER] ['[["to subscribe", "s\'abonner", "B1", 5], ["to subtract", "soustraire", "B2", 3], ["to suck", "aspirer/sucer", "B2", 4], ["to suffer", "souffrir", "B1", 6], ["to suggest", "suggérer", "B1", 7], ["to suit", "convenir", "B1", 6], ["to summarize", "résumer", "B2", 5], ["to supervise", "superviser", "B2", 5], ["to supply", "fournir", "B1", 7], ["to support", "soutenir", "B1", 7]]']
        [API_TOKENS] 166
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to suppose', 'to surprise', 'to surround', 'to survey', 'to survive', 'to suspect', 'to suspend', 'to sustain', 'to swallow', 'to sway']
        [API_ANSWER] ['[["to suppose", "supposer", "B2", 6], ["to surprise", "surprendre", "A2", 7], ["to surround", "entourer", "B2", 4], ["to survey", "enquêter", "B2", 5], ["to survive", "survivre", "B1", 6], ["to suspect", "soupçonner", "B2", 5], ["to suspend", "suspendre", "B2", 4], ["to sustain", "soutenir", "C1", 5], ["to swallow", "avaler", "B2", 5], ["to sway", "osciller", "C1", 4]]']
        [API_TOKENS] 159
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to swear', 'to sweep', 'to swim', 'to swing', 'to switch', 'to symbolize', 'to sympathize', 'to synchronize', 'to synthesize', 'to systematize']
        [API_ANSWER] ['[["to swear", "jurer", "B2", 5], ["to sweep", "balayer", "A2", 4], ["to swim", "nager", "A2", 6], ["to swing", "se balancer", "B2", 4], ["to switch", "changer", "B1", 6], ["to symbolize", "symboliser", "B2", 4], ["to sympathize", "sympathiser", "B2", 4], ["to synchronize", "synchroniser", "B2", 4], ["to synthesize", "synthétiser", "C1", 3], ["to systematize", "systématiser", "C1", 2]]']
        [API_TOKENS] 164
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/verbs/csv/s.csv
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to unbolt', 'to unclasp', 'to uncoil', 'to uncover', 'to understand', 'to unearth', 'to unfasten', 'to unify', 'to unite', 'to unlace']
        [API_ANSWER] ['[["to unbolt", "déverrouiller", "B2", 3], ["to unclasp", "détacher", "C1", 2], ["to uncoil", "dérouler", "C1", 2], ["to uncover", "découvrir", "B2", 4], ["to understand", "comprendre", "A2", 10], ["to unearth", "déterrer", "C1", 1], ["to unfasten", "défaire", "B2", 3], ["to unify", "unifier", "C1", 3], ["to unite", "unir", "B2", 5], ["to unlace", "délasser", "C1", 1]]']
        [API_TOKENS] 173
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to unlearn', 'to unleash', 'to unload', 'to unlock', 'to unmake', 'to unmask', 'to unpick', 'to unplug', 'to unravel', 'to unroll']
        [API_ANSWER] ['[["to unlearn", "désapprendre", "B2", 3], ["to unleash", "libérer", "C1", 4], ["to unload", "décharger", "B2", 4], ["to unlock", "déverrouiller", "A2", 6], ["to unmake", "défaire", "C1", 2], ["to unmask", "démasquer", "B2", 4], ["to unpick", "découdre", "C1", 2], ["to unplug", "débrancher", "B2", 5], ["to unravel", "démêler", "C1", 3], ["to unroll", "dérouler", "A2", 6]]']
        [API_TOKENS] 176
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to unscramble', 'to unscrew', 'to unseal', 'to unstick', 'to untangle', 'to untie', 'to unveil', 'to unwind', 'to unzip', 'to update']
        [API_ANSWER] ['[["to unscramble", "démêler", "B2", 3], ["to unscrew", "dévisser", "B1", 4], ["to unseal", "désceller", "C1", 2], ["to unstick", "décoller", "B1", 4], ["to untangle", "démêler", "B1", 4], ["to untie", "défaire", "A2", 5], ["to unveil", "dévoiler", "B2", 3], ["to unwind", "se détendre", "B2", 3], ["to unzip", "décompresser", "B1", 4], ["to update", "mettre à jour", "B1", 5]]']
        [API_TOKENS] 180
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to upgrade', 'to uplift', 'to upset', 'to urge', 'to use', 'to usher', 'to utilize']
[ERROR_API] Error when call API: Request timed out: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to upgrade', 'to uplift', 'to upset', 'to urge', 'to use', 'to usher', 'to utilize']
        [API_ANSWER] ['[["to upgrade", "améliorer", "B2", 6], ["to uplift", "élever", "C1", 2], ["to upset", "contrarier", "B2", 5], ["to urge", "exhorter", "C1", 4], ["to use", "utiliser", "A1", 10], ["to usher", "mener", "C1", 3], ["to utilize", "utiliser", "B2", 6]]']
        [API_TOKENS] 109
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/verbs/csv/u.csv
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to jab', 'to jack', 'to jade', 'to jail', 'to jam', 'to jangle', 'to jar', 'to jazz', 'to jeer', 'to jell']
        [API_ANSWER] ['[["to jab", "donner un coup de poing", "B2", 4], ["to jack", "lever", "B2", 4], ["to jade", "fatiguer", "C1", 2], ["to jail", "emprisonner", "C1", 3], ["to jam", "bloquer", "B2", 5], ["to jangle", "faire du bruit", "C1", 1], ["to jar", "choquer", "C1", 2], ["to jazz", "jouer du jazz", "C1", 2], ["to jeer", "railler", "C1", 2], ["to jell", "prendre forme", "C2", 1]]']
        [API_TOKENS] 168
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to jeopardize', 'to jerk', 'to jest', 'to jettison', 'to jibe', 'to jig', 'to jingle', 'to jinx', 'to jive', 'to jockey']
        [API_ANSWER] ['[["to jeopardize", "mettre en danger", "C1", 6], ["to jerk", "secouer", "B2", 4], ["to jest", "plaisanter", "B2", 3], ["to jettison", "jeter", "C1", 3], ["to jibe", "se moquer", "C2", 2], ["to jig", "danser", "B2", 2], ["to jingle", "tintinnabuler", "C2", 2], ["to jinx", "porter malheur", "C1", 2], ["to jive", "parler argot", "B2", 2], ["to jockey", "manipuler", "C1", 3]]']
        [API_TOKENS] 173
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to jog', 'to jog-trot', 'to join', 'to jolt', 'to jostle', 'to joust', 'to judge', 'to juggle', 'to jumble', 'to jump']
        [API_ANSWER] ['[["to jog", "jogger", "A2", 6], ["to jog-trot", "trotter", "B2", 2], ["to join", "joindre", "A2", 8], ["to jolt", "secouer", "B2", 4], ["to jostle", "bousculer", "C1", 3], ["to joust", "jouter", "C2", 1], ["to judge", "juger", "B2", 8], ["to juggle", "jongler", "B2", 4], ["to jumble", "désordre", "C1", 2], ["to jump", "sauter", "A1", 10]]']
        [API_TOKENS] 167
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to jump-start', 'to justify', 'to jut', 'to juxtapose']
        [API_ANSWER] ['[["to jump-start", "démarrer en trombe", "C1", 4], ["to justify", "justifier", "B2", 7], ["to jut", "dépasser", "C1", 3], ["to juxtapose", "juxtaposer", "C1", 4]]']
        [API_TOKENS] 72
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/verbs/csv/j.csv
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to nag', 'to nail', 'to name', 'to nap', 'to narrate', 'to narrow', 'to navigate', 'to necessitate', 'to need', 'to negate']
        [API_ANSWER] ['[["to nag", "harceler", "B2", 4], ["to nail", "clouer", "B2", 5], ["to name", "nommer", "B1", 6], ["to nap", "faire la sieste", "A2", 3], ["to narrate", "narrer", "C1", 2], ["to narrow", "rétrécir", "B2", 4], ["to navigate", "naviguer", "B2", 5], ["to necessitate", "nécessiter", "C1", 3], ["to need", "avoir besoin de", "A2", 10], ["to negate", "négativiser", "C2", 2]]']
        [API_TOKENS] 167
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to neglect', 'to negotiate', 'to nest', 'to nestle', 'to neutralize', 'to nibble', 'to nick', 'to nicker', 'to niggle', 'to nip']
        [API_ANSWER] ['[["to neglect", "négliger", "B2", 5], ["to negotiate", "négocier", "B2", 6], ["to nest", "nicher", "B2", 3], ["to nestle", "se blottir", "B2", 3], ["to neutralize", "neutraliser", "B2", 5], ["to nibble", "grignoter", "B2", 3], ["to nick", "entailler", "B2", 3], ["to nicker", "hennir", "B2", 2], ["to niggle", "chipoter", "C1", 2], ["to nip", "pincer", "B2", 3]]']
        [API_TOKENS] 163
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to nod', 'to nominate', 'to normalize', 'to nose', 'to notarize', 'to note', 'to notice', 'to notify', 'to nourish', 'to novelize']
        [API_ANSWER] ['[["to nod", "incliner la tête", "B1", 5], ["to nominate", "nommer", "B2", 4], ["to normalize", "normaliser", "B2", 5], ["to nose", "renifler", "B2", 2], ["to notarize", "authentifier", "C1", 2], ["to note", "noter", "A2", 7], ["to notice", "remarquer", "A2", 8], ["to notify", "avertir", "B2", 6], ["to nourish", "nourrir", "B2", 5], ["to novelize", "romancer", "C1", 1]]']
        [API_TOKENS] 161
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to nudge', 'to nullify', 'to numb', 'to number', 'to nurse', 'to nurture', 'to nut', 'to nuzzle']
        [API_ANSWER] ['[["to nudge", "pousser du coude", "B2", 5], ["to nullify", "annuler", "C1", 3], ["to numb", "engourdir", "B2", 4], ["to number", "numéroter", "B2", 3], ["to nurse", "soigner", "B2", 5], ["to nurture", "nourrir", "C1", 4], ["to nut", "coquilleter", "C2", 1], ["to nuzzle", "se frotter", "C1", 2]]']
        [API_TOKENS] 136
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/verbs/csv/n.csv
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to yack', 'to yammer', 'to yank', 'to yap', 'to yarn', 'to yawn', 'to yearn', 'to yell', 'to yelp', 'to yield']
        [API_ANSWER] ['[["to yack", "jacter", "B2", 3], ["to yammer", "babiller", "C1", 2], ["to yank", "arracher", "B2", 4], ["to yap", "japper", "C1", 1], ["to yarn", "filer", "C2", 2], ["to yawn", "bailler", "A2", 6], ["to yearn", "aspirer", "C1", 3], ["to yell", "crier", "B1", 6], ["to yelp", "japper", "C1", 2], ["to yield", "céder", "B2", 7]]']
        [API_TOKENS] 157
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to yodel', 'to yoke', 'to yowl']
        [API_ANSWER] ['[["to yodel", "chanter en yodel", "B2", 2], ["to yoke", "atteler", "B2", 3], ["to yowl", "hurler", "C1", 2]]']
        [API_TOKENS] 53
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/verbs/csv/y.csv
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to lament', 'to land', 'to last', 'to laud', 'to laugh', 'to lay', 'to lead', 'to lean', 'to leap', 'to learn']
        [API_ANSWER] ['[["to lament", "pleurer sur", "B2", 3], ["to land", "atterrir", "B1", 6], ["to last", "durer", "B2", 6], ["to laud", "louer", "C1", 2], ["to laugh", "rire", "A2", 9], ["to lay", "poser", "B1", 7], ["to lead", "mener", "B2", 8], ["to lean", "s\'appuyer", "B2", 4], ["to leap", "sauter", "B2", 3], ["to learn", "apprendre", "A1", 10]]']
        [API_TOKENS] 156
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to leave', 'to lend', 'to let', 'to level', 'to liberate', 'to license', 'to lick', 'to lie', 'to lift', 'to light']
        [API_ANSWER] ['[["to leave", "partir", "A2", 9], ["to lend", "prêter", "B1", 6], ["to let", "laisser", "A2", 9], ["to level", "niveler", "B2", 4], ["to liberate", "libérer", "B2", 5], ["to license", "licencier", "C1", 3], ["to lick", "lécher", "B2", 3], ["to lie", "mentir", "A2", 8], ["to lift", "lever", "A2", 8], ["to light", "allumer", "A2", 9]]']
        [API_TOKENS] 155
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to like', 'to limit', 'to linger', 'to listen', 'to live', 'to load', 'to loan', 'to locate', 'to lock', 'to log']
        [API_ANSWER] ['[["to like", "aimer", "A1", 9], ["to limit", "limiter", "B2", 6], ["to linger", "s\'attarder", "C1", 3], ["to listen", "écouter", "A2", 9], ["to live", "vivre", "A1", 10], ["to load", "charger", "B1", 6], ["to loan", "prêter", "B2", 4], ["to locate", "localiser", "B1", 5], ["to lock", "verrouiller", "B1", 6], ["to log", "enregistrer", "B2", 4]]']
        [API_TOKENS] 156
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to long', 'to look', 'to loom', 'to loosen', 'to lose', 'to love', 'to lower', 'to lull', 'to lure', 'to luxuriate']
        [API_ANSWER] ['[["to long", "souhaiter ardemment", "B2", 2], ["to look", "regarder", "A1", 10], ["to loom", "se profiler", "C1", 3], ["to loosen", "desserrer", "B2", 4], ["to lose", "perdre", "A1", 10], ["to love", "aimer", "A1", 10], ["to lower", "baisser", "A2", 7], ["to lull", "bercer", "C1", 2], ["to lure", "attirer", "C1", 3], ["to luxuriate", "se délecter", "C2", 2]]']
        [API_TOKENS] 165
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to lynch']
        [API_ANSWER] ['[["lynch", "lyncher", "C2", 2]]']
        [API_TOKENS] 16
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/verbs/csv/l.csv
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to falter', 'to fathom', 'to fertilize', 'to filing', 'to firing', 'to fishing', 'to flap', 'to flatter', 'to flee', 'to fleeing']
        [API_ANSWER] ['[["to falter", "hésiter", "B2", 4], ["to fathom", "comprendre", "C1", 2], ["to fertilize", "fertiliser", "B2", 3], ["to filing", "classer", "B2", 1], ["to firing", "licencier", "B2", 3], ["to fishing", "pêcher", "B2", 3], ["to flap", "battre des ailes", "B2", 3], ["to flatter", "flatter", "B2", 4], ["to flee", "fuir", "A2", 7], ["to fleeing", "en fuite", "B2", 5]]']
        [API_TOKENS] 165
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to flicker', 'to fling', 'to flirt', 'to float', 'to flood', 'to flounce', 'to flounder', 'to flour', 'to flourish', 'to flow']
        [API_ANSWER] ['[["to flicker", "vaciller", "B2", 4], ["to fling", "lancer violemment", "C1", 4], ["to flirt", "flirter", "B2", 5], ["to float", "flotter", "A2", 5], ["to flood", "inonder", "C1", 5], ["to flounce", "piquer une crise", "C2", 2], ["to flounder", "patauger", "C1", 3], ["to flour", "fariner", "B2", 2], ["to flourish", "prospérer", "C1", 5], ["to flow", "couler", "B1", 6]]']
        [API_TOKENS] 166
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to fluff', 'to flush', 'to flutter', 'to flying', 'to focus', 'to fold', 'to follow', 'to forbid', 'to force', 'to forecast']
        [API_ANSWER] ['[["to fluff", "ébouriffer", "B2", 2], ["to flush", "rougir", "B2", 3], ["to flutter", "voltiger", "B2", 2], ["to flying", "voler", "B2", 3], ["to focus", "se concentrer", "B2", 5], ["to fold", "plier", "A2", 6], ["to follow", "suivre", "A2", 8], ["to forbid", "interdire", "B2", 5], ["to force", "forcer", "B1", 7], ["to forecast", "prévoir", "B2", 6]]']
        [API_TOKENS] 154
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to foresee', 'to forgive', 'to form', 'to forsake', 'to fortify', 'to foster', 'to found', 'to frame', 'to freeze', 'to frequent']
        [API_ANSWER] ['[["to foresee", "prévoir", "B2", 5], ["to forgive", "pardonner", "B2", 6], ["to form", "former", "A2", 8], ["to forsake", "abandonner", "C1", 3], ["to fortify", "fortifier", "B2", 4], ["to foster", "favoriser", "C1", 3], ["to found", "fonder", "B2", 5], ["to frame", "encadrer", "C1", 3], ["to freeze", "geler", "B2", 5], ["to frequent", "fréquenter", "B1", 6]]']
        [API_TOKENS] 158
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to frighten', 'to frown', 'to fry', 'to fuel', 'to fulfill', 'to fumble', 'to function', 'to fund', 'to furnish', 'to fuse']
        [API_ANSWER] ['[["to frighten", "effrayer", "B2", 6], ["to frown", "froncer les sourcils", "B2", 4], ["to fry", "frire", "A2", 5], ["to fuel", "alimenter", "B2", 5], ["to fulfill", "accomplir", "B2", 5], ["to fumble", "tâtonner", "C1", 3], ["to function", "fonctionner", "A2", 8], ["to fund", "financer", "B2", 6], ["to furnish", "meubler", "B2", 5], ["to fuse", "fusionner", "C1", 3]]']
        [API_TOKENS] 166
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to fuss']
        [API_ANSWER] ['[["fuss", "s\'agiter", "B1", 4]]']
        [API_TOKENS] 18
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/verbs/csv/f.csv
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to ignite', 'to illuminate', 'to illustrate', 'to imagine', 'to imitate', 'to impair', 'to implement', 'to impose', 'to impress', 'to imprint']
        [API_ANSWER] ['[["to ignite", "allumer", "B2", 5], ["to illuminate", "éclairer", "B2", 6], ["to illustrate", "illustrer", "B2", 6], ["to imagine", "imaginer", "A2", 7], ["to imitate", "imiter", "B1", 5], ["to impair", "nuire", "C2", 3], ["to implement", "mettre en œuvre", "B2", 6], ["to impose", "imposer", "B2", 6], ["to impress", "impressionner", "B1", 6], ["to imprint", "imprimer", "B2", 4]]']
        [API_TOKENS] 156
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to imprison', 'to improve', 'to inaugurate', 'to incite', 'to include', 'to incorporate', 'to increase', 'to indicate', 'to induce', 'to indulge']
        [API_ANSWER] ['[["to imprison", "emprisonner", "C1", 5], ["to improve", "améliorer", "B1", 8], ["to inaugurate", "inaugurer", "C1", 3], ["to incite", "inciter", "C1", 4], ["to include", "inclure", "B2", 7], ["to incorporate", "incorporer", "B2", 6], ["to increase", "augmenter", "B1", 9], ["to indicate", "indiquer", "B1", 8], ["to induce", "induire", "C1", 4], ["to indulge", "s\'adonner", "C1", 3]]']
        [API_TOKENS] 162
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to infect', 'to influence', 'to inform', 'to infuse', 'to initiate', 'to innovate', 'to inquire', 'to inscribe', 'to insert', 'to insinuate']
        [API_ANSWER] ['[["to infect", "infecter", "B2", 5], ["to influence", "influencer", "B2", 6], ["to inform", "informer", "A2", 8], ["to infuse", "infuser", "C1", 3], ["to initiate", "initier", "B2", 5], ["to innovate", "innover", "B2", 4], ["to inquire", "s\'enquérir", "C1", 2], ["to inscribe", "inscrire", "B2", 4], ["to insert", "insérer", "B2", 5], ["to insinuate", "insinuer", "C1", 3]]']
        [API_TOKENS] 161
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to insist', 'to inspect', 'to inspire', 'to install', 'to instruct', 'to insult', 'to intend', 'to intensify', 'to interact', 'to intercept']
[ERROR_API] Error when call API: That model is currently overloaded with other requests. You can retry your request, or contact us through our help center at help.openai.com if the error persists. (Please include the request ID 7adbd0f118949b2aff66e02f26346f6f in your message.)
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to insist', 'to inspect', 'to inspire', 'to install', 'to instruct', 'to insult', 'to intend', 'to intensify', 'to interact', 'to intercept']
        [API_ANSWER] ['[["to insist", "insister", "B2", 6], ["to inspect", "inspecter", "B2", 5], ["to inspire", "inspirer", "B2", 6], ["to install", "installer", "B1", 6], ["to instruct", "instruire", "B2", 6], ["to insult", "insulter", "B2", 5], ["to intend", "avoir l\'intention de", "B1", 6], ["to intensify", "intensifier", "B2", 5], ["to interact", "interagir", "B2", 5], ["to intercept", "intercepter", "C1", 4]]']
        [API_TOKENS] 160
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to interest', 'to interfere', 'to intervene', 'to introduce', 'to invent', 'to invest', 'to invite', 'to irritate', 'to isolate', 'to issue']
        [API_ANSWER] ['[["to interest", "intéresser", "B1", 7], ["to interfere", "interférer", "B2", 4], ["to intervene", "intervenir", "B2", 5], ["to introduce", "introduire", "A2", 7], ["to invent", "inventer", "B1", 5], ["to invest", "investir", "B2", 5], ["to invite", "inviter", "A2", 8], ["to irritate", "irriter", "B2", 4], ["to isolate", "isoler", "B2", 5], ["to issue", "émettre", "B2", 6]]']
        [API_TOKENS] 160
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/verbs/csv/i.csv
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to obey', 'to oblige', 'to observe', 'to obstruct', 'to obtain', 'to occupy', 'to occur', 'to offer', 'to officiate', 'to offset']
        [API_ANSWER] ['[["to obey", "obéir", "B1", 6], ["to oblige", "obliger", "B2", 5], ["to observe", "observer", "B1", 6], ["to obstruct", "obstruer", "C2", 2], ["to obtain", "obtenir", "A2", 8], ["to occupy", "occuper", "B1", 7], ["to occur", "se produire", "B2", 5], ["to offer", "offrir", "A2", 8], ["to officiate", "officier", "C1", 3], ["to offset", "compenser", "C1", 4]]']
        [API_TOKENS] 157
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to omit', 'to ooze', 'to open', 'to operate', 'to opine', 'to oppose', 'to opt', 'to optimize', 'to orchestrate', 'to ordain']
        [API_ANSWER] ['[["to omit", "omettre", "B2", 5], ["to ooze", "suinter", "C1", 2], ["to open", "ouvrir", "A1", 9], ["to operate", "opérer", "B2", 7], ["to opine", "donner son avis", "C1", 3], ["to oppose", "s\'opposer", "B2", 6], ["to opt", "opter", "B2", 4], ["to optimize", "optimiser", "B2", 5], ["to orchestrate", "orchestrer", "C1", 3], ["to ordain", "ordonner", "C2", 2]]']
        [API_TOKENS] 160
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to order', 'to organize', 'to orient', 'to originate', 'to ornament', 'to oscillate', 'to osculate', 'to ossify', 'to oust', 'to outdo']
        [API_ANSWER] ['[["to order", "ordonner", "B2", 6], ["to organize", "organiser", "B1", 7], ["to orient", "orienter", "B2", 5], ["to originate", "provenir de", "C1", 3], ["to ornament", "orner", "C1", 2], ["to oscillate", "osciller", "C1", 3], ["to osculate", "s\'embrasser", "C2", 1], ["to ossify", "ossifier", "C2", 2], ["to oust", "évincer", "C1", 4], ["to outdo", "surpasser", "C1", 5]]']
        [API_TOKENS] 161
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to outfit', 'to outgrow', 'to outlast', 'to outline', 'to outmaneuver', 'to outnumber', 'to outrage', 'to outshine', 'to outsmart', 'to outsource']
        [API_ANSWER] ['[["to outfit", "équiper", "B2", 4], ["to outgrow", "dépasser", "B2", 3], ["to outlast", "durer plus longtemps que", "C1", 2], ["to outline", "décrire brièvement", "B2", 5], ["to outmaneuver", "manoeuvrer plus habilement que", "C1", 1], ["to outnumber", "être plus nombreux que", "B2", 4], ["to outrage", "indigner", "C1", 3], ["to outshine", "éclipser", "C1", 3], ["to outsmart", "être plus malin que", "C1", 2], ["to outsource", "externaliser", "B2", 5]]']
        [API_TOKENS] 183
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to outstrip', 'to outweigh', 'to overcome', 'to overdo', 'to overestimate', 'to overhaul', 'to overlap', 'to overpay', 'to overpower', 'to oversee']
        [API_ANSWER] ['[["to outstrip", "dépasser", "C1", 4], ["to outweigh", "être plus important que", "C1", 3], ["to overcome", "surmonter", "B2", 6], ["to overdo", "exagérer", "B2", 4], ["to overestimate", "surestimer", "B2", 5], ["to overhaul", "réviser complètement", "C1", 3], ["to overlap", "chevaucher", "B2", 4], ["to overpay", "payer trop cher", "C1", 2], ["to overpower", "dominer", "C1", 3], ["to oversee", "superviser", "C1", 5]]']
        [API_TOKENS] 169
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to overtake', 'to overthrow', 'to overwhelm']
        [API_ANSWER] ['[["to overtake", "dépasser", "B2", 5], ["to overthrow", "renverser", "C1", 4], ["to overwhelm", "submerger", "C1", 5]]']
        [API_TOKENS] 51
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/verbs/csv/o.csv
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to paint', 'to participate', 'to perform', 'to plan', 'to play', 'to prepare', 'to process', 'to produce', 'to promote', 'to propose']
        [API_ANSWER] ['[["to paint", "peindre", "A2", 5], ["to participate", "participer", "A2", 7], ["to perform", "exécuter", "B2", 5], ["to plan", "planifier", "B1", 6], ["to play", "jouer", "A1", 10], ["to prepare", "préparer", "A2", 9], ["to process", "traiter", "B2", 4], ["to produce", "produire", "B1", 6], ["to promote", "promouvoir", "B2", 5], ["to propose", "proposer", "B1", 7]]']
        [API_TOKENS] 157
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to protect', 'to provide', 'to pull', 'to purchase', 'to pursue', 'to push', 'to put', 'to puzzle']
        [API_ANSWER] ['[["to protect", "protéger", "B2", 6], ["to provide", "fournir", "B2", 6], ["to pull", "tirer", "A2", 6], ["to purchase", "acheter", "A2", 7], ["to pursue", "poursuivre", "B2", 5], ["to push", "pousser", "A2", 7], ["to put", "mettre", "A1", 10], ["to puzzle", "perplexer", "C1", 2]]']
        [API_TOKENS] 129
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/verbs/csv/p.csv
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to wait', 'to walk', 'to wander', 'to want', 'to warm', 'to warn', 'to wash', 'to waste', 'to watch', 'to water']
        [API_ANSWER] ['[["to wait", "attendre", "A2", 6], ["to walk", "marcher", "A1", 9], ["to wander", "errer", "B2", 3], ["to want", "vouloir", "A2", 10], ["to warm", "réchauffer", "B1", 4], ["to warn", "avertir", "B2", 5], ["to wash", "laver", "A1", 9], ["to waste", "gaspiller", "B2", 4], ["to watch", "regarder", "A1", 9], ["to water", "arroser", "B1", 5]]']
        [API_TOKENS] 157
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to wave', 'to waver', 'to wear', 'to weave', 'to weep', 'to weigh', 'to welcome', 'to wend', 'to wet', 'to whine']
        [API_ANSWER] ['[["to wave", "agiter", "A2", 5], ["to waver", "vaciller", "C1", 3], ["to wear", "porter", "A1", 10], ["to weave", "tisser", "B2", 4], ["to weep", "pleurer", "A2", 5], ["to weigh", "peser", "A2", 6], ["to welcome", "accueillir", "B1", 6], ["to wend", "cheminer", "C2", 2], ["to wet", "mouiller", "A2", 6], ["to whine", "gémir", "C1", 2]]']
        [API_TOKENS] 158
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to whip', 'to whirl', 'to whisper', 'to whistle', 'to win', 'to wind', 'to wink', 'to wipe', 'to wish', 'to withdraw']
        [API_ANSWER] ['[["to whip", "fouetter", "B2", 4], ["to whirl", "tournoyer", "C1", 2], ["to whisper", "chuchoter", "B1", 4], ["to whistle", "siffler", "B1", 4], ["to win", "gagner", "A2", 10], ["to wind", "enrouler", "B2", 3], ["to wink", "faire un clin d\'œil", "B2", 3], ["to wipe", "essuyer", "A2", 6], ["to wish", "souhaiter", "A2", 8], ["to withdraw", "se retirer", "B2", 5]]']
        [API_TOKENS] 167
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to withhold', 'to withstand', 'to wonder', 'to work', 'to worry', 'to worship', 'to wound', 'to wrap', 'to wreck', 'to wrestle']
        [API_ANSWER] ['[["to withhold", "retenir", "C1", 5], ["to withstand", "résister", "C1", 4], ["to wonder", "se demander", "B1", 5], ["to work", "travailler", "A1", 10], ["to worry", "s\'inquiéter", "B1", 6], ["to worship", "adorer", "B2", 3], ["to wound", "blesser", "C1", 4], ["to wrap", "envelopper", "B2", 5], ["to wreck", "détruire", "C1", 3], ["to wrestle", "lutter", "B2", 3]]']
        [API_TOKENS] 161
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to wriggle', 'to wring', 'to write']
        [API_ANSWER] ['[["to wriggle", "se tortiller", "B1", 3], ["to wring", "tordre", "B2", 4], ["to write", "écrire", "A2", 10]]']
        [API_TOKENS] 51
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/verbs/csv/w.csv
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to make', 'to march', 'to marry', 'to melt', 'to memorize', 'to mend', 'to mention', 'to merge', 'to migrate', 'to milk']
        [API_ANSWER] ['[["to make", "fabriquer", "A2", 10], ["to march", "marcher", "A2", 7], ["to marry", "se marier", "A2", 6], ["to melt", "fondre", "B1", 5], ["to memorize", "mémoriser", "B2", 4], ["to mend", "réparer", "B2", 5], ["to mention", "mentionner", "B2", 6], ["to merge", "fusionner", "C1", 4], ["to migrate", "migrer", "B2", 4], ["to milk", "traire", "B2", 3]]']
        [API_TOKENS] 159
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to mine', 'to mislead', 'to miss', 'to mix', 'to moan', 'to modify', 'to monitor', 'to motivate', 'to mourn', 'to move']
        [API_ANSWER] ['[["to mine", "extraire", "B2", 4], ["to mislead", "induire en erreur", "C1", 3], ["to miss", "manquer/rater", "A2", 7], ["to mix", "mélanger", "A2", 8], ["to moan", "gémir", "C1", 2], ["to modify", "modifier", "B1", 6], ["to monitor", "surveiller", "B2", 5], ["to motivate", "motiver", "B2", 5], ["to mourn", "pleurer", "C1", 2], ["to move", "bouger/déménager", "A2", 9]]']
        [API_TOKENS] 164
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to mow', 'to multiply', 'to murder', 'to mutter']
        [API_ANSWER] ['[["to mow", "tondre", "A2", 5], ["to multiply", "multiplier", "A2", 6], ["to murder", "assassiner", "B2", 4], ["to mutter", "murmurer", "B2", 3]]']
        [API_TOKENS] 65
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/verbs/csv/m.csv
  [CREATE_CSV] File data/french_english/verbs/csv/x.csv
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to bake', 'to bathe', 'to behave', 'to believe', 'to bend', 'to bet', 'to bid', 'to bind', 'to bite', 'to blow']
        [API_ANSWER] ['[["to bake", "cuire au four", "A2", 6], ["to bathe", "se baigner", "A2", 5], ["to behave", "se comporter", "B2", 6], ["to believe", "croire", "A2", 8], ["to bend", "plier", "B1", 6], ["to bet", "parier", "B2", 5], ["to bid", "offrir", "B2", 5], ["to bind", "lier", "B2", 5], ["to bite", "mordre", "A2", 7], ["to blow", "souffler", "A2", 7]]']
        [API_TOKENS] 158
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to boast', 'to borrow', 'to bounce', 'to bow', 'to box', 'to braid', 'to break', 'to breathe', 'to bring', 'to broadcast']
        [API_ANSWER] ['[["to boast", "se vanter", "B2", 5], ["to borrow", "emprunter", "A2", 6], ["to bounce", "rebondir", "B2", 4], ["to bow", "s\'incliner", "B2", 4], ["to box", "boxer", "B2", 4], ["to braid", "tresser", "B2", 3], ["to break", "casser", "A2", 10], ["to breathe", "respirer", "A2", 7], ["to bring", "apporter", "A1", 10], ["to broadcast", "diffuser", "B2", 5]]']
        [API_TOKENS] 159
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to brush', 'to build', 'to burn', 'to bury', 'to buy']
        [API_ANSWER] ['[["to brush", "brosser", "A2", 6], ["to build", "construire", "B1", 7], ["to burn", "brûler", "B2", 5], ["to bury", "enterrer", "B2", 3], ["to buy", "acheter", "A1", 10]]']
        [API_TOKENS] 79
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/verbs/csv/b.csv
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to tackle', 'to take', 'to talk', 'to tango', 'to target', 'to taste', 'to taste-test', 'to tattle', 'to teach', 'to team']
        [API_ANSWER] ['[["to tackle", "s\'attaquer à", "B2", 6], ["to take", "prendre", "A1", 10], ["to talk", "parler", "A1", 10], ["to tango", "danser le tango", "B2", 2], ["to target", "cibler", "B2", 5], ["to taste", "goûter", "A2", 7], ["to taste-test", "tester la saveur", "C1", 3], ["to tattle", "rapporter", "B2", 2], ["to teach", "enseigner", "A2", 9], ["to team", "faire équipe", "B1", 4]]']
        [API_TOKENS] 167
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to tear', 'to tee', 'to telecast', 'to telecommute', 'to teleconference', 'to telegraph', 'to telemarket', 'to telescope', 'to televise', 'to tell']
        [API_ANSWER] ['[["to tear", "déchirer", "B2", 5], ["to tee", "mettre sur tee", "A2", 2], ["to telecast", "diffuser", "B2", 3], ["to telecommute", "télétravailler", "B2", 2], ["to teleconference", "téléconférer", "B2", 3], ["to telegraph", "télégraphier", "B2", 2], ["to telemarket", "faire du télémarketing", "B2", 3], ["to telescope", "télescoper", "C1", 2], ["to televise", "téléviser", "B2", 5], ["to tell", "dire", "A1", 10]]']
        [API_TOKENS] 178
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to tell-off', 'to temp', 'to tempt', 'to tend', 'to terminate', 'to terrify', 'to test', 'to test-drive', 'to test-fly', 'to testify']
        [API_ANSWER] ['[["to tell-off", "réprimander", "B2", 5], ["to temp", "remplacer temporairement", "B2", 3], ["to tempt", "tenter", "B2", 5], ["to tend", "avoir tendance à", "B2", 4], ["to terminate", "mettre fin à", "C1", 6], ["to terrify", "terrifier", "B2", 4], ["to test", "tester", "B1", 8], ["to test-drive", "essayer (une voiture)", "B2", 3], ["to test-fly", "essayer (un avion)", "B2", 2], ["to testify", "témoigner", "C1", 4]]']
        [API_TOKENS] 172
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to thank', 'to thaw', 'to theorize', 'to thicken', 'to thin', 'to think', 'to think-up', 'to thrive', 'to throw', 'to throw-away']
        [API_ANSWER] ['[["to thank", "remercier", "B1", 6], ["to thaw", "dégeler", "B2", 4], ["to theorize", "théoriser", "C1", 2], ["to thicken", "épaissir", "B2", 3], ["to thin", "mincir", "B2", 3], ["to think", "penser", "A2", 10], ["to think-up", "imaginer", "B2", 2], ["to thrive", "prospérer", "C1", 3], ["to throw", "jeter", "A2", 9], ["to throw-away", "jeter", "B2", 4]]']
        [API_TOKENS] 162
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to thrust', 'to thud', 'to thump', 'to tick', 'to tickle', 'to tie', 'to time', 'to tingle', 'to tinker', 'to travel']
        [API_ANSWER] ['[["to thrust", "pousser avec force", "B2", 5], ["to thud", "faire un bruit sourd", "C1", 2], ["to thump", "frapper fort", "B2", 4], ["to tick", "faire tic-tac", "B2", 3], ["to tickle", "chatouiller", "B2", 3], ["to tie", "attacher", "A2", 6], ["to time", "chronométrer", "B2", 4], ["to tingle", "picoter", "C1", 2], ["to tinker", "bricoler", "C1", 2], ["to travel", "voyager", "A2", 8]]']
        [API_TOKENS] 173
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to treat', 'to try', 'to turn', 'to type']
        [API_ANSWER] ['[["to treat", "traiter", "B2", 6], ["to try", "essayer", "A2", 7], ["to turn", "tourner", "A2", 8], ["to type", "taper", "A2", 5]]']
        [API_TOKENS] 61
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/verbs/csv/t.csv
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to dance', 'to dare', 'to deal', 'to debate', 'to decay', 'to deceive', 'to decide', 'to decorate', 'to dedicate', 'to defend']
        [API_ANSWER] ['[["to dance", "danser", "A1", 7], ["to dare", "oser", "B2", 5], ["to deal", "traiter", "B2", 6], ["to debate", "débattre", "B2", 4], ["to decay", "décliner", "C2", 2], ["to deceive", "tromper", "C1", 3], ["to decide", "décider", "A2", 8], ["to decorate", "décorer", "B1", 5], ["to dedicate", "dédier", "C1", 2], ["to defend", "défendre", "A2", 8]]']
        [API_TOKENS] 164
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to define', 'to delay', 'to delete', 'to deliver', 'to demand', 'to demonstrate', 'to denounce', 'to depend', 'to describe', 'to deserve']
        [API_ANSWER] ['[["to define", "définir", "B2", 6], ["to delay", "retarder", "B2", 4], ["to delete", "supprimer", "B2", 5], ["to deliver", "livrer", "B2", 5], ["to demand", "exiger", "B2", 6], ["to demonstrate", "démontrer", "B2", 5], ["to denounce", "dénoncer", "B2", 4], ["to depend", "dépendre", "A2", 6], ["to describe", "décrire", "B1", 6], ["to deserve", "mériter", "B2", 5]]']
        [API_TOKENS] 162
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to design', 'to destroy', 'to detect', 'to develop', 'to devote', 'to diagnose', 'to dictate', 'to die', 'to differ', 'to dig']
        [API_ANSWER] ['[["to design", "concevoir", "B2", 6], ["to destroy", "détruire", "B2", 6], ["to detect", "détecter", "B2", 5], ["to develop", "développer", "B2", 6], ["to devote", "consacrer", "B2", 4], ["to diagnose", "diagnostiquer", "C1", 3], ["to dictate", "dicter", "B2", 3], ["to die", "mourir", "A2", 10], ["to differ", "différer", "B2", 3], ["to dig", "creuser", "A2", 5]]']
        [API_TOKENS] 160
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to digest', 'to diminish', 'to dine', 'to dip', 'to direct', 'to disagree', 'to disappear', 'to discover', 'to discuss', 'to dislike']
        [API_ANSWER] ['[["to digest", "digérer", "B2", 5], ["to diminish", "diminuer", "B2", 5], ["to dine", "dîner", "A2", 4], ["to dip", "tremper", "B1", 4], ["to direct", "diriger", "B2", 5], ["to disagree", "ne pas être d\'accord", "B1", 4], ["to disappear", "disparaître", "A2", 5], ["to discover", "découvrir", "A2", 6], ["to discuss", "discuter", "B1", 6], ["to dislike", "ne pas aimer", "A2", 4]]']
        [API_TOKENS] 163
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to distinguish', 'to distribute', 'to disturb', 'to dive', 'to divide', 'to do', 'to document', 'to dominate', 'to donate', 'to doubt']
        [API_ANSWER] ['[["to distinguish", "distinguer", "B2", 6], ["to distribute", "distribuer", "B1", 6], ["to disturb", "déranger", "B1", 5], ["to dive", "plonger", "B1", 4], ["to divide", "diviser", "B1", 6], ["to do", "faire", "A1", 10], ["to document", "documenter", "C1", 3], ["to dominate", "dominer", "B2", 5], ["to donate", "donner", "B2", 4], ["to doubt", "douter", "B1", 5]]']
        [API_TOKENS] 155
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of verbs and guidelines, you have to create a list of list. For each verbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
verbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of verbs into the expected list of lists of verbs without comments. ['to download', 'to drag', 'to draw', 'to dream', 'to dress', 'to drink', 'to drive', 'to drop']
        [API_ANSWER] ['[["to download", "télécharger", "B1", 8], ["to drag", "traîner/glisser", "B2", 6], ["to draw", "dessiner/tirer", "B1", 7], ["to dream", "rêver", "B1", 5], ["to dress", "s\'habiller", "A2", 6], ["to drink", "boire", "A1", 10], ["to drive", "conduire", "A2", 9], ["to drop", "laisser tomber", "B2", 5]]']
        [API_TOKENS] 135
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/verbs/csv/d.csv
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['Carefully', 'Certainly', 'Clearly', 'Closely', 'Commonly', 'Completely', 'Confidently', 'Consciously', 'Consequently', 'Continuously']
        [API_ANSWER] ['[["Carefully", "Soigneusement", "B2", 8], ["Certainly", "Certainement", "B1", 9], ["Clearly", "Clairment", "B1", 8], ["Closely", "Etroitement", "B2", 6], ["Commonly", "Communément", "B2", 5], ["Completely", "Complètement", "B1", 9], ["Confidently", "Avec confiance", "B2", 5], ["Consciously", "Consciemment", "C1", 4], ["Consequently", "Par conséquent", "B2", 6], ["Continuously", "Continuellement", "B2", 6]]']
        [API_TOKENS] 163
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['Conveniently', 'Correctly', 'Courageously', 'Covertly', 'Crazily', 'Crossly', 'Crudely', 'Cunningly', 'Curiously', 'Currently']
        [API_ANSWER] ['[["Conveniently", "Convenablement", "B2", 6], ["Correctly", "Correctement", "A2", 8], ["Courageously", "Courageusement", "B2", 4], ["Covertly", "Clandestinement", "C1", 3], ["Crazily", "Follement", "B2", 4], ["Crossly", "Méchamment", "C1", 2], ["Crudely", "Crûment", "C1", 2], ["Cunningly", "Astucieusement", "C1", 3], ["Curiously", "Curieusement", "B1", 6], ["Currently", "Actuellement", "B1", 10]]']
        [API_TOKENS] 167
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adverbs/csv/c.csv
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['Keenly', 'Killingly', 'Kinda', 'Kindheartedly', 'Kindly', 'Kinetically', 'Kingly', 'Kissably', 'Kittenishly', 'Knavishly']
        [API_ANSWER] ['[["Keenly", "Avidement", "B2", 4], ["Killingly", "Mortellement", "C1", 2], ["Kinda", "Un peu", "A2", 5], ["Kindheartedly", "Avec bonté", "B2", 3], ["Kindly", "Gentiment", "B1", 6], ["Kinetically", "Cinétiquement", "C1", 2], ["Kingly", "Royal", "C1", 3], ["Kissably", "Embrassablement", "C2", 1], ["Kittenishly", "Comme un chaton", "C2", 1], ["Knavishly", "De manière rusée", "C2", 1]]']
        [API_TOKENS] 174
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['Kneadably', 'Knottily', 'Knowingly', 'Knowledgeably', 'Kookily']
        [API_ANSWER] ['[["Kneadably", "De manière pétrissable", "B2", 1], ["Knottily", "De manière noueuse", "C1", 1], ["Knowingly", "Sciemment", "C1", 5], ["Knowledgeably", "De manière compétente", "C1", 3], ["Kookily", "De manière farfelue", "C2", 1]]']
        [API_TOKENS] 93
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adverbs/csv/k.csv
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['Eagerly', 'Easily', 'Economically', 'Efficiently', 'Elegantly', 'Eloquently', 'Emphatically', 'Endlessly', 'Enthusiastically', 'Equally']
        [API_ANSWER] ['[["Eagerly", "Avidement", "B2", 6], ["Easily", "Facilement", "A2", 10], ["Economically", "Économiquement", "B2", 5], ["Efficiently", "Efficacement", "B2", 6], ["Elegantly", "Élégamment", "C1", 4], ["Eloquently", "Éloquemment", "C1", 3], ["Emphatically", "Avec force", "C1", 4], ["Endlessly", "Sans fin", "C1", 3], ["Enthusiastically", "Avec enthousiasme", "B2", 6], ["Equally", "Également", "B2", 7]]']
        [API_TOKENS] 174
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['Especially', 'Essentially', 'Eternally', 'Evenly', 'Ever', 'Everywhere', 'Evidently', 'Exceedingly', 'Exclusively', 'Expediently']
        [API_ANSWER] ['[["Especially", "Particulièrement", "B2", 7], ["Essentially", "Essentiellement", "B2", 6], ["Eternally", "Éternellement", "C1", 3], ["Evenly", "Uniformément", "B2", 4], ["Ever", "Jamais", "B1", 5], ["Everywhere", "Partout", "A2", 8], ["Evidently", "Manifestement", "B2", 6], ["Exceedingly", "Excessivement", "C1", 3], ["Exclusively", "Exclusivement", "B2", 5], ["Expediently", "Expéditivement", "C1", 2]]']
        [API_TOKENS] 166
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adverbs/csv/e.csv
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['Garrulously', 'Generally', 'Generously', 'Gently', 'Ghoulishly', 'Giddily', 'Gladly', 'Gloriously', 'Gracefully', 'Gradually']
        [API_ANSWER] ['[["Garrulously", "Loquacement", "C1", 2], ["Generally", "Généralement", "A2", 8], ["Generously", "Généreusement", "B2", 6], ["Gently", "Douceument", "A2", 8], ["Ghoulishly", "Macabrement", "C1", 1], ["Giddily", "Follement", "B2", 2], ["Gladly", "Joyeusement", "B1", 5], ["Gloriously", "Glorieusement", "C1", 3], ["Gracefully", "Gracieusement", "B2", 4], ["Gradually", "Progressivement", "B1", 7]]']
        [API_TOKENS] 168
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['Gratefully', 'Greatly', 'Gregariously', 'Grimly', 'Grudgingly', 'Gruffly', 'Guiltily', 'Gushingly']
        [API_ANSWER] ['[["Gratefully", "Reconnaissant-ment", "B2", 4], ["Greatly", "Grandement", "B2", 6], ["Gregariously", "Sociable-ment", "C1", 2], ["Grimly", "Sombre-ment", "C1", 3], ["Grudgingly", "À contrecoeur", "C1", 4], ["Gruffly", "Brusquement", "C2", 3], ["Guiltily", "Coupable-ment", "C1", 3], ["Gushingly", "Élogieusement", "C2", 2]]']
        [API_TOKENS] 146
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adverbs/csv/g.csv
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['Quickly', 'Quietly']
        [API_ANSWER] ['[["Quickly", "Rapidement", "B2", 8], ["Quietly", "Silencieusement", "B2", 6]]']
        [API_TOKENS] 34
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adverbs/csv/q.csv
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['Abnormally', 'Absolutely', 'Actually', 'Afar', 'Alike', 'Almost', 'Already', 'Also', 'Altogether', 'Always']
        [API_ANSWER] ['[["Abnormally", "Anormalement", "B2", 4], ["Absolutely", "Absolument", "A2", 9], ["Actually", "En fait", "B1", 8], ["Afar", "Loin", "C1", 3], ["Alike", "De même", "B2", 3], ["Almost", "Presque", "A2", 10], ["Already", "Déjà", "A2", 9], ["Also", "Aussi", "A1", 10], ["Altogether", "Complètement", "B2", 5], ["Always", "Toujours", "A1", 10]]']
        [API_TOKENS] 152
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['Anew', 'Angrily', 'Anxiously', 'Anyway', 'Anywhere', 'Aside', 'Astonishingly', 'Avidly', 'Awhile', 'Awkwardly']
        [API_ANSWER] ['[["Anew", "À nouveau", "B2", 3], ["Angrily", "Avec colère", "B2", 5], ["Anxiously", "Anxieusement", "B2", 4], ["Anyway", "De toute façon", "B1", 7], ["Anywhere", "N\'importe où", "A2", 6], ["Aside", "À part", "B2", 4], ["Astonishingly", "Étonnamment", "C1", 3], ["Avidly", "Avidement", "C1", 2], ["Awhile", "Un moment", "B2", 3], ["Awkwardly", "Maladroitement", "B2", 4]]']
        [API_TOKENS] 166
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adverbs/csv/a.csv
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['Zanily', 'Zealously', 'Zestfully', 'Zestily', 'Zippily']
        [API_ANSWER] ['[["Zanily", "De manière loufoque", "B2", 2], ["Zealously", "Avec zèle", "C1", 3], ["Zestfully", "Avec entrain", "C1", 2], ["Zestily", "De manière enjouée", "C1", 2], ["Zippily", "De manière enjouée", "B2", 2]]']
        [API_TOKENS] 96
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adverbs/csv/z.csv
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['Haphazardly', 'Happily', 'Hastily', 'Hence', 'Henceforth', 'Henceforward', 'Here', 'Hereafter', 'Hereby', 'Herein']
        [API_ANSWER] ['[["Haphazardly", "Au hasard", "B2", 4], ["Happily", "Joyeusement", "A2", 6], ["Hastily", "Hâtivement", "B2", 5], ["Hence", "D\'où", "B2", 5], ["Henceforth", "Désormais", "C1", 3], ["Henceforward", "Dorénavant", "C1", 2], ["Here", "Ici", "A1", 10], ["Hereafter", "Désormais", "C1", 2], ["Hereby", "Par la présente", "C1", 2], ["Herein", "Dans le présent document", "C1", 2]]']
        [API_TOKENS] 171
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['Hereinafter', 'Hereof', 'Hitherto', 'However', 'Humbly', 'Hungrily']
        [API_ANSWER] ['[["Hereinafter", "Ci-après", "C1", 3], ["Hereof", "Des présentes", "C1", 2], ["Hitherto", "Jusqu\'à présent", "C1", 4], ["However", "Cependant", "B2", 9], ["Humbly", "Humblement", "B2", 4], ["Hungrily", "Affamé(e)ment", "A2", 3]]']
        [API_TOKENS] 106
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adverbs/csv/h.csv
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['Rapidly', 'Rarely', 'Rather', 'Readily', 'Really', 'Reasonably', 'Recently', 'Regularly', 'Reluctantly', 'Repeatedly']
        [API_ANSWER] ['[["Rapidly", "Rapidement", "B2", 8], ["Rarely", "Rarement", "B1", 6], ["Rather", "Plutôt", "B2", 7], ["Readily", "Facilement", "B2", 4], ["Really", "Vraiment", "A2", 10], ["Reasonably", "Raisonnablement", "B2", 5], ["Recently", "Récemment", "A2", 8], ["Regularly", "Régulièrement", "B1", 7], ["Reluctantly", "À contrecoeur", "C1", 4], ["Repeatedly", "À plusieurs reprises", "B2", 6]]']
        [API_TOKENS] 164
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['Rightfully', 'Rigorously', 'Roughly', 'Royally', 'Rudely', 'Ruefully', 'Ruggedly', 'Ruthlessly']
        [API_ANSWER] ['[["Rightfully", "à juste titre", "B2", 4], ["Rigorously", "rigoureusement", "C1", 5], ["Roughly", "grossièrement", "B1", 6], ["Royally", "royalement", "C1", 3], ["Rudely", "grossièrement", "B2", 5], ["Ruefully", "tristement", "C1", 2], ["Ruggedly", "robustement", "C1", 3], ["Ruthlessly", "impitoyablement", "C1", 4]]']
        [API_TOKENS] 134
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adverbs/csv/r.csv
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['vainly', 'vastly', 'verbally', 'very', 'viciously', 'victoriously', 'vigilantly', 'vigorously', 'vilely', 'vindictively']
        [API_ANSWER] ['[["vainly", "vainement", "B2", 4], ["vastly", "largement", "B2", 5], ["verbally", "verbalement", "B2", 6], ["very", "très", "A1", 10], ["viciously", "vicieusement", "C1", 3], ["victoriously", "victorieusement", "C1", 2], ["vigilantly", "vigilamment", "C1", 4], ["vigorously", "vigoureusement", "B2", 5], ["vilely", "vilement", "C1", 2], ["vindictively", "vindicativement", "C1", 3]]']
        [API_TOKENS] 169
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['violently', 'virtually', 'virtuously', 'visibly', 'visually', 'vivaciously', 'vividly', 'voluntarily', 'voraciously', 'vulnerably']
        [API_ANSWER] ['[["violently", "violemment", "B2", 6], ["virtually", "virtuellement", "B2", 6], ["virtuously", "vertueusement", "C1", 2], ["visibly", "visiblement", "B1", 7], ["visually", "visuellement", "B2", 6], ["vivaciously", "vivement", "C1", 3], ["vividly", "vividement", "B2", 5], ["voluntarily", "volontairement", "B2", 6], ["voraciously", "avidement", "C1", 3], ["vulnerably", "vulnérablement", "C1", 2]]']
        [API_TOKENS] 167
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adverbs/csv/v.csv
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['Safely', 'Satisfactorily', 'Seductively', 'Sensibly', 'Seriously', 'Sincerely', 'Skeptically', 'Slowly', 'Slyly', 'Smoothly']
        [API_ANSWER] ['[["Safely", "Sûrement", "B2", 6], ["Satisfactorily", "Satisfaisamment", "B2", 4], ["Seductively", "Séductivement", "C1", 2], ["Sensibly", "Sensément", "B2", 4], ["Seriously", "Sérieusement", "A2", 8], ["Sincerely", "Sincèrement", "B2", 6], ["Skeptically", "Sceptiquement", "C1", 3], ["Slowly", "Lentement", "A1", 9], ["Slyly", "Sournoisement", "C1", 2], ["Smoothly", "En douceur", "B2", 5]]']
        [API_TOKENS] 172
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['Softly', 'Solemnly', 'Sorrowfully', 'Steadily', 'Strangely', 'Strenuously', 'Subtly', 'Suddenly', 'Supposedly', 'Synchronously']
        [API_ANSWER] ['[["Softly", "Douxement", "B1", 5], ["Solemnly", "Solennellement", "B2", 3], ["Sorrowfully", "Tristement", "C1", 2], ["Steadily", "Firmement", "B2", 4], ["Strangely", "Étrangement", "B1", 5], ["Strenuously", "Vigoureusement", "C1", 2], ["Subtly", "Subtilement", "B2", 4], ["Suddenly", "Soudainement", "A2", 7], ["Supposedly", "Soi-disant", "B2", 3], ["Synchronously", "Synchronement", "C2", 1]]']
        [API_TOKENS] 172
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adverbs/csv/s.csv
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['Unabashedly', 'Unaccountably', 'Unarguably', 'Unbearably', 'Unbelievably', 'Unconditionally', 'Undeniably', 'Underground', 'Underneath', 'Unexpectedly']
        [API_ANSWER] ['[["Unabashedly", "Sans gêne", "C1", 3], ["Unaccountably", "Inexplicablement", "C1", 2], ["Unarguably", "Indéniablement", "C1", 4], ["Unbearably", "Insupportablement", "B2", 5], ["Unbelievably", "Inimaginablement", "B2", 5], ["Unconditionally", "Inconditionnellement", "C1", 4], ["Undeniably", "Indéniablement", "C1", 5], ["Underground", "Souterrainement", "B2", 4], ["Underneath", "Sous", "B1", 5], ["Unexpectedly", "Inopinément", "B2", 6]]']
        [API_TOKENS] 177
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['Unfailingly', 'Unfortunately', 'Unhappily', 'Uniquely', 'Universally', 'Unknowingly', 'Unquestionably', 'Unwittingly', 'Upstairs', 'Usually']
        [API_ANSWER] ['[["Unfailingly", "Infailliblement", "C1", 4], ["Unfortunately", "Malheureusement", "B2", 8], ["Unhappily", "Malheureusement", "B2", 4], ["Uniquely", "Uniquement", "B2", 4], ["Universally", "Universellement", "C1", 5], ["Unknowingly", "Inconsciemment", "C1", 3], ["Unquestionably", "Indubitablement", "C1", 4], ["Unwittingly", "À son insu", "C1", 3], ["Upstairs", "En haut", "A2", 5], ["Usually", "Généralement", "A2", 9]]']
        [API_TOKENS] 172
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adverbs/csv/u.csv
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['Jadedly', 'Jaggedly', 'Jarringly', 'Jealously', 'Jestingly', 'Jocosely', 'Jocundly', 'Jokingly', 'Jovially', 'Joyfully']
        [API_ANSWER] ['[["Jadedly", "Laschement", "C1", 2], ["Jaggedly", "De manière irrégulière", "B2", 2], ["Jarringly", "De manière choquante", "C1", 2], ["Jealously", "Jalousement", "B2", 5], ["Jestingly", "En plaisantant", "C1", 3], ["Jocosely", "De manière plaisante", "C1", 2], ["Jocundly", "Joyeusement", "C1", 1], ["Jokingly", "En plaisantant", "B2", 5], ["Jovially", "Joyeusement", "B2", 5], ["Joyfully", "Joyeusement", "A2", 8]]']
        [API_TOKENS] 180
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['Jubilantly', 'Judiciously', 'Jumblingly', 'Just']
        [API_ANSWER] ['[["Jubilantly", "Avec jubilation", "B2", 3], ["Judiciously", "Judicieusement", "C1", 2], ["Jumblingly", "De manière confuse", "C2", 1], ["Just", "Juste", "A2", 9]]']
        [API_TOKENS] 68
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adverbs/csv/j.csv
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['Naturally', 'Nearly', 'Neatly', 'Nervously', 'Never', 'Nicely', 'Noisily', 'Normally', 'Notably', 'Now']
        [API_ANSWER] ['[["Naturally", "Naturellement", "B2", 6], ["Nearly", "Presque", "A2", 7], ["Neatly", "Soigneusement", "B2", 4], ["Nervously", "Nerveusement", "B1", 5], ["Never", "Jamais", "A2", 10], ["Nicely", "Agréablement", "B1", 6], ["Noisily", "Bruyamment", "B2", 4], ["Normally", "Normalement", "B1", 8], ["Notably", "Notablement", "C1", 3], ["Now", "Maintenant", "A1", 10]]']
        [API_TOKENS] 157
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['Numbly']
        [API_ANSWER] ['[["Numbly", "Engourdiement", "B2", 2]]']
        [API_TOKENS] 19
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adverbs/csv/n.csv
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['Yare', 'Yarely', 'Yawningly', 'Yea', 'Yearly', 'Yellingly', 'Yelpingly', 'Yesterday', "Yesterday's", 'Yesteryear']
        [API_ANSWER] ['[["Yare", "Promptly", "C1", 2], ["Yarely", "Slowly and carefully", "C2", 1], ["Yawningly", "Boringly", "C2", 1], ["Yea", "Yes", "B2", 4], ["Yearly", "Annually", "B2", 5], ["Yellingly", "Shoutingly", "C2", 1], ["Yelpingly", "With a yelp", "C2", 1], ["Yesterday", "Hier", "A1", 8], ["Yesterday\'s", "D\'hier", "A2", 4], ["Yesteryear", "Dans le temps", "C1", 2]]']
        [API_TOKENS] 162
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['Yestreen', 'Yet', 'Yieldingly', 'Yon', 'Yonder', 'Yonderward', 'Yore', 'Youthfully', 'Yuppily', 'Ywis']
        [API_ANSWER] ['[["Yestreen", "Hier soir", "B2", 1], ["Yet", "Encore", "B2", 5], ["Yieldingly", "Docilement", "C2", 1], ["Yon", "Là-bas", "B2", 3], ["Yonder", "Là-bas", "B2", 5], ["Yonderward", "Vers là-bas", "C2", 1], ["Yore", "Jadis", "C1", 2], ["Youthfully", "Jeunessement", "C1", 1], ["Yuppily", "Yuppiquement", "C2", 1], ["Ywis", "Certainement", "C2", 1]]']
        [API_TOKENS] 168
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adverbs/csv/y.csv
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['Largely', 'Lately', 'Lavishly', 'Lazily', 'Lethally', 'Liberally', 'Lightly', 'Likely', 'Limpidly', 'Lingeringly']
        [API_ANSWER] ['[["Largely", "En grande partie", "B2", 6], ["Lately", "Récemment", "B1", 7], ["Lavishly", "Somptueusement", "C1", 3], ["Lazily", "Paresseusement", "B2", 4], ["Lethally", "Mortellement", "C2", 2], ["Liberally", "Libéralement", "B2", 5], ["Lightly", "Légèrement", "A2", 8], ["Likely", "Probablement", "B1", 9], ["Limpidly", "Limpidement", "C1", 1], ["Lingeringly", "Longuement", "C1", 4]]']
        [API_TOKENS] 176
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['Lively', 'Lividly', 'Loftily', 'Logically', 'Longingly', 'Loud', 'Loudly', 'Lovingly']
        [API_ANSWER] ['[["Lively", "Vivement", "B1", 5], ["Lividly", "Livide", "C1", 1], ["Loftily", "Hautainement", "C2", 2], ["Logically", "Logiquement", "B2", 6], ["Longingly", "Avec nostalgie", "C1", 3], ["Loud", "Fort", "A2", 7], ["Loudly", "Fortement", "A2", 8], ["Lovingly", "Avec amour", "B2", 4]]']
        [API_TOKENS] 130
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adverbs/csv/l.csv
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['Faintly', 'Famously', 'Far', 'Fast', 'Fatally', 'Ferociously', 'Fervently', 'Fiercely', 'Finally', 'Financially']
        [API_ANSWER] ['[["Faintly", "Faiblement", "B1", 4], ["Famously", "Célèbrement", "B2", 5], ["Far", "Loin", "A1", 8], ["Fast", "Vite", "A1", 10], ["Fatally", "Fatalement", "C1", 3], ["Ferociously", "Féroce", "C2", 2], ["Fervently", "Fervemment", "C1", 4], ["Fiercely", "Fièrement", "B2", 4], ["Finally", "Finalement", "A2", 9], ["Financially", "Financièrement", "B2", 7]]']
        [API_TOKENS] 165
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['Fine', 'Firmly', 'Firstly', 'Flatly', 'Fondly', 'Forcibly', 'Forever', 'Formally', 'Fortunately', 'Frequently']
        [API_ANSWER] ['[["Fine", "Bien", "B2", 5], ["Firmly", "Fermement", "B2", 4], ["Firstly", "Premièrement", "B2", 5], ["Flatly", "Platement", "C1", 2], ["Fondly", "Affectueusement", "B2", 3], ["Forcibly", "De force", "C1", 3], ["Forever", "Pour toujours", "B2", 5], ["Formally", "Formellement", "B2", 4], ["Fortunately", "Heureusement", "B2", 6], ["Frequently", "Fréquemment", "B1", 8]]']
        [API_TOKENS] 158
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adverbs/csv/f.csv
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['Immediately', 'Inadvertently', 'Incessantly', 'Incredibly', 'Incredulously', 'Indifferently', 'Indignantly', 'Indirectly', 'Individually', 'Indubitably']
        [API_ANSWER] ['[["Immediately", "Immédiatement", "B2", 8], ["Inadvertently", "Involontairement", "C1", 4], ["Incessantly", "Incessamment", "C1", 5], ["Incredibly", "Incroyablement", "B1", 7], ["Incredulously", "Incrédulement", "C2", 2], ["Indifferently", "Indifféremment", "B2", 6], ["Indignantly", "Indigné", "C1", 4], ["Indirectly", "Indirectement", "B2", 7], ["Individually", "Individuellement", "B2", 6], ["Indubitably", "Indubitablement", "C2", 2]]']
        [API_TOKENS] 178
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['Ineffectively', 'Inevitably', 'Inexorably', 'Inexplicably', 'Inferiorly', 'Infrequently', 'Inquisitively', 'Insecurely', 'Inwardly']
        [API_ANSWER] ['[["Ineffectively", "Inefficacement", "B2", 5], ["Inevitably", "Inévitablement", "B2", 7], ["Inexorably", "Inexorablement", "C1", 4], ["Inexplicably", "Inexplicablement", "C1", 4], ["Inferiorly", "Inférieurement", "C1", 2], ["Infrequently", "Rarement", "B2", 5], ["Inquisitively", "Curieusement", "B2", 4], ["Insecurely", "Insécurément", "B2", 4], ["Inwardly", "Intérieurement", "B2", 5]]']
        [API_TOKENS] 162
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adverbs/csv/i.csv
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['Obliviously', 'Obviously', 'Offensively', 'Often', 'Once', 'Only', 'Onward', 'Otherwise', 'Out', 'Outdoors']
        [API_ANSWER] ['[["Obliviously", "Oblivieusement", "B2", 3], ["Obviously", "Évidemment", "B1", 8], ["Offensively", "Offensivement", "C1", 2], ["Often", "Souvent", "A2", 9], ["Once", "Une fois", "A2", 8], ["Only", "Seulement", "A2", 9], ["Onward", "En avant", "C1", 3], ["Otherwise", "Sinon", "B2", 6], ["Out", "Dehors", "A2", 8], ["Outdoors", "Dehors", "B1", 5]]']
        [API_TOKENS] 156
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['Outright', 'Outrightly', 'Outwardly', 'Overboard', 'Overhead', 'Overly', 'Overnight', 'Overseas', 'Overtime']
        [API_ANSWER] ['[["Outright", "Complètement", "B2", 5], ["Outrightly", "Complètement", "C1", 1], ["Outwardly", "Extérieurement", "B2", 3], ["Overboard", "À l\'eau", "C1", 2], ["Overhead", "Au-dessus", "B2", 4], ["Overly", "Excessivement", "B2", 5], ["Overnight", "Du jour au lendemain", "B2", 7], ["Overseas", "À l\'étranger", "B2", 6], ["Overtime", "Heures supplémentaires", "B2", 7]]']
        [API_TOKENS] 156
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adverbs/csv/o.csv
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['Painfully', 'Partially', 'Passionately', 'Patiently', 'Peacefully', 'Pensively', 'Perfectly', 'Playfully', 'Pleasantly', 'Pleasurably']
        [API_ANSWER] ['[["Painfully", "Péniblement", "B2", 5], ["Partially", "Partiellement", "B2", 6], ["Passionately", "Passionnément", "B2", 5], ["Patiently", "Patiamment", "B1", 6], ["Peacefully", "Paisiblement", "B2", 5], ["Pensively", "Pensivement", "C1", 3], ["Perfectly", "Parfaitement", "B1", 7], ["Playfully", "Joueusement", "B2", 5], ["Pleasantly", "Agréablement", "B1", 7], ["Pleasurably", "Plaisamment", "C1", 4]]']
        [API_TOKENS] 173
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['Politely', 'Poorly', 'Positively', 'Powerfully', 'Precisely', 'Professionally', 'Promptly', 'Properly', 'Proudly', 'Publicly']
        [API_ANSWER] ['[["Politely", "Poliment", "B2", 6], ["Poorly", "Mal", "B1", 5], ["Positively", "Positivement", "B2", 6], ["Powerfully", "Puissamment", "C1", 4], ["Precisely", "Précisément", "B2", 6], ["Professionally", "Professionnellement", "B2", 5], ["Promptly", "Promptement", "B2", 5], ["Properly", "Correctement", "B1", 6], ["Proudly", "Fièrement", "B2", 5], ["Publicly", "Publiquement", "B2", 6]]']
        [API_TOKENS] 162
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adverbs/csv/p.csv
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['Warily', 'Warmly', 'Wastefully', 'Weekly', 'Well', 'Wetly', 'Where', 'Wholly', 'Why', 'Wickedly']
        [API_ANSWER] ['[["Warily", "Prudemment", "B2", 3], ["Warmly", "Chaleureusement", "B2", 4], ["Wastefully", "Gaspilleusement", "C1", 2], ["Weekly", "Hebdomadairement", "A2", 6], ["Well", "Bien", "A2", 10], ["Wetly", "Mouillé", "B2", 2], ["Where", "Où", "A1", 10], ["Wholly", "Entièrement", "C1", 3], ["Why", "Pourquoi", "A1", 10], ["Wickedly", "Méchamment", "C1", 3]]']
        [API_TOKENS] 161
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['Wide', 'Wildly', 'Willingly', 'Wistfully', 'Wonderfully', 'Worriedly', 'Worst', 'Worthily', 'Wrongly', 'Wryly']
        [API_ANSWER] ['[["Wide", "Largement", "B2", 6], ["Wildly", "Follement", "B2", 4], ["Willingly", "Volontiers", "B2", 5], ["Wistfully", "Avec mélancolie", "C1", 2], ["Wonderfully", "Merveilleusement", "B2", 5], ["Worriedly", "Inquiètement", "B2", 3], ["Worst", "Le pire", "B1", 7], ["Worthily", "Dignement", "C1", 1], ["Wrongly", "À tort", "B2", 5], ["Wryly", "Ironiquement", "C1", 2]]']
        [API_TOKENS] 169
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adverbs/csv/w.csv
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['Majestically', 'Maybe', 'Meaningfully', 'Meekly', 'Merrily', 'Mightily', 'Mildly', 'Miserably', 'Monthly', 'More']
        [API_ANSWER] ['[["Majestically", "Majestueusement", "C1", 3], ["Maybe", "Peut-être", "A2", 7], ["Meaningfully", "Significativement", "C1", 2], ["Meekly", "Docilement", "C1", 2], ["Merrily", "Joyeusement", "B2", 4], ["Mightily", "Puissamment", "C1", 3], ["Mildly", "Légèrement", "B1", 5], ["Miserably", "Misérablement", "C1", 3], ["Monthly", "Mensuellement", "B1", 4], ["More", "Plus", "A1", 10]]']
        [API_TOKENS] 169
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['Moreover', 'Mortally', 'Most', 'Mostly', 'Mournfully', 'Much', 'Mysteriously']
        [API_ANSWER] ['[["Moreover", "De plus", "B2", 7], ["Mortally", "Mortellement", "C1", 2], ["Most", "Le plus", "B1", 8], ["Mostly", "Principalement", "B2", 6], ["Mournfully", "Tristement", "C1", 3], ["Much", "Beaucoup", "A2", 10], ["Mysteriously", "Mystérieusement", "B2", 5]]']
        [API_TOKENS] 112
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adverbs/csv/m.csv
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['Xenodochially', 'Xenogenetically', 'Xenomorphically', 'Xenophobically', 'Xenophontically', 'Xerographically', 'Xerophytically', 'Xylographically']
        [API_ANSWER] ['[["Xenodochially", "Xénodochiquement", "C2", 1], ["Xenogenetically", "Xénogénétiquement", "C2", 1], ["Xenomorphically", "Xénomorphiquement", "C2", 1], ["Xenophobically", "Xénophobiquement", "C2", 1], ["Xenophontically", "Xénophontiquement", "C2", 1], ["Xerographically", "Xérographiquement", "C2", 1], ["Xerophytically", "Xérophytiquement", "C2", 1], ["Xylographically", "Xylographiquement", "C2", 1]]']
        [API_TOKENS] 165
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adverbs/csv/x.csv
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['badly', 'barely', 'beautifully', 'beforehand', 'begrudgingly', 'belatedly', 'benevolently', 'better', 'between', 'bewilderedly']
        [API_ANSWER] ['[["badly", "mal", "B2", 7], ["barely", "à peine", "B2", 6], ["beautifully", "magnifiquement", "B2", 5], ["beforehand", "à l\'avance", "B2", 5], ["begrudgingly", "à contrecoeur", "C1", 2], ["belatedly", "tardivement", "C1", 3], ["benevolently", "bienveillamment", "C2", 2], ["better", "mieux", "A2", 10], ["between", "entre", "A1", 10], ["bewilderedly", "perplexe", "C1", 2]]']
        [API_TOKENS] 166
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['bitterly', 'blatantly', 'bleakly', 'blindly', 'blissfully', 'boastfully', 'boldly', 'boringly', 'bravely']
        [API_ANSWER] ['[["bitterly", "amèrement", "B2", 5], ["blatantly", "de manière éhontée", "C1", 3], ["bleakly", "tristement", "C1", 2], ["blindly", "aveuglément", "B2", 4], ["blissfully", "heureusement", "C1", 3], ["boastfully", "avec vantardise", "C1", 2], ["boldly", "hardiment", "B2", 5], ["boringly", "ennuyeusement", "B2", 6], ["bravely", "courageusement", "B1", 6]]']
        [API_TOKENS] 155
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adverbs/csv/b.csv
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['Tactfully', 'Tastefully', 'Tediously', 'Temporarily', 'Tenderly', 'Terribly', 'Thankfully', 'Thoroughly', 'Thoughtfully', 'Thus']
        [API_ANSWER] ['[["Tactfully", "Avec tact", "B2", 4], ["Tastefully", "Avec goût", "B2", 4], ["Tediously", "De manière fastidieuse", "B2", 3], ["Temporarily", "Temporairement", "B1", 6], ["Tenderly", "Tendrement", "B2", 3], ["Terribly", "Terriblement", "B1", 7], ["Thankfully", "Heureusement", "B2", 5], ["Thoroughly", "Complètement", "B2", 7], ["Thoughtfully", "Avec réflexion", "B2", 4], ["Thus", "Ainsi", "B2", 7]]']
        [API_TOKENS] 170
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['Tightly', 'Today', 'Together', 'Tomorrow', 'Tonight', 'Tremendously', 'Triumphantly', 'Truly', 'Twice']
        [API_ANSWER] ['[["Tightly", "Fermement", "B1", 5], ["Today", "Aujourd\'hui", "A1", 10], ["Together", "Ensemble", "A2", 8], ["Tomorrow", "Demain", "A1", 10], ["Tonight", "Ce soir", "A2", 7], ["Tremendously", "Énormément", "C1", 3], ["Triumphantly", "Triomphalement", "C1", 2], ["Truly", "Vraiment", "B2", 6], ["Twice", "Deux fois", "A2", 7]]']
        [API_TOKENS] 143
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adverbs/csv/t.csv
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['daily', 'daintily', 'daringly', 'dearly', 'decently', 'deeply', 'definitely', 'deliberately', 'delightfully', 'diligently']
        [API_ANSWER] ['[["daily", "quotidiennement", "A2", 7], ["daintily", "délicatement", "B2", 2], ["daringly", "hardiment", "C1", 3], ["dearly", "cher", "B2", 4], ["decently", "décemment", "B2", 5], ["deeply", "profondément", "B1", 8], ["definitely", "certainement", "B1", 9], ["deliberately", "délibérément", "B2", 6], ["delightfully", "charmante", "C1", 2], ["diligently", "diligemment", "B2", 5]]']
        [API_TOKENS] 169
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adverbs and guidelines, you have to create a list of list. For each adverbs, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adverbs
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adverbs into the expected list of lists of adverbs without comments. ['dimly', 'directly', 'discreetly', 'distinctly', 'divinely', 'dizzily', 'docilely', 'doubtfully', 'dramatically', 'dutifully']
        [API_ANSWER] ['[["dimly", "obscurément", "B2", 5], ["directly", "directement", "A2", 8], ["discreetly", "discrètement", "B2", 4], ["distinctly", "distinctement", "B2", 5], ["divinely", "divinement", "C1", 2], ["dizzily", "étourdiment", "C1", 2], ["docilely", "docilement", "C1", 1], ["doubtfully", "douteusement", "B2", 4], ["dramatically", "dramatiquement", "B1", 6], ["dutifully", "dûment", "C1", 2]]']
        [API_TOKENS] 169
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adverbs/csv/d.csv
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Calm', 'Careful', 'Caring', 'Charming', 'Chatty', 'Cheerful', 'Childish', 'Chilly', 'Chosen', 'Chubby']
        [API_ANSWER] ['[["Calm", "Calme", "B2", 6], ["Careful", "Prudent-Soigneux", "B2", 7], ["Caring", "Attentionné", "B2", 5], ["Charming", "Charmant", "B2", 6], ["Chatty", "Bavard", "B2", 4], ["Cheerful", "Joyeux", "B2", 6], ["Childish", "Enfantin", "B2", 4], ["Chilly", "Froid", "B2", 5], ["Chosen", "Choisi", "B2", 4], ["Chubby", "Potelé", "B2", 3]]']
        [API_TOKENS] 161
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Chunky', 'Civilized', 'Classic', 'Classy', 'Clean', 'Clever', 'Clingy', 'Cloudless', 'Cloudy', 'Clueless']
        [API_ANSWER] ['[["Chunky", "Massif", "B1", 4], ["Civilized", "Civilisé", "B2", 5], ["Classic", "Classique", "B1", 6], ["Classy", "Chic", "B2", 4], ["Clean", "Propre", "A2", 9], ["Clever", "Intelligent", "B1", 7], ["Clingy", "Collant", "C1", 2], ["Cloudless", "Sans nuage", "C1", 3], ["Cloudy", "Nuageux", "A2", 7], ["Clueless", "Ignorant", "B2", 4]]']
        [API_TOKENS] 154
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Clumsy', 'Cocky', 'Coherent', 'Cold', 'Colorful', 'Colossal', 'Comfortable', 'Confident', 'Confused', 'Cooperative']
        [API_ANSWER] ['[["Clumsy", "Maladroit", "B1", 5], ["Cocky", "Arrogant", "B2", 4], ["Coherent", "Cohérent", "B2", 6], ["Cold", "Froid", "A1", 9], ["Colorful", "Coloré", "B1", 5], ["Colossal", "Colossal", "C1", 3], ["Comfortable", "Confortable", "A2", 8], ["Confident", "Confiant", "B1", 6], ["Confused", "Confus", "B1", 6], ["Cooperative", "Coopératif", "B2", 4]]']
        [API_TOKENS] 159
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Courageous', 'Crafty', 'Cranky', 'Crazy', 'Creative', 'Crispy', 'Critical', 'Crooked', 'Cruel', 'Cuddly']
        [API_ANSWER] ['[["Courageous", "Courageux/Courageuse", "B2", 5],', ' ["Crafty", "Astucieux/Astucieuse", "B2", 4],', ' ["Cranky", "Grognon", "B2", 2],', ' ["Crazy", "Fou/Folle", "B1", 6],', ' ["Creative", "Créatif/Créative", "B1", 7],', ' ["Crispy", "Croustillant", "B2", 3],', ' ["Critical", "Critique", "B2", 6],', ' ["Crooked", "Tordu", "B2", 3],', ' ["Cruel", "Cruel/Cruelle", "B2", 5],', ' ["Cuddly", "Doux/Douce", "A2", 4]]']
        [API_TOKENS] 180
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Cultured', 'Cunning', 'Curious', 'Curly', 'Current', 'Cursed', 'Cute', 'Cynical']
        [API_ANSWER] ['[["Cultured", "Cultivé", "B2", 5], ["Cunning", "Astucieux", "C1", 3], ["Curious", "Curieux", "B1", 7], ["Curly", "Bouclé", "A2", 4], ["Current", "Actuel", "B2", 8], ["Cursed", "Maudit", "C1", 2], ["Cute", "Mignon", "A2", 9], ["Cynical", "Cynique", "C1", 6]]']
        [API_TOKENS] 128
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adjectives/csv/c.csv
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Karmic', 'Keen', 'Keen-eyed', 'Keen-sighted', 'Kempt', 'Key', 'Kind', 'Kindhearted', 'Kinetic', 'Kinky']
        [API_ANSWER] ['[["Karmic", "Karmique", "C1", 3], ["Keen", "Vif", "B2", 6], ["Keen-eyed", "Aux yeux perçants", "C1", 2], ["Keen-sighted", "Aux yeux perçants", "C1", 2], ["Kempt", "Soigné", "C1", 2], ["Key", "Clé", "A2", 5], ["Kind", "Gentil", "A2", 7], ["Kindhearted", "Bienveillant", "B2", 4], ["Kinetic", "Cinétique", "C1", 4], ["Kinky", "Pervers", "C1", 3]]']
        [API_TOKENS] 168
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Kittenish', 'Knavish', 'Knockout', 'Knotty', 'Knowledgeable', 'Known', 'Kooky', 'Kosher']
        [API_ANSWER] ['[["Kittenish", "Joueur de chat", "B1", 3],', ' ["Knavish", "Malicieux", "C2", 1],', ' ["Knockout", "Ravissant", "B2", 5],', ' ["Knotty", "Emmêlé", "B2", 3],', ' ["Knowledgeable", "Compétent", "C1", 6],', ' ["Known", "Connu", "A2", 10],', ' ["Kooky", "Bizarre", "B2", 4],', ' ["Kosher", "Casher", "B2", 4]]']
        [API_TOKENS] 131
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adjectives/csv/k.csv
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Eager', 'Early', 'Earnest', 'Earthy', 'Easy', 'Eccentric', 'Eclectic', 'Economic', 'Edgy', 'Educated']
        [API_ANSWER] ['[["Eager", "Enthousiaste", "B2", 6], ["Early", "Tôt", "A2", 7], ["Earnest", "Sérieux", "B2", 4], ["Earthy", "Terreux", "C1", 2], ["Easy", "Facile", "A1", 10], ["Eccentric", "Excentrique", "C1", 3], ["Eclectic", "Éclectique", "C1", 4], ["Economic", "Économique", "B1", 8], ["Edgy", "Nerveux", "C1", 3], ["Educated", "Cultivé", "B2", 6]]']
        [API_TOKENS] 162
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Eerie', 'Effective', 'Effervescent', 'Efficient', 'Elaborate', 'Elastic', 'Elated', 'Elderly', 'Electric', 'Elegant']
        [API_ANSWER] ['[["Eerie", "Inquiétant", "B2", 4], ["Effective", "Efficace", "B2", 7], ["Effervescent", "Effervescent", "C1", 3], ["Efficient", "Efficace", "B2", 8], ["Elaborate", "Elaboré", "C1", 5], ["Elastic", "Élastique", "B2", 3], ["Elated", "Enchanté", "C1", 2], ["Elderly", "Âgé", "B1", 6], ["Electric", "Électrique", "B2", 8], ["Elegant", "Élégant", "B2", 7]]']
        [API_TOKENS] 164
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Elemental', 'Elevated', 'Eligible', 'Elite', 'Embarrassed', 'Embellished', 'Embracing', 'Eminent', 'Emotional', 'Empathetic']
        [API_ANSWER] ['[["Elemental", "Élémentaire", "B1", 4], ["Elevated", "Élevé", "C1", 3], ["Eligible", "Éligible", "B2", 5], ["Elite", "Élite", "C1", 6], ["Embarrassed", "Embarrassé", "B2", 5], ["Embellished", "Orné", "C1", 2], ["Embracing", "Embrassant", "B2", 3], ["Eminent", "Éminent", "C1", 4], ["Emotional", "Émotionnel", "B2", 6], ["Empathetic", "Empathique", "B2", 5]]']
        [API_TOKENS] 165
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Empowered', 'Empty', 'Enchanting', 'Encouraging', 'Endearing', 'Endless', 'Energetic', 'Engaging', 'Enjoyable', 'Enormous']
        [API_ANSWER] ['[["Empowered", "habilité(e)-autonome", "C1", 5],', ' ["Empty", "vide", "A2", 7],', ' ["Enchanting", "enchant(e)-charmant(e)", "B2", 3],', ' ["Encouraging", "encourageant(e)", "B2", 5],', ' ["Endearing", "attachant(e)-aimable", "C1", 4],', ' ["Endless", "infini(e)-interminable", "B2", 4],', ' ["Energetic", "énergique-dynamique", "B2", 6],', ' ["Engaging", "captivant(e)-intéressant(e)", "B2", 6],', ' ["Enjoyable", "agréable", "B1", 6],', ' ["Enormous", "énorme", "B1", 7]]']
        [API_TOKENS] 189
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Enriching', 'Enthusiastic', 'Entire', 'Entitled', 'Envious', 'Environmental', 'Epic', 'Equal', 'Equipped', 'Essential']
        [API_ANSWER] ['[["Enriching", "Enrichissant", "B2", 5], ["Enthusiastic", "Enthousiaste", "B2", 6], ["Entire", "Entier", "B1", 4], ["Entitled", "Intitulé", "B2", 3], ["Envious", "Envieux", "B2", 3], ["Environmental", "Environnemental", "B2", 7], ["Epic", "Épique", "C1", 3], ["Equal", "Égal", "B1", 6], ["Equipped", "Équipé", "B2", 5], ["Essential", "Essentiel", "B1", 8]]']
        [API_TOKENS] 163
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adjectives/csv/e.csv
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Gamy', 'Gargantuan', 'Gaseous', 'Gaudy', 'Geeky', 'Generous', 'Gentle', 'Genuine', 'Gesticulating', 'Ghastly']
        [API_ANSWER] ['[["Gamy", "Giboyeux", "B2", 2], ["Gargantuan", "Gargantuesque", "C2", 3], ["Gaseous", "Gazeux", "B2", 4], ["Gaudy", "Tape-à-l\'œil", "B2", 5], ["Geeky", "Geek", "B1", 6], ["Generous", "Généreux", "B1", 7], ["Gentle", "Doux", "B1", 8], ["Genuine", "Authentique", "B2", 9], ["Gesticulating", "Gesticulant", "C1", 1], ["Ghastly", "Lugubre", "C1", 2]]']
        [API_TOKENS] 178
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Ghostly', 'Ghoulish', 'Giddy', 'Gifted', 'Giggly', 'Glazed', 'Gleaming', 'Glistening', 'Glittering', 'Glorious']
        [API_ANSWER] ['[["Ghostly", "Spectral", "B2", 4], ["Ghoulish", "Macabre", "C1", 3], ["Giddy", "Etourdi", "B2", 5], ["Gifted", "Doué", "B2", 6], ["Giggly", "Rieur", "B2", 4], ["Glazed", "Vitré", "B2", 4], ["Gleaming", "Luisant", "B2", 5], ["Glistening", "Scintillant", "C1", 3], ["Glittering", "Scintillant", "C1", 4], ["Glorious", "Glorieux", "B2", 6]]']
        [API_TOKENS] 165
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Glossy', 'Godly', 'Golden', 'Good', 'Goofy', 'Gorgeous', 'Gothic', 'Graceful', 'Gracious', 'Grand']
        [API_ANSWER] ['[["Glossy", "Brillant", "B2", 5], ["Godly", "Divin", "B2", 3], ["Golden", "Doré", "B1", 6], ["Good", "Bon(ne)", "A2", 10], ["Goofy", "Bouffon(ne)", "B2", 2], ["Gorgeous", "Magnifique", "B2", 7], ["Gothic", "Gothique", "B2", 4], ["Graceful", "Gracieux(se)", "B2", 3], ["Gracious", "Courtois(e)", "C1", 4], ["Grand", "Grand(e)", "A2", 9]]']
        [API_TOKENS] 161
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Grandiose', 'Grateful', 'Grating', 'Gray', 'Greasy', 'Great', 'Greedy', 'Green', 'Gregarious', 'Grimy']
        [API_ANSWER] ['[["Grandiose", "Grandiose", "C2", 4], ["Grateful", "Reconnaissant", "B2", 5], ["Grating", "Irritant", "B2", 3], ["Gray", "Gris", "A1", 6], ["Greasy", "Gras", "B2", 4], ["Great", "Grand", "A1", 10], ["Greedy", "Avide", "B2", 5], ["Green", "Vert", "A1", 10], ["Gregarious", "Sociable", "C1", 2], ["Grimy", "Sale", "B2", 3]]']
        [API_TOKENS] 153
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Grisly', 'Groovy', 'Grouchy', 'Grubby', 'Grungy', 'Guilty', 'Gullible', 'Gummy']
        [API_ANSWER] ['[["Grisly", "Horrible", "C1", 3], ["Groovy", "Super", "B2", 5], ["Grouchy", "Grincheux", "B2", 4], ["Grubby", "Sale", "B2", 4], ["Grungy", "Délabré", "C1", 2], ["Guilty", "Coupable", "B2", 7], ["Gullible", "Crédule", "C1", 3], ["Gummy", "Gommeux", "B2", 3]]']
        [API_TOKENS] 131
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adjectives/csv/g.csv
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Quadratic', 'Quaint', 'Quaintish', 'Qualified', 'Quality', 'Quantitative', 'Quarantined', 'Quarrelous', 'Quarrelsome', 'Quasi']
        [API_ANSWER] ['[["Quadratic", "Quadratique", "C1", 3],', ' ["Quaint", "Charmant", "B2", 5],', ' ["Quaintish", "Un peu charmant", "C1", 1],', ' ["Qualified", "Qualifié", "B2", 6],', ' ["Quality", "Qualité", "A2", 10],', ' ["Quantitative", "Quantitatif", "C1", 4],', ' ["Quarantined", "Mis en quarantaine", "C1", 2],', ' ["Quarrelous", "Querelleur", "C1", 2],', ' ["Quarrelsome", "Querelleur", "C1", 3],', ' ["Quasi", "Quasi", "B2", 5]]']
        [API_TOKENS] 169
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Quasi-constitutional', 'Quasi-empirical', 'Quasi-intellectual', 'Quasi-judicial', 'Quasi-legal', 'Quasi-military', 'Quasi-philosophical', 'Quasi-physical', 'Quasi-political', 'Quasi-religious']
        [API_ANSWER] ['[["Quasi-constitutional", "Quasi-constitutionnel", "C1", 3], ["Quasi-empirical", "Quasi-empirique", "C1", 2], ["Quasi-intellectual", "Quasi-intellectuel", "C1", 3], ["Quasi-judicial", "Quasi-judiciaire", "C1", 3], ["Quasi-legal", "Quasi-légal", "C1", 4], ["Quasi-military", "Quasi-militaire", "C1", 3], ["Quasi-philosophical", "Quasi-philosophique", "C1", 3], ["Quasi-physical", "Quasi-physique", "C1", 3], ["Quasi-political", "Quasi-politique", "C1", 4], ["Quasi-religious", "Quasi-religieux", "C1", 3]]']
        [API_TOKENS] 210
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Quasi-romantic', 'Quasi-royal', 'Quasi-scientific', 'Quasi-social', 'Quasi-spiritual', 'Quasi-technical', 'Quasi-theoretical', 'Quasi-urban', 'Queenly', 'Quenchless']
        [API_ANSWER] ['[["Quasi-romantic", "Quasi-romantique", "B2", 4], ["Quasi-royal", "Quasi-royal", "C1", 2], ["Quasi-scientific", "Quasi-scientifique", "B2", 4], ["Quasi-social", "Quasi-social", "B2", 4], ["Quasi-spiritual", "Quasi-spirituel", "C1", 3], ["Quasi-technical", "Quasi-technique", "B2", 4], ["Quasi-theoretical", "Quasi-théorique", "C1", 3], ["Quasi-urban", "Quasi-urbain", "B2", 4], ["Queenly", "Reine", "C1", 2], ["Quenchless", "Insatiable", "C2", 2]]']
        [API_TOKENS] 196
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Questionable', 'Quick', 'Quiet', 'Quirky', 'Quirky-cool', 'Quivery', 'Quixotic', 'Quizzical', 'Quondam', 'Quotable']
        [API_ANSWER] ['[["Questionable", "Douteux", "B2", 6], ["Quick", "Rapide", "A2", 9], ["Quiet", "Calme", "A2", 8], ["Quirky", "Bizarre", "B2", 4], ["Quirky-cool", "Bizarrement cool", "C1", 2], ["Quivery", "Tremblant", "C2", 1], ["Quixotic", "Idéaliste", "C1", 3], ["Quizzical", "Perplexe", "C1", 3], ["Quondam", "Ancien", "C2", 2], ["Quotable", "Citable", "C1", 4]]']
        [API_TOKENS] 165
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Quotidian']
        [API_ANSWER] ['[["Quotidian", "Quotidien(ne)", "B2", 6]]']
        [API_TOKENS] 20
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adjectives/csv/q.csv
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['abundant', 'acute', 'adorable', 'aged', 'aggressive', 'alert', 'alive', 'alluring', 'aloof', 'amazing']
        [API_ANSWER] ['[["abundant", "abondant(e)", "B2", 6],', ' ["acute", "aigu(ë)", "B2", 5],', ' ["adorable", "adorable", "A2", 4],', ' ["aged", "âgé(e)", "B1", 4],', ' ["aggressive", "agressif(ve)", "B2", 5],', ' ["alert", "alerte", "B1", 5],', ' ["alive", "vivant(e)", "A2", 5],', ' ["alluring", "séduisant(e)", "C1", 3],', ' ["aloof", "à distance", "C1", 2],', ' ["amazing", "étonnant(e)", "B1", 6]]']
        [API_TOKENS] 164
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['amiable', 'ample', 'ancient', 'angry', 'angular', 'animated', 'annoyed', 'anxious', 'appetizing', 'appropriate']
        [API_ANSWER] ['[["amiable", "aimable", "B1", 5], ["ample", "ample", "B2", 4], ["ancient", "ancien/-ne", "B2", 6], ["angry", "fâché/-e", "A2", 7], ["angular", "anguleux/-se", "C1", 2], ["animated", "animé/-e", "B2", 5], ["annoyed", "agacé/-e", "B1", 5], ["anxious", "anxieux/-se", "B1", 6], ["appetizing", "appétissant/-e", "B2", 4], ["appropriate", "approprié/-e", "B2", 7]]']
        [API_TOKENS] 169
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['arctic', 'arid', 'aromatic', 'artificial', 'artistic', 'ashamed', 'aspiring', 'assorted', 'astonishing', 'athletic']
        [API_ANSWER] ['[["arctic", "arctique", "B2", 5], ["arid", "aride", "B2", 4], ["aromatic", "aromatique", "B2", 4], ["artificial", "artificiel", "B2", 6], ["artistic", "artistique", "B1", 6], ["ashamed", "honteux/-euse", "B2", 2], ["aspiring", "ambitieux/-euse", "B2", 3], ["assorted", "divers/-e", "B2", 3], ["astonishing", "étonnant", "B2", 4], ["athletic", "athlétique", "B1", 5]]']
        [API_TOKENS] 166
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['attractive', 'austere', 'authentic', 'automatic', 'available', 'average', 'awake', 'aware', 'awesome', 'awful']
        [API_ANSWER] ['[["attractive", "attrayant", "B1", 7], ["austere", "austère", "C1", 4], ["authentic", "authentique", "B2", 6], ["automatic", "automatique", "B1", 6], ["available", "disponible", "A2", 8], ["average", "moyen", "B1", 7], ["awake", "éveillé", "B2", 4], ["aware", "conscient", "B2", 6], ["awesome", "impressionnant", "B2", 5], ["awful", "affreux", "B2", 5]]']
        [API_TOKENS] 156
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['awkward']
        [API_ANSWER] ['[["awkward", "maladroit", "B2", 6]]']
        [API_TOKENS] 17
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adjectives/csv/a.csv
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['zany', 'zealous', 'zesty', 'zippy', 'zonal', 'zoological']
        [API_ANSWER] ['[["zany", "farfelu", "B2", 4], ["zealous", "zélé", "C1", 5], ["zesty", "épicé", "B2", 3], ["zippy", "vif", "B2", 3], ["zonal", "zoné", "C1", 2], ["zoological", "zoologique", "C1", 3]]']
        [API_TOKENS] 94
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adjectives/csv/z.csv
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['handsome', 'happy', 'hard', 'harsh', 'hasty', 'healthy', 'heavenly', 'heavy', 'helpful', 'heroic']
        [API_ANSWER] ['[["handsome", "beau", "B1", 6], ["happy", "heureux", "A2", 9], ["hard", "dur", "A2", 8], ["harsh", "sévère", "C1", 4], ["hasty", "précipité", "C1", 2], ["healthy", "sain", "B1", 7], ["heavenly", "céleste", "C2", 2], ["heavy", "lourd", "A2", 8], ["helpful", "utile", "B1", 7], ["heroic", "héroïque", "C1", 3]]']
        [API_TOKENS] 154
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['hidden', 'high', 'hilarious', 'hollow', 'honest', 'honorable', 'hopeful', 'horrible', 'hostile', 'hot']
        [API_ANSWER] ['[["hidden", "caché", "B2", 5], ["high", "haut", "A2", 9], ["hilarious", "hilare", "B2", 4], ["hollow", "creux", "B2", 4], ["honest", "honnête", "B1", 8], ["honorable", "honorable", "C1", 3], ["hopeful", "optimiste", "B1", 6], ["horrible", "horrible", "B1", 7], ["hostile", "hostile", "C1", 4], ["hot", "chaud", "A1", 9]]']
        [API_TOKENS] 151
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['huge', 'humorous', 'hungry', 'hurtful', 'husky']
        [API_ANSWER] ['[["huge", "énorme", "B2", 8], ["humorous", "amusant", "B2", 6], ["hungry", "affamé", "A2", 7], ["hurtful", "blessant", "C1", 4], ["husky", "râpeux", "B2", 3]]']
        [API_TOKENS] 81
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adjectives/csv/h.csv
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['radiant', 'rare', 'rash', 'rational', 'raw', 'ready', 'real', 'reasonable', 'reassuring', 'rebel']
        [API_ANSWER] ['[["radiant", "rayonnant", "B2", 5], ["rare", "rare", "B1", 6], ["rash", "imprudent - éruption cutanée", "C1", 3], ["rational", "rationnel", "B2", 6], ["raw", "cru", "B2", 5], ["ready", "prêt", "A2", 8], ["real", "réel", "A2", 10], ["reasonable", "raisonnable", "B2", 6], ["reassuring", "rassurant", "B2", 5], ["rebel", "rebel", "B2", 4]]']
        [API_TOKENS] 158
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['receptive', 'reckless', 'rectangular', 'red', 'redundant', 'reflective', 'refreshing', 'regal', 'regular', 'reliable']
        [API_ANSWER] ['[["receptive", "réceptif-ve", "B2", 5], ["reckless", "téméraire", "C1", 4], ["rectangular", "rectangulaire", "B2", 3], ["red", "rouge", "A1", 10], ["redundant", "redondant-e", "C1", 2], ["reflective", "réfléchi-e", "B2", 4], ["refreshing", "rafraîchissant-e", "B2", 3], ["regal", "royal-e", "C1", 2], ["regular", "régulier-ère", "A2", 8], ["reliable", "fiable", "B1", 6]]']
        [API_TOKENS] 171
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['remarkable', 'remote', 'renowned', 'repetitive', 'repulsive', 'resilient', 'resolute', 'resonant', 'respectful', 'responsible']
        [API_ANSWER] ['[["remarkable", "remarquable", "B2", 6], ["remote", "éloigné", "B2", 5], ["renowned", "célèbre", "C1", 5], ["repetitive", "répétitif", "B2", 4], ["repulsive", "répulsif", "C1", 3], ["resilient", "résilient", "C1", 4], ["resolute", "résolu", "C1", 4], ["resonant", "résonnant", "C1", 3], ["respectful", "respectueux", "B2", 6], ["responsible", "responsable", "B2", 8]]']
        [API_TOKENS] 169
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['restless', 'rich', 'ridiculous', 'right', 'rigid', 'ripe', 'ritzy', 'roasted', 'robust', 'romantic']
[ERROR_API] Error when call API: That model is currently overloaded with other requests. You can retry your request, or contact us through our help center at help.openai.com if the error persists. (Please include the request ID d85ff27ac4739aae358604197e61f5ad in your message.)
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['restless', 'rich', 'ridiculous', 'right', 'rigid', 'ripe', 'ritzy', 'roasted', 'robust', 'romantic']
        [API_ANSWER] ['[["restless", "agité", "B2", 5], ["rich", "riche", "A2", 8], ["ridiculous", "ridicule", "B2", 4], ["right", "juste", "B1", 10], ["rigid", "rigide", "B2", 5], ["ripe", "mûr", "B2", 4], ["ritzy", "luxueux", "C1", 2], ["roasted", "rôti", "B2", 3], ["robust", "robuste", "C1", 4], ["romantic", "romantique", "B1", 7]]']
        [API_TOKENS] 154
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['rosy', 'rough', 'round', 'royal', 'rude', 'rugged', 'runny', 'rustic']
        [API_ANSWER] ['[["rosy", "rose", "B1", 4], ["rough", "rugueux", "B2", 6], ["round", "rond", "A2", 8], ["royal", "royal", "B2", 5], ["rude", "rude", "B2", 6], ["rugged", "accidenté", "C1", 3], ["runny", "liquide", "B2", 3], ["rustic", "rustique", "B2", 4]]']
        [API_TOKENS] 120
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adjectives/csv/r.csv
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['vague', 'vain', 'valiant', 'valid', 'valuable', 'vapid', 'variable', 'varied', 'vast', 'vaulted']
        [API_ANSWER] ['[["vague", "vague", "B2", 6], ["vain", "vaniteux/-euse", "B2", 5], ["valiant", "vaillant", "C1", 3], ["valid", "valide", "B2", 7], ["valuable", "précieux/-euse", "B2", 6], ["vapid", "insipide", "C2", 2], ["variable", "variable", "B1", 7], ["varied", "varié", "B2", 5], ["vast", "vaste", "B2", 6], ["vaulted", "voûté", "C1", 2]]']
        [API_TOKENS] 159
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['veiled', 'velvety', 'venomous', 'venturous', 'veracious', 'verdant', 'veritable', 'versatile', 'vexed', 'vibrant']
        [API_ANSWER] ['[["veiled", "voilé", "C1", 3], ["velvety", "velouté", "B2", 2], ["venomous", "venimeux", "C1", 3], ["venturous", "aventureux", "C1", 2], ["veracious", "véridique", "C2", 2], ["verdant", "verdoyant", "C1", 3], ["veritable", "véritable", "B2", 4], ["versatile", "polyvalent", "B2", 4], ["vexed", "vexé", "C1", 2], ["vibrant", "vibrant", "B2", 5]]']
        [API_TOKENS] 167
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['vicious', 'vigilant', 'vigorous', 'vile', 'villainous', 'violet', 'virtual', 'virtuous', 'visible', 'vital']
        [API_ANSWER] ['[["vicious", "vicieux/vicieuse", "C1", 6],', ' ["vigilant", "vigilant/vigilante", "B2", 5],', ' ["vigorous", "vigoureux/vigoureuse", "C1", 5],', ' ["vile", "vil/vile", "C1", 5],', ' ["villainous", "malfaisant/malfaisante", "C2", 2],', ' ["violet", "violet/violette", "A2", 6],', ' ["virtual", "virtuel/virtuelle", "B2", 6],', ' ["virtuous", "vertueux/vertueuse", "C1", 3],', ' ["visible", "visible", "A2", 10],', ' ["vital", "vital/vitale", "B2", 8]]']
        [API_TOKENS] 185
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['vivacious', 'vivid', 'vocal', 'void', 'volatile', 'voluptuous', 'voracious', 'vulgar', 'vulnerable']
        [API_ANSWER] ['[["vivacious", "vivace", "B2", 5], ["vivid", "vif-éclatant", "B2", 6], ["vocal", "vocal", "B2", 6], ["void", "vide", "B2", 5], ["volatile", "volatile", "C1", 6], ["voluptuous", "voluptueux", "C2", 3], ["voracious", "vorace", "C1", 3], ["vulgar", "vulgaire", "B2", 5], ["vulnerable", "vulnérable", "B2", 6]]']
        [API_TOKENS] 148
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adjectives/csv/v.csv
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['salty', 'sassy', 'satisfied', 'savage', 'sensitive', 'shy', 'silly', 'sincere', 'sleek', 'sleepy']
        [API_ANSWER] ['[["salty", "salé", "B2", 5], ["sassy", "impertinent", "C1", 3], ["satisfied", "satisfait", "B1", 7], ["savage", "sauvage", "B2", 4], ["sensitive", "sensible", "B1", 8], ["shy", "timide", "A2", 8], ["silly", "sot", "B1", 6], ["sincere", "sincère", "B2", 7], ["sleek", "élégant", "C1", 3], ["sleepy", "somnolent", "B2", 5]]']
        [API_TOKENS] 161
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['slimy', 'slippery', 'sloppy', 'smart', 'sneaky', 'sociable', 'sophisticated', 'sorrowful', 'sour', 'strong']
        [API_ANSWER] ['[["slimy", "visqueux", "B1", 3], ["slippery", "glissant", "B2", 5], ["sloppy", "négligé", "B2", 4], ["smart", "intelligent", "B1", 7], ["sneaky", "sournois", "B2", 4], ["sociable", "sociable", "A2", 8], ["sophisticated", "sophistiqué", "C1", 4], ["sorrowful", "affligé", "C1", 2], ["sour", "acide", "B1", 6], ["strong", "fort", "A2", 9]]']
        [API_TOKENS] 165
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['stubborn', 'stupid', 'sunny', 'suspicious', 'sweet']
        [API_ANSWER] ['[["stubborn", "têtu", "B2", 6], ["stupid", "stupide", "B1", 7], ["sunny", "ensoleillé", "A2", 5], ["suspicious", "suspicieux", "B2", 4], ["sweet", "doux", "A2", 8]]']
        [API_TOKENS] 81
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adjectives/csv/s.csv
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['ubiquitous', 'ugly', 'ultimate', 'ultra', 'unable', 'unacceptable', 'unadvised', 'unafraid', 'unanimous', 'unarmed']
        [API_ANSWER] ['[["ubiquitous", "omniprésent", "C1", 7], ["ugly", "laid", "B1", 6], ["ultimate", "ultime", "B2", 6], ["ultra", "ultra", "B2", 5], ["unable", "incapable", "B2", 5], ["unacceptable", "inacceptable", "B2", 5], ["unadvised", "déconseillé", "C1", 2], ["unafraid", "sans peur", "B2", 3], ["unanimous", "unanime", "C1", 5], ["unarmed", "désarmé", "C1", 4]]']
        [API_TOKENS] 164
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['unaware', 'unbalanced', 'unbearable', 'unbeatable', 'unbelievable', 'unbiased', 'uncommon', 'unconscious', 'uncooperative', 'uncountable']
        [API_ANSWER] ['[["unaware", "inconscient", "B2", 5], ["unbalanced", "déséquilibré", "B2", 4], ["unbearable", "insupportable", "B2", 6], ["unbeatable", "imbattable", "B2", 4], ["unbelievable", "incroyable", "B2", 6], ["unbiased", "impartial", "C1", 4], ["uncommon", "peu commun", "B2", 5], ["unconscious", "inconscient", "B2", 5], ["uncooperative", "peu coopératif", "C1", 3], ["uncountable", "incalculable", "B2", 4]]']
        [API_TOKENS] 171
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['uncovered', 'uncut', 'undamaged', 'undaunted', 'undecided', 'undefined', 'underground', 'understated', 'undesirable', 'undisputed']
        [API_ANSWER] ['[["uncovered", "découvert", "B2", 5], ["uncut", "non coupé", "B2", 3], ["undamaged", "non endommagé", "B2", 4], ["undaunted", "indomptable", "C1", 2], ["undecided", "indécis", "B2", 4], ["undefined", "indéfini", "B2", 3], ["underground", "souterrain", "B2", 6], ["understated", "sobre", "C1", 3], ["undesirable", "indésirable", "B2", 5], ["undisputed", "incontesté", "C1", 3]]']
        [API_TOKENS] 168
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['undivided', 'unending', 'unforgettable', 'unfortunate', 'unhappy', 'unhealthy', 'unholy', 'unified', 'unique', 'united']
        [API_ANSWER] ['[["undivided", "indivisible", "C1", 5], ["unending", "interminable", "C1", 4], ["unforgettable", "inoubliable", "B2", 5], ["unfortunate", "malheureux", "B2", 6], ["unhappy", "malheureux", "A2", 7], ["unhealthy", "malsain", "B2", 5], ["unholy", "impie", "C1", 3], ["unified", "unifié", "B2", 5], ["unique", "unique", "B2", 8], ["united", "uni", "B1", 7]]']
        [API_TOKENS] 156
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['universal', 'unkempt', 'unknown', 'unlawful', 'unlike', 'unlikely', 'unlimited', 'unlucky', 'unmistakable', 'unnatural']
        [API_ANSWER] ['[["universal", "universel", "B2", 6], ["unkempt", "négligé", "C1", 2], ["unknown", "inconnu", "A2", 8], ["unlawful", "illégal", "B2", 4], ["unlike", "différent", "B1", 6], ["unlikely", "improbable", "B1", 6], ["unlimited", "illimité", "B2", 5], ["unlucky", "malchanceux", "B1", 5], ["unmistakable", "incontestable", "C1", 3], ["unnatural", "contre nature", "B2", 4]]']
        [API_TOKENS] 162
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['unpleasant', 'unpredictable', 'unreasonable', 'unruly', 'unsightly', 'unstable', 'unsuccessful', 'unsuitable', 'unsure', 'untidy']
        [API_ANSWER] ['[["unpleasant", "désagréable", "B2", 6], ["unpredictable", "imprévisible", "B2", 5], ["unreasonable", "déraisonnable", "B2", 5], ["unruly", "indiscipliné", "C1", 3], ["unsightly", "peu esthétique", "C1", 2], ["unstable", "instable", "B2", 6], ["unsuccessful", "sans succès", "B2", 5], ["unsuitable", "inadapté", "B2", 5], ["unsure", "incertain", "B1", 6], ["untidy", "désordonné", "B1", 6]]']
        [API_TOKENS] 169
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['unusual', 'unwanted', 'unwilling', 'upbeat', 'uplifting', 'upper', 'upset', 'uptight', 'urban', 'usable']
        [API_ANSWER] ['[["unusual", "insolite", "B2", 5], ["unwanted", "indésirable", "B2", 4], ["unwilling", "réticent", "B2", 4], ["upbeat", "optimiste", "B2", 5], ["uplifting", "revitalisant", "C1", 3], ["upper", "supérieur", "B2", 5], ["upset", "contrarié", "B1", 6], ["uptight", "tendu", "C1", 2], ["urban", "urbain", "B1", 7], ["usable", "utilisable", "B2", 5]]']
        [API_TOKENS] 157
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['used', 'useful', 'useless', 'usual', 'utmost', 'utter']
        [API_ANSWER] ['[["used", "utilisé", "B1", 7], ["useful", "utile", "B1", 8], ["useless", "inutile", "B2", 6], ["usual", "habituel", "A2", 8], ["utmost", "extrême", "C1", 4], ["utter", "absolu", "C1", 5]]']
        [API_TOKENS] 89
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adjectives/csv/u.csv
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Jaded', 'Jarring', 'Jazzy', 'Jittery', 'Jocund', 'Jolly', 'Jovial', 'Joyful', 'Juicy', 'Jumbled']
        [API_ANSWER] ['[["Jaded", "Blasé", "C1", 5], ["Jarring", "Choquant", "B2", 4], ["Jazzy", "Jazzy", "B2", 3], ["Jittery", "Nerveux", "B2", 4], ["Jocund", "Jocund", "C2", 1], ["Jolly", "Joyeux", "B1", 6], ["Jovial", "Jovial", "C1", 3], ["Joyful", "Joyeux", "B1", 7], ["Juicy", "Juteux", "B2", 4], ["Jumbled", "Emmêlé", "B2", 5]]']
        [API_TOKENS] 165
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Jumbo', 'Jumpy']
        [API_ANSWER] ['[["Jumbo", "géant", "B1", 3], ["Jumpy", "nerveux-agité", "B2", 2]]']
        [API_TOKENS] 35
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adjectives/csv/j.csv
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Nappy', 'Narcissistic', 'Narrow', 'Nascent', 'Nasty', 'National', 'Native', 'Natural', 'Naughty', 'Nautical']
        [API_ANSWER] ['[["Nappy", "Couches-culottes", "A2", 3],', ' ["Narcissistic", "Narcissique", "C1", 4],', ' ["Narrow", "Étroit", "B1", 6],', ' ["Nascent", "Naissant", "C2", 2],', ' ["Nasty", "Désagréable", "B2", 6],', ' ["National", "National", "A2", 8],', ' ["Native", "Autochtone", "B2", 5],', ' ["Natural", "Naturel", "A2", 10],', ' ["Naughty", "Mauvais", "B2", 4],', ' ["Nautical", "Nautique", "C1", 3]]']
        [API_TOKENS] 163
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Navigable', 'Near', 'Neat', 'Necessary', 'Needy', 'Negative', 'Neglected', 'Negligent', 'Nervous', 'Nether']
        [API_ANSWER] ['[["Navigable", "Navigable", "B2", 4], ["Near", "Proche", "A1", 8], ["Neat", "Soigné", "B1", 6], ["Necessary", "Nécessaire", "A2", 10], ["Needy", "Dans le besoin", "B2", 3], ["Negative", "Négatif", "B2", 7], ["Neglected", "Négligé", "C1", 3], ["Negligent", "Négligent", "C1", 3], ["Nervous", "Nerveux", "B1", 7], ["Nether", "Inférieur", "C2", 2]]']
        [API_TOKENS] 163
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Nett', 'Neurotic', 'Neutral', 'New', 'Newfangled', 'Next', 'Nice', 'Nifty', 'Nimble', 'Nippy']
        [API_ANSWER] ['[["Nett", "Net", "B1", 3], ["Neurotic", "Névrosé", "C1", 2], ["Neutral", "Neutre", "B2", 6], ["New", "Nouveau", "A1", 10], ["Newfangled", "Nouvelle-fange", "C2", 1], ["Next", "Prochain", "B1", 7], ["Nice", "Agréable", "A2", 9], ["Nifty", "Chic", "C1", 4], ["Nimble", "Agile", "B2", 5], ["Nippy", "Vif", "C1", 8]]']
        [API_TOKENS] 158
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Noble', 'Nocturnal', 'Noiseless', 'Noisome', 'Noisy', 'Nonchalant', 'Noncommittal', 'Nondescript', 'Nonjudgmental', 'Nonpareil']
        [API_ANSWER] ['[["Noble", "Noble", "C1", 6], ["Nocturnal", "Nocturne", "B2", 5], ["Noiseless", "Silencieux", "C1", 3], ["Noisome", "Mauvais", "C2", 1], ["Noisy", "Bruyant", "B1", 6], ["Nonchalant", "Nonchalant", "C1", 4], ["Noncommittal", "Évasif", "C1", 3], ["Nondescript", "Banal", "C1", 4], ["Nonjudgmental", "Bienveillant", "C1", 2], ["Nonpareil", "Sans égal", "C2", 2]]']
        [API_TOKENS] 170
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Nonsensical', 'Nonstop', 'Nonverbal', 'Nonviolent', 'Normal', 'Nostalgic', 'Notable', 'Noteworthy', 'Nourishing', 'Novel']
        [API_ANSWER] ['[["Nonsensical", "absurde", "C1", 4], ["Nonstop", "sans arrêt", "B2", 5], ["Nonverbal", "non verbal", "B2", 3], ["Nonviolent", "non violent", "B2", 4], ["Normal", "normal", "A2", 10], ["Nostalgic", "nostalgique", "B2", 5], ["Notable", "remarquable", "B2", 6], ["Noteworthy", "digne d\'intérêt", "C1", 5], ["Nourishing", "nourrissant", "B2", 3], ["Novel", "nouveau", "B1", 7]]']
        [API_TOKENS] 167
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Nubile', 'Nuclear', 'Nude', 'Numb', 'Numerous', 'Nurturing', 'Nutritious', 'Nutty']
        [API_ANSWER] ['[["Nubile", "Nubile", "C1", 2],', ' ["Nuclear", "Nucléaire", "B2", 8],', ' ["Nude", "Nu(e)", "B2", 5],', ' ["Numb", "Engourdi", "B2", 5],', ' ["Numerous", "Nombreux", "B2", 7],', ' ["Nurturing", "Nourrissant", "C1", 3],', ' ["Nutritious", "Nutritif", "B2", 6],', ' ["Nutty", "Noisette", "B2", 4]]']
        [API_TOKENS] 132
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adjectives/csv/n.csv
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['y', 'yare', 'yawning', 'yearly', 'yellow', 'yester', 'yielding', 'yogic', 'yokelish', 'yolky']
        [API_ANSWER] ['[["y", "pouring", "A2", 3], ["yare", "alerte", "C2", 1], ["yawning", "bâillement", "B2", 2], ["yearly", "annuel", "B2", 3], ["yellow", "jaune", "A1", 8], ["yester", "hier", "C1", 1], ["yielding", "céder", "C1", 2], ["yogic", "yogique", "C1", 1], ["yokelish", "rustique", "C2", 1], ["yolky", "jaune d\'oeuf", "C2", 1]]']
        [API_TOKENS] 160
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['youthful', 'yucky', 'yuletide', 'yummy', 'yummylicious']
        [API_ANSWER] ['[["youthful", "jeune", "B2", 5], ["yucky", "dégoûtant", "B2", 3], ["yuletide", "de Noël", "B2", 2], ["yummy", "délicieux", "A2", 6], ["yummylicious", "délicieux", "B2", 2]]']
        [API_TOKENS] 88
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adjectives/csv/y.csv
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Lanky', 'Lavish', 'Lazy', 'Lethal', 'Liberal', 'Light', 'Lively', 'Lofty', 'Logical', 'Lonely']
        [API_ANSWER] ['[["Lanky", "Dégingandé", "B1", 3], ["Lavish", "Somptueux", "C1", 4], ["Lazy", "Paresseux", "A2", 8], ["Lethal", "Mortel", "C1", 5], ["Liberal", "Libéral", "B2", 6], ["Light", "Léger", "A2", 10], ["Lively", "Animé", "B1", 7], ["Lofty", "Élevé", "C1", 2], ["Logical", "Logique", "B1", 8], ["Lonely", "Solitaire", "B1", 6]]']
        [API_TOKENS] 160
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Long', 'Loud', 'Lovely', 'Loving', 'Loyal', 'Lucid', 'Lucky', 'Luminous', 'Luscious', 'Lush']
        [API_ANSWER] ['[["Long", "Long", "B1", 8], ["Loud", "Fort", "B1", 7], ["Lovely", "Agréable", "B1", 7], ["Loving", "Affectueux", "B2", 5], ["Loyal", "Loyal", "B2", 6], ["Lucid", "Lucide", "C1", 3], ["Lucky", "Chanceux", "B1", 6], ["Luminous", "Lumineux", "C1", 4], ["Luscious", "Doux", "C2", 2], ["Lush", "Luxuriant", "C1", 3]]']
        [API_TOKENS] 156
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Lustrous', 'Luxurious']
        [API_ANSWER] ['[["Lustrous", "Lustré(e)-brillant(e)", "C1", 3], ["Luxurious", "Luxueux(se)", "B2", 6]]']
        [API_TOKENS] 41
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adjectives/csv/l.csv
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Fabulous', 'Faint', 'Fair', 'Faithful', 'Fake', 'Familiar', 'Famous', 'Fancy', 'Fantastic', 'Far']
        [API_ANSWER] ['[["Fabulous", "Fabuleux(se)", "B2", 6], ["Faint", "Faible", "B2", 4], ["Fair", "Juste-équitable", "B2", 6], ["Faithful", "Fidèle", "B2", 5], ["Fake", "Faux(se)", "B2", 6], ["Familiar", "Familier(ère)", "B1", 6], ["Famous", "Célèbre", "B1", 7], ["Fancy", "Fantaisiste", "B2", 5], ["Fantastic", "Fantastique", "B1", 7], ["Far", "Loin", "A1", 10]]']
        [API_TOKENS] 163
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Fascinating', 'Fast', 'Fat', 'Faulty', 'Fearful', 'Fearless', 'Feisty', 'Feline', 'Feminine', 'Ferocious']
        [API_ANSWER] ['[["Fascinating", "Fascinant", "B2", 7], ["Fast", "Rapide", "A2", 9], ["Fat", "Gros(se)", "A2", 8], ["Faulty", "Défectueux(se)", "B2", 3], ["Fearful", "Craintif(ve)", "B1", 4], ["Fearless", "Intrépide", "C1", 3], ["Feisty", "Énergique", "C1", 2], ["Feline", "Félin(e)", "B2", 4], ["Feminine", "Féminin(e)", "A2", 7], ["Ferocious", "Féroce", "C2", 4]]']
        [API_TOKENS] 172
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Fertile', 'Festive', 'Few', 'Fierce', 'Filthy', 'Fine', 'Firm', 'First', 'Fishy', 'Fit']
        [API_ANSWER] ['[["Fertile", "Fertile", "B2", 5], ["Festive", "Festif/ Festive", "B2", 4], ["Few", "Peu", "A2", 8], ["Fierce", "Féroce", "B2", 5], ["Filthy", "Sale", "B2", 4], ["Fine", "Bien/ Beau/ Fines/ Fine", "B1", 7], ["Firm", "Ferme", "B2", 6], ["First", "Premier/ Première", "A1", 9], ["Fishy", "Douteux/ Qui a un goût de poisson", "B2", 3], ["Fit", "En forme/ Adapté", "B1", 7]]']
        [API_TOKENS] 177
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Five', 'Flaky', 'Flaming', 'Flashy', 'Flat', 'Flawed', 'Fleeting', 'Flimsy', 'Flippant', 'Flowery']
        [API_ANSWER] ['[["Five", "Cinq", "A1", 5], ["Flaky", "Friable", "B2", 4], ["Flaming", "Flamboyant", "C1", 3], ["Flashy", "Criard", "B2", 5], ["Flat", "Plat", "A2", 8], ["Flawed", "Défectueux", "B2", 5], ["Fleeting", "Éphémère", "C1", 3], ["Flimsy", "Fragile", "B2", 4], ["Flippant", "Désinvolte", "C1", 2], ["Flowery", "Fleuri", "B2", 4]]']
        [API_TOKENS] 164
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Fluffy', 'Fluid', 'Flustered', 'Fluttering', 'Focused', 'Foggy', 'Foolish', 'Forceful', 'Foreseeable', 'Forgetful']
        [API_ANSWER] ['[["Fluffy", "Moelleux/Moelleuse", "A2", 5],', ' ["Fluid", "Fluide", "B2", 6],', ' ["Flustered", "Confus(e)", "C1", 3],', ' ["Fluttering", "Qui voltige", "B2", 2],', ' ["Focused", "Concentré(e)", "B2", 7],', ' ["Foggy", "Brumeux/Brumeuse", "B2", 4],', ' ["Foolish", "Stupide", "B2", 5],', ' ["Forceful", "Puissant(e)", "C1", 4],', ' ["Foreseeable", "Prévisible", "C1", 3],', ' ["Forgetful", "Distrait(e)", "B2", 6]]']
        [API_TOKENS] 171
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adjectives/csv/f.csv
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Icy', 'Idealistic', 'Idiosyncratic', 'Idyllic', 'Illustrious', 'Imaginative', 'Immaculate', 'Immeasurable', 'Immediate', 'Immense']
        [API_ANSWER] ['[["Icy", "Glacial", "B2", 4], ["Idealistic", "Idéaliste", "B2", 5], ["Idiosyncratic", "Idiosyncrasique", "C1", 3], ["Idyllic", "Idyllique", "B2", 4], ["Illustrious", "Illustre", "C1", 3], ["Imaginative", "Imaginatif", "B2", 5], ["Immaculate", "Immaculé", "C1", 2], ["Immeasurable", "Incommensurable", "C2", 2], ["Immediate", "Immédiat", "B1", 7], ["Immense", "Immense", "B2", 6]]']
        [API_TOKENS] 173
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Impartial', 'Inclusive', 'Incomparable', 'Incredible', 'Inexpensive', 'Infinite', 'Influential', 'Informed', 'Ingenious', 'Inherent']
        [API_ANSWER] ['[["Impartial", "Impartial(e)", "C1", 6],', ' ["Inclusive", "Inclusif/Inclusive", "B2", 5],', ' ["Incomparable", "Incomparable", "C1", 4],', ' ["Incredible", "Incroyable", "B1", 6],', ' ["Inexpensive", "Peu coûteux/Abordable", "B2", 5],', ' ["Infinite", "Infini", "C1", 4],', ' ["Influential", "Influent", "C1", 5],', ' ["Informed", "Informé", "B2", 6],', ' ["Ingenious", "Ingénieux", "C1", 4],', ' ["Inherent", "Inhérent", "C1", 5]]']
        [API_TOKENS] 174
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Inimitable', 'Innocent', 'Innocuous', 'Innovative', 'Inquisitive', 'Inquisitorial', 'Inscrutable', 'Insecure', 'Insightful', 'Insistent']
        [API_ANSWER] ['[["Inimitable", "Inimitable", "C1", 3], ["Innocent", "Innocent", "B2", 6], ["Innocuous", "Inoffensif", "C1", 2], ["Innovative", "Innovant", "B2", 7], ["Inquisitive", "Curieux", "B2", 5], ["Inquisitorial", "Inquisitorial", "C2", 1], ["Inscrutable", "Impénétrable", "C1", 3], ["Insecure", "Insécurisé", "B2", 5], ["Insightful", "Perspicace", "C1", 4], ["Insistent", "Insistant", "B2", 6]]']
        [API_TOKENS] 172
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Inspirational', 'Inspiring', 'Instructive', 'Insurmountable', 'Intelligent', 'Intense', 'Interesting', 'Intrepid', 'Intriguing', 'Inventive']
        [API_ANSWER] ['[["Inspirational", "Inspirant", "C1", 6], ["Inspiring", "Inspirant", "B2", 7], ["Instructive", "Instructif", "B2", 5], ["Insurmountable", "Insurmontable", "C2", 2], ["Intelligent", "Intelligent", "B2", 8], ["Intense", "Intense", "B2", 7], ["Interesting", "Intéressant", "B1", 9], ["Intrepid", "Intrépide", "C1", 3], ["Intriguing", "Intrigant", "C1", 4], ["Inventive", "Inventif", "B2", 5]]']
        [API_TOKENS] 170
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Invigorating', 'Invincible', 'Invisible', 'Inviting', 'Irascible', 'Irate', 'Ironic', 'Irresistible', 'Irresponsible', 'Irritating']
[ERROR_API] Error when call API: That model is currently overloaded with other requests. You can retry your request, or contact us through our help center at help.openai.com if the error persists. (Please include the request ID 5be0f3236ba495c10d5c44b461476510 in your message.)
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Invigorating', 'Invincible', 'Invisible', 'Inviting', 'Irascible', 'Irate', 'Ironic', 'Irresistible', 'Irresponsible', 'Irritating']
        [API_ANSWER] ['[["Invigorating", "Revigorant", "B2", 5], ["Invincible", "Invincible", "C1", 6], ["Invisible", "Invisible", "A2", 6], ["Inviting", "Invitant", "B1", 5], ["Irascible", "Irritable", "C2", 3], ["Irate", "Irrité", "C1", 4], ["Ironic", "Ironique", "B2", 5], ["Irresistible", "Irrésistible", "B2", 5], ["Irresponsible", "Irresponsable", "B2", 4], ["Irritating", "Irritant", "B2", 5]]']
        [API_TOKENS] 165
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adjectives/csv/i.csv
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['obedient', 'obese', 'oblong', 'obnoxious', 'obscure', 'observant', 'obsolete', 'obtuse', 'odd', 'odious']
        [API_ANSWER] ['[["obedient", "obéissant", "B1", 6], ["obese", "obèse", "B2", 4], ["oblong", "oblong", "C1", 2], ["obnoxious", "odieux", "C1", 4], ["obscure", "obscur", "B2", 5], ["observant", "observateur", "B2", 4], ["obsolete", "obsolète", "B2", 5], ["obtuse", "obtus", "C1", 3], ["odd", "étrange", "B1", 7], ["odious", "odieux", "C1", 3]]']
        [API_TOKENS] 157
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['offensive', 'official', 'oily', 'old', 'old-fashioned', 'ominous', 'open', 'operational', 'opposite', 'optimal']
        [API_ANSWER] ['[["offensive", "offensif/ive", "C1", 6], ["official", "officiel/le", "B2", 8], ["oily", "huileux/euse", "B2", 4], ["old", "vieux/vieille", "A1", 10], ["old-fashioned", "démodé(e)", "B2", 5], ["ominous", "menaçant(e)", "C1", 3], ["open", "ouvert(e)", "A2", 10], ["operational", "opérationnel/le", "C1", 5], ["opposite", "opposé(e)", "B1", 7], ["optimal", "optimal(e)", "C1", 4]]']
        [API_TOKENS] 172
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['optimistic', 'orange', 'ordinary', 'organic', 'original', 'ornate', 'other', 'outgoing', 'outrageous', 'outstanding']
        [API_ANSWER] ['[["optimistic", "optimiste", "B2", 6], ["orange", "orange", "A2", 8], ["ordinary", "ordinaire", "B1", 7], ["organic", "bio", "B2", 5], ["original", "original", "B2", 7], ["ornate", "orné", "C1", 2], ["other", "autre", "A1", 10], ["outgoing", "extraverti", "B2", 4], ["outrageous", "scandaleux", "C1", 3], ["outstanding", "exceptionnel", "B2", 6]]']
        [API_TOKENS] 148
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['oval', 'overconfident', 'overjoyed', 'overrated', 'overt', 'overwhelmed', 'overzealous', 'own', 'oxygenated']
        [API_ANSWER] ['[["oval", "ovale", "B1", 5], ["overconfident", "trop confiant", "C1", 3], ["overjoyed", "ravi", "B2", 4], ["overrated", "surestimé", "B2", 4], ["overt", "manifeste", "C1", 5], ["overwhelmed", "submergé", "B2", 4], ["overzealous", "excessif", "C2", 2], ["own", "propre", "A2", 10], ["oxygenated", "oxygéné", "C1", 3]]']
        [API_TOKENS] 146
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adjectives/csv/o.csv
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['particular', 'passionate', 'pastel', 'patient', 'patriotic', 'peaceful', 'perfect', 'petite', 'picturesque', 'pink']
        [API_ANSWER] ['[["particular", "particulier", "B2", 6], ["passionate", "passionné", "B2", 5], ["pastel", "pastel", "B2", 4], ["patient", "patient", "A2", 7], ["patriotic", "patriotique", "B2", 4], ["peaceful", "paisible", "B2", 5], ["perfect", "parfait", "B1", 8], ["petite", "petite", "A1", 8], ["picturesque", "pittoresque", "B2", 4], ["pink", "rose", "A2", 7]]']
        [API_TOKENS] 154
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['plain', 'playful', 'pleasant', 'plump', 'poised', 'polite', 'popular', 'positive', 'powerful', 'practical']
        [API_ANSWER] ['[["plain", "simple", "A2", 6], ["playful", "espiègle", "B1", 4], ["pleasant", "agréable", "A2", 7], ["plump", "potelé", "B2", 3], ["poised", "posé", "C1", 2], ["polite", "poli", "A2", 8], ["popular", "populaire", "A2", 8], ["positive", "positif", "B1", 7], ["powerful", "puissant", "B2", 6], ["practical", "pratique", "B1", 8]]']
        [API_TOKENS] 151
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['precious', 'premium', 'pretty', 'pricey', 'pristine', 'private', 'productive', 'professional', 'profound', 'progressive']
        [API_ANSWER] ['[["precious", "précieux", "B2", 6], ["premium", "premium", "B2", 5], ["pretty", "joli", "A2", 7], ["pricey", "coûteux", "B2", 4], ["pristine", "pristine", "C1", 2], ["private", "privé", "B1", 8], ["productive", "productif", "B2", 6], ["professional", "professionnel", "B2", 8], ["profound", "profond", "C1", 4], ["progressive", "progressiste", "B2", 5]]']
        [API_TOKENS] 148
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['prolific', 'prompt', 'proud', 'psychedelic', 'psychological', 'public', 'pure', 'purple']
        [API_ANSWER] ['[["prolific", "prolifique", "C1", 6], ["prompt", "prompt", "B2", 7], ["proud", "fier/fière", "B1", 8], ["psychedelic", "psychédélique", "C1", 3], ["psychological", "psychologique", "B2", 7], ["public", "public/publique", "B1", 9], ["pure", "pur/pure", "B2", 8], ["purple", "violet/violette", "A2", 7]]']
        [API_TOKENS] 129
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adjectives/csv/p.csv
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['wacky', 'wandering', 'warm', 'wary', 'wavy', 'weak', 'wealthy', 'weird', 'wet', 'whimsical']
        [API_ANSWER] ['[["wacky", "farfelu", "B2", 4], ["wandering", "errant", "B2", 3], ["warm", "chaud", "A1", 9], ["wary", "méfiant", "B2", 5], ["wavy", "ondulé", "B2", 4], ["weak", "faible", "A2", 8], ["wealthy", "riche", "B1", 5], ["weird", "étrange", "B1", 7], ["wet", "mouillé", "A1", 9], ["whimsical", "fantaisiste", "C1", 2]]']
        [API_TOKENS] 158
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['white', 'wide', 'wild', 'willing', 'wiry', 'wistful', 'witty', 'wobbly', 'wonderful', 'wondering']
        [API_ANSWER] ['[["white", "blanc", "A2", 9], ["wide", "large", "B1", 8], ["wild", "sauvage", "B1", 7], ["willing", "volontaire", "B2", 6], ["wiry", "nerveux", "C1", 2], ["wistful", "mélancolique", "C1", 3], ["witty", "spirituel", "C1", 5], ["wobbly", "chancelant", "C2", 2], ["wonderful", "merveilleux", "A2", 9], ["wondering", "se demandant", "B2", 4]]']
        [API_TOKENS] 162
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['worn', 'worn-out', 'wretched', 'wry']
        [API_ANSWER] ['[["worn", "usé", "B2", 6], ["worn-out", "épuisé", "C1", 4], ["wretched", "misérable", "B2", 5], ["wry", "ironique", "C1", 3]]']
        [API_TOKENS] 64
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adjectives/csv/w.csv
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Magical', 'Magnetic', 'Magnificent', 'Majestic', 'Malicious', 'Malleable', 'Manly', 'Marvelous', 'Masculine', 'Mature']
        [API_ANSWER] ['[["Magical", "Magique", "B2", 5], ["Magnetic", "Magnétique", "B2", 4], ["Magnificent", "Magnifique", "B2", 5], ["Majestic", "Majestueux", "C1", 3], ["Malicious", "Malveillant", "C1", 2], ["Malleable", " Malléable", "C1", 2], ["Manly", "Viril", "B2", 3], ["Marvelous", "Merveilleux", "B2", 4], ["Masculine", "Masculin", "B2", 4], ["Mature", "Mûr", "B2", 5]]']
        [API_TOKENS] 164
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Meek', 'Mellow', 'Melodic', 'Memorable', 'Merciful', 'Merry', 'Mesmerizing', 'Mighty', 'Mild', 'Mind-blowing']
        [API_ANSWER] ['[["Meek", "Doux/douce", "B1", 4], ["Mellow", "Doux/douce", "B2", 5], ["Melodic", "Mélodique", "B2", 4], ["Memorable", "Mémorable", "B2", 5], ["Merciful", "Miséricordieux/miséricordieuse", "C1", 2], ["Merry", "Joyeux/joyeuse", "B1", 6], ["Mesmerizing", "Hypnotique", "C1", 3], ["Mighty", "Puissant(e)", "B2", 4], ["Mild", "Doux/douce", "B1", 5], ["Mind-blowing", "Époustouflant(e)", "C1", 4]]']
        [API_TOKENS] 184
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Miniature', 'Miraculous', 'Mischievous', 'Misleading', 'Misty', 'Mixed', 'Modern', 'Modest', 'Moldy', 'Monstrous']
        [API_ANSWER] ['[["Miniature", "Miniature", "B1", 4], ["Miraculous", "Miraculeux(se)", "B2", 5], ["Mischievous", "Mauvais(e)", "C1", 3], ["Misleading", "Trompeur(se)", "C1", 4], ["Misty", "Brumeux(se)", "B2", 3], ["Mixed", "Mélangé(e)", "B1", 6], ["Modern", "Moderne", "A2", 9], ["Modest", "Modeste", "B2", 5], ["Moldy", "Moisi(e)", "C1", 2], ["Monstrous", "Monstrueux(se)", "C1", 3]]']
        [API_TOKENS] 170
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Monumental', 'Moody', 'Moral', 'Motivated', 'Mouthwatering', 'Mouthy', 'Muddy', 'Multifaceted', 'Murky', 'Mushy']
        [API_ANSWER] ['[["Monumental", "Monumental", "C1", 6], ["Moody", "Lunatique", "B2", 5], ["Moral", "Moral", "B2", 6], ["Motivated", "Motivé", "B2", 5], ["Mouthwatering", "Appétissant", "B2", 3], ["Mouthy", "Bavard", "C1", 2], ["Muddy", "Boueux", "B2", 4], ["Multifaceted", "Multifacette", "C1", 3], ["Murky", "Trouble", "C1", 4], ["Mushy", "Mou", "B2", 3]]']
        [API_TOKENS] 168
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Musical', 'Musty', 'Mute', 'Mutual', 'Mysterious', 'Mystical', 'Mythical', 'Mythological']
        [API_ANSWER] ['[["Musical", "Musical", "B1", 6], ["Musty", "Moisi", "C1", 2], ["Mute", "Muet", "B1", 5], ["Mutual", "Mutuel", "B2", 5], ["Mysterious", "Mystérieux", "B2", 6], ["Mystical", "Mystique", "C1", 3], ["Mythical", "Mythique", "C1", 4], ["Mythological", "Mythologique", "C1", 4]]']
        [API_TOKENS] 130
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adjectives/csv/m.csv
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Xanthic', 'Xanthochroid', 'Xanthocomic', 'Xanthocyanic', 'Xanthodermic', 'Xanthomatous', 'Xanthophyllous', 'Xanthopous', 'Xanthous', 'Xenial']
        [API_ANSWER] ['[["Xanthic", "Xanthique", "C2", 2], ["Xanthochroid", "Xanthochroïde", "C2", 1], ["Xanthocomic", "Xanthocomique", "C2", 1], ["Xanthocyanic", "Xanthocyanique", "C2", 1], ["Xanthodermic", "Xanthodermique", "C2", 1], ["Xanthomatous", "Xanthomateux", "C2", 1], ["Xanthophyllous", "Xanthophylleux", "C2", 1], ["Xanthopous", "Xanthopode", "C2", 1], ["Xanthous", "Xanthique", "C2", 3], ["Xenial", "Xénial", "C2", 3]]']
        [API_TOKENS] 195
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Xenodochial', 'Xenogenic', 'Xenolithic', 'Xenomorphic', 'Xenophobic', 'Xeric', 'Xerographic', 'Xerophilous', 'Xiphoid', 'Xylographic']
        [API_ANSWER] ['[["Xenodochial", "Xénophile", "C1", 2], ["Xenogenic", "Xénogène", "C2", 1], ["Xenolithic", "Xénolithique", "C2", 1], ["Xenomorphic", "Xénomorphe", "C2", 1], ["Xenophobic", "Xénophobe", "B2", 4], ["Xeric", "Xérique", "C2", 2], ["Xerographic", "Xérographique", "C2", 1], ["Xerophilous", "Xérophile", "C2", 1], ["Xiphoid", "Xiphoïde", "C2", 1], ["Xylographic", "Xylographique", "C2", 1]]']
        [API_TOKENS] 183
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Xylographical', 'Xyloid', 'Xyloidin', 'Xylonic', 'Xylophagous', 'Xylophilous', 'Xylophone', 'Xylopyrographical', 'Xylopyrography', 'Xyloquinone']
        [API_ANSWER] ['[["Xylographical", "Xylographique", "C2", 2], ["Xyloid", "Xyloïde", "C2", 3], ["Xyloidin", "Xylodine", "C2", 1], ["Xylonic", "Xylonique", "C2", 1], ["Xylophagous", "Xylophage", "C2", 2], ["Xylophilous", "Xylophile", "C2", 1], ["Xylophone", "Xylophone", "B2", 7], ["Xylopyrographical", "Xylopyrographique", "C2", 1], ["Xylopyrography", "Xylopyrographie", "C2", 1], ["Xyloquinone", "Xyloquinone", "C2", 1]]']
        [API_TOKENS] 210
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Xylotomous', 'Xyresic']
        [API_ANSWER] ['[["Xylotomous", "Xylotome", "C2", 1], ["Xyresic", "Xyresique", "C2", 1]]']
        [API_TOKENS] 40
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adjectives/csv/x.csv
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['bald', 'bare', 'barren', 'beautiful', 'beige', 'belligerent', 'big', 'bitter', 'bizarre', 'black']
        [API_ANSWER] ['[["bald", "chauve", "B2", 5], ["bare", "nu", "B2", 3], ["barren", "stérile", "C1", 2], ["beautiful", "beau/belle", "A2", 10], ["beige", "beige", "B2", 4], ["belligerent", "belliqueux", "C1", 2], ["big", "grand", "A1", 10], ["bitter", "amer", "B2", 6], ["bizarre", "bizarre", "B2", 6], ["black", "noir", "A1", 10]]']
        [API_TOKENS] 151
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['blaring', 'blissful', 'blue', 'blunt', 'blushing', 'bold', 'brackish', 'brassy', 'brave', 'breezy']
        [API_ANSWER] ['[["blaring", "assourdissant", "B2", 4], ["blissful", "heureux-se", "B2", 2], ["blue", "bleu-e", "A1", 8], ["blunt", "émoussé-e", "B2", 3], ["blushing", "rougissant-e", "B2", 2], ["bold", "audacieux-se", "B2", 6], ["brackish", "saumâtre", "C1", 1], ["brassy", "effronté-e", "C1", 2], ["brave", "courageux-se", "A2", 7], ["breezy", "venteux-se", "B2", 3]]']
        [API_TOKENS] 170
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['bright', 'brisk', 'broad', 'broken', 'brown', 'bumpy', 'burly', 'bushy', 'busy', 'buttery']
        [API_ANSWER] ['[["bright", "brillant", "B1", 7], ["brisk", "vif", "B2", 5], ["broad", "large", "B1", 6], ["broken", "cassé", "B2", 4], ["brown", "marron", "A1", 8], ["bumpy", "bosselé", "B2", 3], ["burly", "costaud", "C1", 2], ["bushy", "broussailleux", "B2", 4], ["busy", "occupé", "A2", 9], ["buttery", "beurré", "C2", 1]]']
        [API_TOKENS] 156
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['buzzing']
        [API_ANSWER] ['[["buzzing", "bourdonnant", "B2", 5]]']
        [API_TOKENS] 17
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adjectives/csv/b.csv
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Tactful', 'Tactile', 'Tactless', 'Talkative', 'Tall', 'Tantalizing', 'Tardy', 'Tasteful', 'Tasty', 'Tawdry']
        [API_ANSWER] ['[["Tactful", "Tactueux(se)", "B2", 5], ["Tactile", "Tactile", "B2", 6], ["Tactless", "Peu tactueux(se)", "C1", 3], ["Talkative", "Bavard(e)", "B1", 6], ["Tall", "Grand(e)", "A1", 9], ["Tantalizing", "Tentant(e)", "C1", 3], ["Tardy", "En retard", "B2", 4], ["Tasteful", "De bon goût", "B2", 5], ["Tasty", "Délicieux(se)", "A2", 8], ["Tawdry", "De mauvais goût", "C2", 2]]']
        [API_TOKENS] 176
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Tenacious', 'Tender', 'Tenebrous', 'Tense', 'Tenuous', 'Tepid', 'Terrene', 'Terrible', 'Terrific', 'Terrigenous']
        [API_ANSWER] ['[["Tenacious", "Tenace", "C1", 6], ["Tender", "Tendre", "A2", 7], ["Tenebrous", "Ténébreux", "C2", 2], ["Tense", "Tendu", "B1", 7], ["Tenuous", "Ténu", "C1", 4], ["Tepid", "Tiède", "C1", 4], ["Terrene", "Terrestre", "C2", 3], ["Terrible", "Terrible", "B1", 8], ["Terrific", "Formidable", "B2", 6], ["Terrigenous", "Terrigène", "C2", 1]]']
        [API_TOKENS] 162
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Territorial', 'Thirsty', 'Thorny', 'Thorough', 'Thoughtful', 'Thrifty', 'Throbbing', 'Thuggish', 'Thunderous', 'Thwarted']
        [API_ANSWER] ['[["Territorial", "Territorial", "B2", 5], ["Thirsty", "Assoiffé(e)", "A2", 6], ["Thorny", "Épineux/Épineuse", "B2", 4], ["Thorough", "Méticuleux/Méticuleuse", "C1", 6], ["Thoughtful", "Attentionné(e)", "B2", 5], ["Thrifty", "Économe", "B2", 4], ["Throbbing", "Pulsant(e)", "C1", 2], ["Thuggish", "Voyou", "C1", 2], ["Thunderous", "Tonitruant(e)", "C2", 2], ["Thwarted", "Contrarié(e)", "C1", 3]]']
        [API_TOKENS] 183
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Tidy', 'Tight', 'Timid', 'Tiny', 'Tired', 'Tolerant', 'Tonal', 'Tonic', 'Topical', 'Torrid']
        [API_ANSWER] ['[["Tidy", "Ordonné(e)", "B1", 6], ["Tight", "Serré(e)", "B2", 7], ["Timid", "Timide", "B2", 4], ["Tiny", "Minuscule", "B1", 5], ["Tired", "Fatigué(e)", "A2", 8], ["Tolerant", "Tolérant(e)", "B2", 5], ["Tonal", "Tonal(e)", "C1", 3], ["Tonic", "Tonique", "B2", 4], ["Topical", "Actuel(le)", "C1", 5], ["Torrid", "Torride", "C1", 2]]']
        [API_TOKENS] 163
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Tough', 'Tranquil', 'Transparent', 'Tremendous', 'Trenchant', 'Tricky', 'Triumphant', 'Trustworthy', 'Tumultuous', 'Turbulent']
        [API_ANSWER] ['[["Tough", "Dur", "B2", 6], ["Tranquil", "Tranquille", "B2", 4], ["Transparent", "Transparent", "B2", 6], ["Tremendous", "Énorme", "B2", 5], ["Trenchant", "Incisif", "C1", 2], ["Tricky", "Difficile", "B2", 5], ["Triumphant", "Triomphant", "C1", 3], ["Trustworthy", "Digne de confiance", "B2", 4], ["Tumultuous", "Tumultueux", "C1", 2], ["Turbulent", "Turbulent", "B2", 5]]']
        [API_TOKENS] 169
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adjectives/csv/t.csv
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Dapper', 'Daring', 'Dark', 'Dazzled', 'Dazzling', 'Dead', 'Deadly', 'Deafening', 'Dear', 'Dearest']
        [API_ANSWER] ['[["Dapper", "Élégant", "B2", 4], ["Daring", "Audacieux", "B2", 5], ["Dark", "Sombre", "A2", 8], ["Dazzled", "Ébloui", "B2", 2], ["Dazzling", "Éblouissant", "B2", 4], ["Dead", "Mort", "A2", 9], ["Deadly", "Mortel", "B2", 5], ["Deafening", "Assourdissant", "C1", 3], ["Dear", "Cher", "A2", 7], ["Dearest", "Très cher", "B2", 3]]']
        [API_TOKENS] 160
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Debonair', 'Decadent', 'Decent', 'Decisive', 'Dedicated', 'Deep', 'Defeated', 'Defensive', 'Defiant', 'Deficient']
        [API_ANSWER] ['[["Debonair", "élégant", "C1", 3], ["Decadent", "décadent", "C1", 4], ["Decent", "décent", "B2", 6], ["Decisive", "décisif", "B2", 7], ["Dedicated", "dévoué", "B2", 5], ["Deep", "profond", "A2", 9], ["Defeated", "vaincu", "B2", 3], ["Defensive", "défensif", "B2", 5], ["Defiant", "défiant", "C1", 4], ["Deficient", "déficient", "C1", 2]]']
        [API_TOKENS] 171
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Definite', 'Deft', 'Deliberate', 'Delicate', 'Delicious', 'Delightful', 'Delirious', 'Demanding', 'Demonic', 'Dependent']
        [API_ANSWER] ['[["Definite", "Définitif", "B2", 7], ["Deft", "Adroit", "C1", 4], ["Deliberate", "Délibéré", "B2", 6], ["Delicate", "Délicat", "B2", 6], ["Delicious", "Délicieux", "A2", 8], ["Delightful", "Délicieux", "B1", 6], ["Delirious", "Déraisonnable", "C1", 3], ["Demanding", "Exigeant", "B2", 6], ["Demonic", "Démoniaque", "C1", 3], ["Dependent", "Dépendant", "B1", 7]]']
        [API_TOKENS] 165
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Depressed', 'Deranged', 'Deserted', 'Desirable', 'Desolate', 'Desperate', 'Determined', 'Devilish', 'Devoted', 'Dewy']
        [API_ANSWER] ['[["Depressed", "Déprimé(e)", "B2", 6], ["Deranged", "Déraisonnable", "C2", 2], ["Deserted", "Désert(e)", "B1", 5], ["Desirable", "Souhaitable", "B2", 6], ["Desolate", "Désolé(e)", "C1", 3], ["Desperate", "Désespéré(e)", "B2", 6], ["Determined", "Déterminé(e)", "B2", 7], ["Devilish", "Diabolique", "C1", 2], ["Devoted", "Dévoué(e)", "B2", 6], ["Dewy", "Rosé(e)", "B2", 3]]']
        [API_TOKENS] 174
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Dexterous', 'Diabolical', 'Different', 'Difficult', 'Digital', 'Diligent', 'Dim', 'Dimpled', 'Diplomatic', 'Direct']
        [API_ANSWER] ['[["Dexterous", "Adroit", "C1", 5], ["Diabolical", "Diabolique", "C1", 3], ["Different", "Différent", "A2", 10], ["Difficult", "Difficile", "A2", 10], ["Digital", "Numérique", "B1", 8], ["Diligent", "Diligent", "B2", 5], ["Dim", "Faible", "B2", 4], ["Dimpled", "Crevassé", "C2", 1], ["Diplomatic", "Diplomatique", "B2", 6], ["Direct", "Direct", "B2", 8]]']
        [API_TOKENS] 159
        [GOOD_LITERAL_EVAL]
        [API_CONTEXT] 
I'm giving you a list of adjectives and guidelines, you have to create a list of list. For each adjectives, you have to create list with:
- first element, the english word.
- second element, the translation in french. You can use two word for a better comprehension seperate by a '-'.
- third element, the CEFR level between A1 and C2.
- fourth element, the frequency of the word scored ranging from 1 for rarely used to 10 for very commonly used.
adjectives
return only the list of the lists in python format. Use double quote for elements of list.
        [API_QUESTION] Transform the following list of adjectives into the expected list of lists of adjectives without comments. ['Dirty', 'Disagreeable', 'Disastrous', 'Discerning', 'Discreet', 'Diseased', 'Disgusted', 'Disgusting']
        [API_ANSWER] ['[["Dirty", "Sale", "A2", 8], ["Disagreeable", "Déplaisant", "B2", 5], ["Disastrous", "Désastreux", "B2", 6], ["Discerning", "Perspicace", "C1", 3], ["Discreet", "Discret", "B2", 6], ["Diseased", "Malade", "B2", 3], ["Disgusted", "Dégoûté", "B2", 4], ["Disgusting", "Dégoûtant", "B2", 6]]']
        [API_TOKENS] 136
        [GOOD_LITERAL_EVAL]
  [CREATE_CSV] File data/french_english/adjectives/csv/d.csv
[TOTAL_WORDS_BY_TYPE] {'verbs': 5996, 'adverbs': 916, 'nouns': 2711, 'adjectives': 3487}
[TOTAL_WORDS] 13110
[TOTAL_TOKENS_BY_TYPE] {'verbs': 31435, 'adverbs': 9091, 'nouns': 21129, 'adjectives': 25528}
[TOTAL_TOKENS] 87183
[FINISH]
